# EXAMPLES
 

# Örnek 3.1: GDS formatı

File: D:\gwasbook\SnpRelate\sequence.gds


# Örnek 3.2: Drops Maize genotip dosyasının okunması
 setwd("D:/gwasbook/Drops_Maize")
 dropsGeno <- read.table("Geno_50K_Drops_012_247I_44729L.tsv", head=TRUE)
 dim(dropsGeno)
 dropsgeno[1:10, 1:5]


# Örnek 3.3: Drops Maize info dosyasının okunması
 setwd("D:/gwasbook/Drops_Maize")
 dropsmap <- read.table("InfoSNP_50K_Drops_44729L.tsv", head=TRUE)
 dim(dropsmap)
dropsmap[1:10,]


# Örnek 3.4: Genind nesnesi oluşturma ve yapısını inceleme

 suppressPackageStartupMessages(installed <- require(adegenet))
 if (!installed){
    install.packages("adegenet", repo="https://cloud.r-project.org",
    dependecies = TRUE)
    suppressPackageStartupMessages(require(adegenet))  
 }
 suppressPackageStartupMessages(installed <- require(vcfR))
 if (!installed){
    install.packages("vcfR", repo="https://cloud.r-project.org",
    dependecies = TRUE)
    suppressPackageStartupMessages(require(vcfR))  
 }
# VCF dosyası oku
 setwd("D:/gwasbook/data/plink")
 exampleVcf <- read.vcfR( "example1.vcf", verbose=FALSE )
# VCF'i genind nesnesine dönüştür
 exampleGenind <- vcfR2genind(exampleVcf)
# Genind nesnesi yapısını göster
str(exampleGenind)


# Örnek 4.1: PLINK'i R'den çalıştırma

 setwd("D:/PLINK")
 system("plink --file toy --assoc --out toy_gwas")



# Örnek 4.2: Analiz sonucunun okunması ve görüntülenmesi
# Bağımlılık: Örnek 4.1

setwd("D:/PLINK")
toy_gwas <- read.table("toy_gwas.assoc", sep="\t", header=T)
toy_gwas
    


# Örnek 4.3: PED'i BED'e dönüştürme
setwd("D:/gwasbook/data/plink")
system("plink --file example1 --make-bed --out example1")


# Örnek 4.4: BED'den PGEN'e dönüştürme
setwd("D:/gwasbook/data/plink")
system("plink2 --bfile example1 --make-pgen --out example1")


# Örnek 4.5: VCF'ten BED'e dönüştürme
setwd("D:/gwasbook/data/plink")
system("plink --vcf example1.vcf --make-bed --out example1")


# Örnek 4.6: vcf.gz'den BED'e dönüştürme
#
 setwd("D:/gwasbook/data/plink")
 plinkCmd <- "plink --vcf example1.vcf.gz --double-id"
 plinkCmd <- paste(plinkCmd,"  --make-bed --out example1_1")
 system(plinkCmd)

 plinkCmd <- "plink --vcf example1.vcf.gz --const-fid"
 plinkCmd <- paste(plinkCmd,"  --make-bed --out example1_2")
 system(plinkCmd)


# Örnek 4.7: VCF'ten PGEN'e dönüştürme
#
 setwd("D:/gwasbook/data/plink")
 system("plink2 --vcf example1.vcf --make-pgen --out example1_1")


# Örnek 4.8: Yeniden kodlama örnekleri
 setwd("D:/gwasbook/data/plink")
 system("plink --file example1 --recode --out example1_1")
 system("plink --file example1 --recode 01 --output-missing-genotype 3 
   --out example1_01")
 system("plink --file example1 --recode 12 --out example1_12")
 system("plink --file example1 --recode A --out example1_A")
 system("plink --file example1 --recode AD --out example1_AD")
 system("plink --file example1 --recode beagle --out example1_beagle")
 system("plink --file example1 --recode structure --out example1_struct")
 system("plink --file example1 --recode bimbam --out example1_bimbam")
 system("plink --file example1 --recode transpose --out example1_trans")
 system("plink --file example1 --recode vcf --out example1_vcf")
 system("plink --file example1 --recode vcf bgz --out example1_bgz")


# Örnek 4.9: BIM ve FAM dosyası okuma 1
 setwd("D:/gwasbook/data/disease")

# BIM dosyasını okuma
 bim <- read.table("disease.bim", header=FALSE, as.is=TRUE)
 head(bim, 3)
# FAM dosyasını okuma
 fam <- read.table("disease.fam", header=FALSE, as.is=TRUE)
 head(fam, 3)


# Örnek 4.10: BIM ve FAM dosyası okuma 2
 setwd("D:/gwasbook/data/disease")
 bim <- read.table("disease.bim", header=FALSE, as.is=TRUE, nrows=4)
 head(bim, 3)

 fam <- read.table("disease.fam", header=FALSE, as.is=TRUE, nrows=5)
 head(fam, 3)


# Örnek 4.11: MultiPhen paketiyle BED dosyası okuma
 suppressPackageStartupMessages(installed <- require(MultiPhen))
 if (!installed){
    install.packages("MultiPhen", repo="https://cloud.r-project.org",
    dependecies = TRUE)
    suppressPackageStartupMessages(require(MultiPhen))  
 }

 setwd("D:/gwasbook/data/disease")
 disease_geno <- read.plink(root="disease",
   opts=mPhen.options("geno.input"))

 disease_geno[1:3, 1:5]


# Örnek 4.12: snpStats paketiyle BED dosyası okuma
 suppressPackageStartupMessages(installed <- require(snpStats))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("snpStats")
   suppressPackageStartupMessages(require(snpStats))  
 }

 setwd("D:/gwasbook/data/disease")
 famfile <- "disease.fam"
 bimfile <- "disease.bim"
 bedfile <- "disease.bed"
 disease <- read.plink(bedfile, bimfile, famfile)
 str(disease)
 disease_geno <- as.data.frame(disease$genotypes)
 disease_geno[1:5,1:5]
 disease_fam <- as.data.frame(disease$fam)
 disease_fam[1:5,]
 disease_map <- as.data.frame(disease$map)
 disease_map[1:5,]


# Örnek 4.13: bigsnpr paketiyle BED dosyası okuma
 suppressPackageStartupMessages(installed <- require(bigsnpr))
 if (!installed) {
   install.packages("bigsnpr", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(bigsnpr))
 }

# Çalışma klasörü ve dosyaların
 setwd("D:/gwasbook/data/disease")
 bedfile <- "disease.bed"
 backfile <- "disease_back"

# BED dosyasının okunması ve geçici klasöre kaydedilmesi
 rds <- snp_readBed(bedfile, backingfile=backfile)
# Arka dosyanın çalışma alanına yüklenmesi
 disease <- snp_attach(rds)

# Arka dosyanın yapısı
 str(disease)


# Örnek 4.14: Genotipik verinin okunması ve listelenmesi
# Bağımlılık – Örnek 4.13
 disease_geno <- as.data.frame(disease$genotypes)
 disease_geno[1:5,1:5]
 disease_fam <- as.data.frame(disease$fam)
 disease_fam[1:5,]
 disease_map <- as.data.frame(disease$map)
 disease_map[1:5,]


# Örnek 4.15: BED'den GDS'ye dönüştürme
#
 suppressPackageStartupMessages(installed <- require(SNPRelate))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE)){
     install.packages("BiocManager", repos="https://cloud.r-project.org")
     BiocManager::install("SNPRelate")
   }
   suppressPackageStartupMessages(require(SNPRelate))  
 }
 setwd("D:/gwasbook/SnpRelate")
 bedfile <- "plinkhapmap.bed.gz"
 famfile <- "plinkhapmap.fam.gz"
 bimfile <- "plinkhapmap.bim.gz"
 gdsfile <- "plinkhapmap.gds"

 snpgdsBED2GDS(bed.fn=bedfile, fam.fn=famfile, bim.fn=bimfile,
   out.gdsfn=gdsfile, family = FALSE, 
   snpfirstdim = NA, compress.annotation = "LZMA_RA", 
   compress.geno = "", option = NULL, 
   cvt.chr = c("int", "char"), cvt.snpid = c("auto", "int"), 
   verbose = TRUE)


# Örnek 4.16: rMVP paketiyle BED'den MVP'ye dönüştürme
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }

 setwd("D:/gwasbook/data/disease")
# BED dosyasını MVP'ye dönüştürme
 MVP.Data(
    fileBed="disease",
    filePheno=TRUE,
    out="rmvp/disease_mvp",
    verbose = TRUE)



# Örnek 4.17: rMVP paketiyle BED'ten MVP'ye dönüştürme 2
#
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }

 setwd("D:/gwasbook/data/disease")
 MVP.Data.Bfile2MVP(
    bfile="disease", 
    priority='speed', maxLine=10000, 
    out="rmvp/disease2_mvp", verbose=FALSE)


# Örnek 4.18: MVP dosyalarını okuma
# Bağımlılık: Örnek 4.17
 setwd("D:/gwasbook/data/disease/rmvp")
 disease_geno <- attach.big.matrix("disease_mvp.geno.desc")
 disease_map <- read.table("disease_mvp.geno.map", head=TRUE)
 disease_geno[1:3,1:10]
 disease_map[1:3, ]


# Örnek 4.19: rMVP paketiyle MVP'den BED'e dönüştürme
# Bağımlılık: Örnek 4.18
#
 setwd("D:/gwasbook/data/disease")
 MVP.Data.MVP2Bfile(
    bigmat= disease_geno,
    map = disease_map,
    pheno = NULL, #Fenotip yoksa NULL atanır
    out = "goat_mvp2",
    verbose = TRUE)


# Örnek 4.20: rMVP paketiyle sayısal genotip dosyasını MVP'ye dönüştürme
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }
 setwd("D:/gwasbook/data/disease")
 MVP.Data.Numeric2MVP(
   num_file="disease_numeric.txt", 
   type.geno = "char", auto_transpose = TRUE, 
   priority = "speed", maxLine = 1e4,
   row_names = FALSE, col_names = FALSE,
   out = "disease3_mvp", 
   verbose = TRUE)


# Örnek 4.21: HapMap dosyası okuma
#
 setwd("D:/gwasbook/data/maize")
 maize_hmp <- read.table("maize_hapmap.txt", sep="\t", skip=1)
 maize_hmp[1:3, 1:5]

 maize_hmp <- read.csv("maize_hapmap.txt", sep="\t", head=TRUE)
 maize_hmp[1:3, 1:5]


# Örnek 4.22: HapMap veri dosyasını okuma
# NAM paketini kurma ve yükleme 
 suppressPackageStartupMessages(installed <- require(NAM))
 if (!installed) {
   install.packages("NAM", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(NAM))
 }
# Hapmap dosyasını okuma
 setwd("D:/gwasbook/data/maize")
 maize_hmp <- Import_data("maize_hapmap.txt", type = "HapMap")
 maize_geno <- maize_hmp$gen
 maize_geno[1:3, 1:5]
 Chr <- maize_hmp$chr
 Chr


# Örnek 4.23: HapMap'i MVP'ye dönüştürme ve okuma
# rMVP paketini kurma ve yükleme 
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }

# Hapmap dosyasını okuma ve dönüştürme
 setwd("D:/gwasbook/data/maize")
 MVP.Data(
   fileHMP="maize_hapmap.txt",
   out="maize_mvp",
   verbose=FALSE
 )

# MVP genotip dosyasını okuma
 maize_geno <- attach.big.matrix("maize_mvp.geno.desc")
 maize_map <- read.table("maize_mvp.geno.map", head=TRUE)

 maize_geno[1:5, 1:10]
 maize_map[1:5,]


# Örnek 4.24: HapMap'i sayısal genotipe dönüştürme
#
 suppressPackageStartupMessages(installed <- require(GAPIT3))
 if (!installed) {
   if (!requireNamespace("devtools", quietly=TRUE))
     install.packages("devtools", repos="https://cloud.r-project.org")
   devtools::install_github("jiabowang/GAPIT3", force=TRUE)
   suppressPackageStartupMessages(require(GAPIT3))  
 }

 setwd("D:/gwasbook/data/maize")
 maize_hmp <- read.csv("misir_hapmap.txt",head=TRUE,sep="\t")

 misir_numeric <- GAPIT(
   G = maize_hmp, 
   output.numerical = TRUE)



# Örnek 4.25: Sayısal senotip matrisinini inceleme ve diske kaydetme
# Bağımlılık – Örnek 4.24
#
 maize_geno <- maize_numeric$GD
 maize_geno[1:5, 1:5]

 maize_map <- maize_numeric$GM
 maize_map[1:5,]
# Sayısal Genotip dosyası ve map dosyasına kayıt 
 write.table(maize_geno, "maize_numeric.txt",
   col.names=TRUE, row.names=TRUE, quote=FALSE, sep="\t")
 write.table(maize_map, "maize_numeric.map",
   col.names=TRUE, row.names=TRUE, quote=FALSE, sep="\t")


# Örnek 4.26: Rsamtools paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(Rsamtools))
 if(!installed){
   if(!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager")
   BiocManager::install("Rsamtools")
   suppressPackageStartupMessages(require(Rsamtools))
 }


# Örnek 4.27: BAM dosyasının okunması
# Bağımlılık – Örnek 4.26
#
 bamPath <- system.file("extdata", "ex1.bam", package="Rsamtools")
 bamFile <- BamFile(bamPath)
 bamFile
class: BamFile 
path: D:/R/R-4.1.2/library/Rsamtools/extdata/ex1.bam
index: D:/R/R-4.1.2/library/Rsamtools/extdata/ex1.bam.bai
isOpen: FALSE 
yieldSize: NA 
obeyQname: FALSE 
asMates: FALSE 
qnamePrefixEnd: NA 
qnameSuffixStart: NA


# Örnek 4.28: BAM indeksleri
# Bağımlılık – Örnek 4.27
#
 indexBam(bamFile)
      D:/R/R-4.1.2/library/Rsamtools/extdata/ex1.bam 


# Örnek 4.29: Dizilim bilgileri
# Bağımlılık – Örnek 4.27
#
 seqinfo(bamFile)
 seqlengths(bamFile)


# Örnek 4.30: Hizalama bilgileri
# Bağımlılık – Örnek 4.27
#
 quickBamFlagSummary(bamFile)


# Örnek 4.31: Genomik aralık bilgilerinin öğrenilmesi ve özetlenmesi
# Bağımlılık – Örnek 4.27
#
 genomrange <- GRanges("seq1", IRanges(1, seqlengths(bamFile) ["seq1"]))
 countBam(bamFile, param=ScanBamParam(which = genomrange))


# Örnek 4.32: BAM dosyasını okuma
# Bağımlılık – Örnek 4.27
#
 bamPath <- system.file("extdata", "ex1.bam", package="Rsamtools")
 readseqs <- scanBam(BamFile(bamPath, yieldSize=3))
 readseqs


# Örnek 4.33: Okuma sonuçlarına erişim
# Bağımlılık – Örnek 4.32
#
  names(readseqs[[1]])
 readseqs[[1]]$qname
 readseqs[[1]]$pos
 readseqs[[1]]$seq


# Örnek 4.34: Aralık okuma
# Bağımlılık – Örnek 4.27
#
 bamPath <- system.file("extdata", "ex1.bam", package="Rsamtools")
 bamFile <- BamFile(bamPath)
 genomrange <- GRanges("seq2", IRanges(1, seqlengths(bamFile) ["seq2"]))
 readseq2 <- scanBam(bamFile, 
   param=ScanBamParam(what=c("qname","pos","seq"), which= genomrange))


# Örnek 4.35: Dizi verisinde analizler
# Bağımlılık – Örnek 4.34
#
 hist(readseq2[[1]]$pos, col="gray", 
   xlab="POS", ylab="Frekans", main="Seq2 Pos Histogramı")
# GC içeriği
 mean(letterFrequency(readseq2[[1]]$seq, "GC", as.prob=TRUE))


# Örnek 4.36: BAM okumasını veri çerçevesine dönüştürme
# Bağımlılık – Kod 4.1, Örnek 4.27
#
 bamPath <- system.file("extdata", "ex1.bam", package="Rsamtools")
 bamfile <- BamFile(bamPath)
 bamread <- scanBam(bamfile)
 bamcols <- names(bamread[[1]])
 bamlist <- lapply(bamcols, function(x) unlist(lapply(bamread, "[[", x)))
 bamdf <- do.call("DataFrame", bamlist)
 names(bamdf) <- bamcols
 table(bamdf$flag) # Flag frekansları tablosu


# Örnek 4.37: Tabix dosyası okuma
# Bağımlılık – Örnek 4.27
#
 tabFile <- system.file("extdata", "example.gtf.gz", 
   package="Rsamtools", mustWork=TRUE)
 tbx <- TabixFile(tabFile)
 param <- GRanges(c("chr1", "chr2"), IRanges(c(1, 1), width=100000))
 countTabix(tbx)

 countTabix(tbx, param=param)
 res <- scanTabix(tbx, param=param)
 sapply(res, length)
 res[["chr1:1-100000"]][1:2]

	
# Örnek 4.38: GenomicAlignments paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(GenomicAlignments))
 if(!installed){
   if(!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager")
   BiocManager::install("GenomicAlignments")
   suppressPackageStartupMessages(require(GenomicAlignments))
 }


# Örnek 4.39: BAM dosyası okuma
# Bağımlılık – Örnek 4.27, 4.38
#
 bamPath <- system.file("extdata", "ex1.bam", package="Rsamtools")
 readseqs <- readGAlignments(bamPath)
 readseqs
 length(readseqs)


# Örnek 4.40: Çakışmaların (overlaps) saptanması
# Bağımlılık – Örnek 4.39
#
 genomrange <- granges(readseqs[1])
 genomrange
 genomrange <- GRanges("seq2", IRanges(1, 500))

 overlaps <- findOverlaps(readseqs, genomrange) 
 overlaps
 countOverlaps(genomrange, readseqs) # Çakışma sayısı
 table(readseqs %over% genomrange) # Çakışma frekans tablosu


# Örnek 4.41: vcfR paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(vcfR))
 if (!installed){
   install.packages("vcfR", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(vcfR))
 }


# Örnek 4.42. vcfR ile VCF dosyası okuma
# Bağımlılık – Örnek 4.41
#
 setwd("D:/gwasbook/data/sativa")
 system("plink --file sativa --recode vcf --out sativa1_vcf")

 vcffile <- "sativa.vcf"
 sativa <- read.vcfR(vcffile, nrows=-1, verbose = FALSE)
 show(sativa)


# Örnek 4.43. Genotipik verinin çıkarılması
# Bağımlılık – Örnek 4.42
#
 str(sativa)

 geno <- sativa@gt
 geno[1:3, 1:5]
 geno <- extract.gt(sativa, element = "GT")
 geno[1:3, 1:5]

# Vcf formatından 0,1,2 kodlu sayısal genotip matrisi oluşturma
 genmat <- extract.gt(sativa) # Genotip matrisi
 pos <- getPOS(sativa) # Bp olarak SNP konumları
 chrom <- getCHROM(sativa) # Kromozomlar

# Genotip matrisini 0,1,2 formatına çevirme
 geno <- matrix(NA, nrow = nrow(genmat), ncol = ncol(genmat))
 geno [genmat %in% c("0/0", "0|0")] <- 0
 geno [genmat  %in% c("0/1", "1/0", "1|0", "0|1")] <- 1
 geno [genmat %in% c("1/1", "1|1")] <- 2
 geno[1:3, 1:5]
# Genotip sayıları
 table(as.vector(geno))


# Örnek 4.44. vcfR nesnesini vcf.gz dosyasına kaydetme
# Bağımlılık – Örnek 4.42
#
 write.vcf(sativa, "sativa1.vcf.gz")


# Örnek 4.45. ped'ten vcf ve vcf.gz oluşturma
 setwd("D:/gwasbook/data/sativa")
 system("plink --file sativa --recode vcf --out sativa")
 system("plink --file sativa --recode vcf bgz --out sativa")


# Örnek 4.46. vcf'den bed'e dönüştürme
 setwd("D:/gwasbook/data/sativa")
 system("plink --vcf sativa.vcf --out sativa2")
 #system("plink --vcf sativa.vcf.gz --make-bed --out sativa2")


# Örnek 4.47. vcf'den pgen'e dönüştürme
 setwd("D:/gwasbook/data/sativa")
 system("plink2 --vcf sativa --make-pgen --out sativa3")


# Örnek 4.48: SNPRelate ile vcf'den gds'ye dönüştürme
 suppressPackageStartupMessages(installed <- require(SNPRelate))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("SNPRelate")
   suppressPackageStartupMessages(require(SNPRelate))  
 }
 setwd("D:/gwasbook/data/sativa")
 vcffile <- "sativa.vcf"
 gdsfile <- "sativa.gds"
 snpgdsVCF2GDS(vcf.fn=vcffile, out.fn=gdsfile, verbose=FALSE)


# Örnek 4.49: SeqArray ile vcf'den gds'ye dönüştürme
 suppressPackageStartupMessages(installed <- require(SeqArray))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("SeqArray")
   suppressPackageStartupMessages(require(SeqArray))  
 }
 setwd("D:/gwasbook/data/sativa")
 vcffile <- "sativa.vcf"
 gdsfile <- "sativa2.gds"
 seqVCF2GDS(vcffile, gdsfile)



# Örnek 4.50: rMVP paketiyle vcf formatından mvp formatına dönüştürme
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }
# VCF dosyasını MVP'ye dönüştürme
 setwd("D:/gwasbook/data/sativa")
 MVP.Data.VCF2MVP("sativa.vcf", out="sativa_mvp") 

# MVP okuma ve görüntüleme
 geno <- attach.big.matrix("sativa_mvp.geno.desc")

 dim(geno)
 geno[1:3, 1:5]


# Örnek 4.51: gdsfmt paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(gdsfmt))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("gdsfmt")
   suppressPackageStartupMessages(require(gdfmt))  
 }


# Örnek 4.52: gds dosyasının okunması ve incelenmesi
# Bağımlılık – Örnek 4.51
#
 setwd("D:/gwasbook/data/sativa")
 sativa <- openfn.gds("sativa.gds")

 names(sativa)
 sativa$filename
 sativa$root

File: D:\gwasbook\data\sativa\sativa.gds (3.8M)
    [  ] *
|-- sample.id   { Str8 413 LZMA_ra(20.2%), 1.4K }
|-- snp.id   { Int32 36901 LZMA_ra(7.41%), 10.7K }
|-- snp.rs.id   { Str8 36901 LZMA_ra(9.79%), 35.9K }
|-- snp.position   { Int32 36901 LZMA_ra(55.8%), 80.5K }
|-- snp.chromosome   { Str8 36901 LZMA_ra(0.26%), 213B }
|-- snp.allele   { Str8 36901 LZMA_ra(12.2%), 17.6K }
|-- genotype   { Bit2 413x36901, 3.6M } *
\-- snp.annot   [  ]
   |-- qual   { Float32 36901 LZMA_ra(0.12%), 181B }
   \-- filter   { Str8 36901 LZMA_ra(0.40%), 153B }


# Örnek 4.53: gds dosyası elemanlarına erişim 
# Bağımlılık – Örnek 4.51
#
 idxsamp <- index.gdsn(node=sativa, path="sample.id", silent=FALSE)
 sampids <- read.gdsn(node=idxsamp)
 head(sampids, 3)

 idxsnp <- index.gdsn(sativa, "snp.rs.id")
 snpids <- read.gdsn(idxsnp)
 head(snpids, 3)

 idxgeno <- index.gdsn(sativa, "genotype")
 geno <- read.gdsn(idxgeno)
 geno[1:3, 1:5]

# Analize hazır veri çerçevesi oluşturma
 rownames(geno) <- sampids
 colnames(geno) <- snpids
 geno[1:3, 1:5]
# gds bağlantısını kapat
 closefn.gds(sativa)


# Örnek 4.54: GWASTools paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(GWASTools))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("GWASTools")
   suppressPackageStartupMessages(require(GWASTools))  
 }


# Örnek 4.55: GWASTools ile gds dosyasının açılması ve yapısı
# Bağımlılık – Örnek 4.54
 setwd("D:/gwasbook/data/sativa")
 sativa <- GdsGenotypeReader("sativa.gds")

 names(attributes(sativa))

 sativa@filename
 sativa@handler
File: D:\gwasbook\data\sativa\sativa.gds (3.8M)
    [  ] *
|-- sample.id   { Str8 413 LZMA_ra(20.2%), 1.4K }
|-- snp.id   { Int32 36901 LZMA_ra(7.41%), 10.7K }
|-- snp.rs.id   { Str8 36901 LZMA_ra(9.79%), 35.9K }
|-- snp.position   { Int32 36901 LZMA_ra(55.8%), 80.5K }
|-- snp.chromosome   { Str8 36901 LZMA_ra(0.26%), 213B }
|-- snp.allele   { Str8 36901 LZMA_ra(12.2%), 17.6K }
|-- genotype   { Bit2 413x36901, 3.6M } *
\-- snp.annot   [  ]
   |-- qual   { Float32 36901 LZMA_ra(0.12%), 181B }
   \-- filter   { Str8 36901 LZMA_ra(0.40%), 153B }


# Örnek 4.56: gds dosyasının okunması ve incelenmesi
# Bağımlılık – Örnek 4.55
#
# SNP sayısı
 nsnp(sativa)
# Örneklem sayısı
 nscan(sativa)
# SNP kimlikleri
 snpids <- getVariable(sativa,"snp.rs.id")
 head(snpids, 3)

# Örneklem kimlikleri
 sampids <- getVariable(sativa,"sample.id")
 head(sampids, 3)

# Genotip matrisi
 geno <- getGenotype(sativa)
 dim(geno)
# Analize hazır veri çerçevesi oluşturma
 rownames(geno) <- snpids
 colnames(geno) <- sampids
 geno[1:3, 1:3]


# Örnek 4.57: Diğer erişim fonksiyonları/metotları
# Bağımlılık – Örnek 4.55
#
# Kromozom 11'deki konumlar
 chr11pos <- getPosition(sativa, index=(chrom == 11))
 head(chr11pos)

 geno1020 <- getGenotype(sativa, snp=c(50, 5), scan=c(10, 20))
 geno[1:5, 1:3]

 snpidx <- c(3, 5:8, 15:25)
 sampidx <- c(10, 14, 20:23)
 genosel <- getGenotypeSelection(sativa, snp=snpidx, scan=sampidx)
 genosel[1:5, 1:3]
 close(sativa)


# Örnek 4.58: SNPRelate ile gds dosyası okuma
 suppressPackageStartupMessages(installed <- require(SNPRelate))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("SNPRelate")
   suppressPackageStartupMessages(require(SNPRelate))  
 }
 setwd("D:/gwasbook/data/sativa")
 sativa <- snpgdsOpen("sativa.gds")
 sativa
File: D:\gwasbook\data\sativa\sativa.gds (3.8M)
    [  ] *
|-- sample.id   { Str8 413 LZMA_ra(20.2%), 1.4K }
|-- snp.id   { Int32 36901 LZMA_ra(7.41%), 10.7K }
|-- snp.rs.id   { Str8 36901 LZMA_ra(9.79%), 35.9K }
|-- snp.position   { Int32 36901 LZMA_ra(55.8%), 80.5K }
|-- snp.chromosome   { Str8 36901 LZMA_ra(0.26%), 213B }
|-- snp.allele   { Str8 36901 LZMA_ra(12.2%), 17.6K }
|-- genotype   { Bit2 413x36901, 3.6M } *
\-- snp.annot   [  ]
   |-- qual   { Float32 36901 LZMA_ra(0.12%), 181B }
   \-- filter   { Str8 36901 LZMA_ra(0.40%), 153B }

 attributes(sativa)
$names

$class

 snps <- read.gdsn(index.gdsn(sativa, "snp.id"))
 geno <- snpgdsGetGeno(sativa, snp.id=snps, snpfirstdim=TRUE)
 geno[1:3, 1:5]
 table(c(geno))
  table(c(geno), exclude=NA)
 hwe <- snpgdsHWE(sativa, sample.id=NULL, snp.id=NULL, with.id=FALSE)
 head(hwe,3)

 rv <- snpgdsGRM(sativa, method="GCTA")
 str(rv)
 K <- rv$grm
 K[1:3, 1:5]
 str(eig)
 head(eig$values)
 snpgdsClose(genofile)


# Örnek 4.59: SeqArray ile gds dosyası okuma
# SeqArray paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(SeqArray))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("SeqArray")
   suppressPackageStartupMessages(require(SeqArray))  
 }


# Örnek 4.60: SeqArray ile gds dosyası okuma
# Bağımlılık – Örnek 4.59
#
 setwd("D:/gwasbook/data/sativa")
 gdsfile <- "sativa.gds"
 sativa <- seqOpen(gdsfile)
# biallelik GDS'yi dönüştür
 seqSNP2GDS(gdsfile, "temp.gds")
 sativa <- seqOpen("temp.gds")
# SNP allel frekansları
 alfreqs <- seqAlleleFreq(sativa, verbose=TRUE)
 head(alfreqs, 3)
 # Açık bağlantıyı kapat
 seqClose(sativa)
# Geçici dosyayı sil
 file.remove("temp.gds")


# Örnek 4.61: SeqArray ile gds dosyası okuma
# Bağımlılık – Örnek 4.59
#
 setwd("D:/gwasbook/data/sativa")
 gdsfile <- "sativa2.gds"
 sativa <- seqOpen(gdsfile)

 alfreqs <- seqAlleleFreq(sativa, verbose=TRUE)
 head(alfreqs, 3)
 seqClose(sativa)


# Örnek 4.62: GDS formatından VCF formatına dönüştürme
 suppressPackageStartupMessages(installed <- require(SeqArray))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("SeqArray")
   suppressPackageStartupMessages(require(SeqArray))  
 }

 setwd("D:/gwasbook/data/sativa")
 gdsfile <- "sativa2.gds"
 sativa <- seqOpen(gdsfile)

 seqResetFilter(sativa)
# of selected samples: 413
# of selected variants: 36,901

 seqGDS2VCF(sativa, "sativa2.vcf.gz")

 seqClose(sativa)


# Örnek 4.63: GDS formatından NetCDF formatına dönüştürme
 suppressPackageStartupMessages(installed <- require(GWASTools))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("GWASTools")
   suppressPackageStartupMessages(require(GWASTools))  
 }

 setwd("D:/gwasbook/data/sativa")
 gdsfile <- "sativa.gds"
 ncfile <- "sativa.nc"
 convertGdsNcdf(gdsfile, ncfile)


# Örnek 4.64: GWASTools paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(GWASTools))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASTools")
  suppressPackageStartupMessages(require(GWASTools))  
 }


# Örnek 4.65: GWASdata paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(GWASdata))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASdata")
  suppressPackageStartupMessages(require(GWASdata))  
 }


# Örnek 4.66: GWASdata paketinden illumina_geno.nc adlı dosyanın okunması
# Bağımlılık – Örnek 4.65
#
 ncfile <- system.file("extdata", "illumina_geno.nc", package="GWASdata")
 nc <- NcdfGenotypeReader(ncfile)
 nc

# Örnek 4.67: nc nesnesindeki verilere erişme
# Bağımlılık – Örnek 4.66
#
 names(attributes(nc))
 
# SNP ve örneklem sayıları
 nsnp(nc)
 nscan(nc)
# SNP kimlikleri ve kromozomlar
 snpids <- getSnpID(nc)
 head(snpids)
 chromosomes <- getChromosome(nc)
 head(chromosomes)


# Örnek 4.68: Genotipik veriyi okuma
# Bağımlılık – Örnek 4.66
#
# Tüm SNP genotiplerini oku
 geno <- getGenotype(nc)
 geno[1:5, 1:10]
# 5.-15. örneklem için 200. snp'den itibaren 50 snp oku
 geno <- getGenotype(nc, snp=c(200, 50), scan=c(5, 15))
# 1. örneklem için 1. snp'den itibaren tüm snp'leri (-1) oku
 geno <- getGenotype(nc, snp=c(1,-1), scan=c(1, 1))

# Açıklama bilgilerini ekleyerek tüm SNP'leri oku
 data(illuminaSnpADF)
 data(illuminaScanADF)
 geno <- GenotypeData(nc, 
   snpAnnot=illuminaSnpADF, scanAnnot=illuminaScanADF)

 names(attributes(geno))
 genodata <- getGenotype(geno@data)
 genodata[1:4, 1:10]
# nc bağlantısını kapat
 close(nc)


# Örnek 4.69: ncdf4 paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(ncdf4))
 if (!installed) {
    install.packages("ncdf4", repos="https://cloud.r-project.org")
    suppressPackageStartupMessages(require(ncdf4))  
 }


# Örnek 4.70: NetCDF dosyasını okuma
# Bağımlılık – Örnek 4.69 
#
 ncfile <- system.file("extdata", "illumina_geno.nc", package="GWASdata")
 nc <- nc_open(ncfile)
 nc


# Örnek 4.71: nc nesnesindeki verileri okuma
# Bağımlılık – Örnek 4.70
#
 sampids <- ncvar_get(nc, "sampleID")
 head(sampids)
 snps <- ncvar_get(nc, "snp")
 head(snps)
# Tüm genotipleri oku
 geno <- ncvar_get(nc, "genotype")
 geno[1:5, 1:10]
 nc_close(nc)


# Örnek 4.72: NetCDF formatından PED formatına dönüştürme
# 
 suppressPackageStartupMessages(installed <- require(GWASTools))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASTools")
  suppressPackageStartupMessages(require(GWASTools))  
 }
 suppressPackageStartupMessages(installed <- require(GWASdata))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASdata")
  suppressPackageStartupMessages(require(GWASdata))  
 }

 ncfile <- system.file("extdata", "illumina_geno.nc", package="GWASdata")
 data(illuminaSnpADF, illuminaScanADF)
 genoData <- GenotypeData(NcdfGenotypeReader(ncfile),
   scanAnnot=illuminaScanADF, snpAnnot=illuminaSnpADF)

 setwd("D:/gwasbook/data/plink")
 pedfile <- "illumina_geno"
 plinkWrite(genoData, pedfile)
 logfile <- "illumina_geno.log"
 plinkCheck(genoData, pedfile, logfile)
 readLines(logfile)
# Bazı denekleri çıkar
 pedfile2 <- "illumina_geno_reduced"
 logfile2 <- "illumina_geno_reduced.log"
 plinkWrite(genoData, pedfile2, 
  scan.exclude=c(280, 309, 314), 
  blockSize=10)
 plinkCheck(genoData, pedfile2, logfile2)
 readLines(logfile2)
 close(genoData)
 unlink(c(logfile2, paste(pedfile2, "*", sep=".")))


# Örnek 4.73: NetCDF formatından GDS formatına dönüştürme
# Bağımlılık – Örnek 4.72
 suppressPackageStartupMessages(installed <- require(GWASTools))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASTools")
  suppressPackageStartupMessages(require(GWASTools))  
 }

 ncfile <- system.file("extdata", "illumina_geno.nc", package="GWASdata")
 setwd("D:/gwasbook/data/plink")
 gdsfile <- "illumina_geno.gds"

 convertNcdfGds(ncfile, gdsfile)


# Örnek 4.75: coPLINK'in R'de çalıştırılması
 setwd("D:/PLINK")
 system("coplink --ped2bed toy --out toy")


# Örnek 4.76: coPLINK ile aşamalı dönüştürme
 setwd("PLINK")
 system("coplink --bed2ped toy --out toy")
 system("coplink --ped2mdr toy --out toy")


# Örnek 4.77: PGDSpider2-cli Programını komut istemcisinde çalıştırma
D:/PGDSPIDER PGDSpider2-cli -inputfile D:/gwasbook/PLINK/example1.ped 
-inputformat PED  -outputfile D:/PGDSPIDER/example1.pgd 
-outputformat PGD -spid D:/PGDSPIDER/ped2pgd.spid


# Örnek 4.78: PGDSpider2-cli Programını R'den çalıştırma
 setwd("D:/PGDSPIDER")
 pgdcmd <- "PGDSpider2-cli  
  -inputfile D:/gwasbook/PLINK/example1.ped -inputformat PED 
  -outputfile D:/PGDSPIDER/example1.pgd -outputformat PGD 
  -spid D:/PGDSPIDER/ped2pgd.spid"
 system(pgdcmd)


# Örnek 4.79: radiator paketinin kurulumu ve veri dönüştürme
 suppressPackageStartupMessages(installed <- require(radiator))
 if (!installed){
   if(!require(remotes))
      install.packages("remotes", repos="https://cloud.r-project.org")
   remotes::install_github("thierrygosselin/radiator")
   suppressPackageStartupMessages(require(radiator))
 }
# gtypes formatlarına dönüştürme varsa strataG de yüklenmeli
 suppressPackageStartupMessages(installed <- require(strataG))
 if (!installed){
    install.packages("strataG", repos="https://cloud.r-project.org")
   suppressPackageStartupMessages(require(radiator))
 }

 setwd("D:/gwasbook/data/plink")
# BED oku ve dönüştür
 radiator::detect_genomic_format(data = "example1.bed")
 convFiles <- radiator::genomic_converter(
  data = " example1.bed",
  strata = "example_strata.tsv",
  output = c("gds", "vcf", "genlight", "gtypes"),
  filename = NULL,
  parallel.core = parallel::detectCores()-1,
  verbose = TRUE
 ) 

 names(convFiles)
# Genlight nesnesi oluştur
 genlight <- convFiles$genlight
# VCF nesnesi oluştur
 vcf <- convFiles$vcf


# Örnek 4.81: tar dosyası okuma, içeriğini çıkarma ve görüntüleme
 setwd("D:/gwasbook/disease")
 fn <- "http://popgen.dk/ida/popgenKU2019/gwasdata2019.tar.gz"
 download.file(fn, destfile="tmp.tar.gz")

# Tar dosyası içeriğini listele
 untar("tmp.tar.gz", list=TRUE)  
# Tar dosyasını aç ve içeriğini çıkar
 untar("tmp.tar.gz")

# Sadece bir veya birkaç dosyayı çıkar
 untar("tmp.tar.gz", files="data/gwa.fam", exdir="./data")

# Dosyayı oku ve içeriğini göster
 famfile <- read.table("data/gwa.fam")
 head(famfile, 3)
# Özel bir klasöre çıkar
 untar("tmp.tar.gz", files="data/gwa.fam", exdir="./gwas")


Örnek 4.82: zip dosyası okuma, içeriğini çıkarma ve görüntüleme
 setwd("D:/gwasbook/stmgp")
 zipfile <-"snps.raw.zip"
 unzip(zipfile, list=TRUE) 
 geno <- read.table(paste0(getwd(), "/snps.raw"), header=TRUE)
 geno[1:5, 1:8]
# Zipli dosyayı açmadan okumak için
 geno <- read.table(unz(zipfile,"snps.raw"), header=T, quote="\"")
 X <- geno[,-(1:6)]
 X[1:5,1:5]
 X <- (X==1)  2*(X==2)
 X[1:5,1:5]


# Örnek 4.82: Veri okuma fonksiyonlarının karşılaştırılması
 suppressPackageStartupMessages(installed <- require(data.table))
 if (!installed){
   install.packages("data.table", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(data.table))
 }

 suppressPackageStartupMessages(installed <- require(readr))
 if (!installed){
   install.packages("readr", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(readr))
 }

 setwd("D:/gwasbook/data/sativa")
 filename <- "sativa.ped"

 rts <- system.time(
   sativa1 <- read.table(filename, header=TRUE, sep=" ")
 )
 cvss <- system.time(
   sativa2 <- read.csv(filename, header=TRUE, sep=" ")
 )
 cvs2s <- system.time(
   sativa3 <- read.csv2(filename, header=FALSE, sep=" ")
 )
 rds <- system.time(
   sativa4 <- readr::read_delim(filename, " ", col_names=FALSE)
 )
 frs <- system.time(
   sativa5 <- data.table::fread(filename, header=FALSE, sep=" ", 
     showProgress=FALSE))

 ctime <- data.frame(
   fonksiyon = c('read.table', 'read.csv', 'read.csv2', 
   'read_delim', 'fread'), 
   zaman = c(rts[3], cvss[3], cvs2s[3], rds[3], frs[3]))

 ctime


# Örnek 4.83: Veri çerçevelerinin bellek tüketimleri
# Bağımlılık – Örnek 4.82
#
 object.size(sativa1)
 object.size(sativa2)
 object.size(sativa3)
 object.size(sativa4)
 object.size(sativa5)


# Örnek 4.84: fread ile satır seçerek okuma
 suppressPackageStartupMessages(installed <- require(data.table))
 if (!installed){
   install.packages("data.table", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(data.table))
 }

 fileName <- "D:/gwasbook/data/sativa/sativa.ped"
 sativaDf1 <- fread(fileName, header=FALSE, sep=" ",
   skip=100, nrows=50, 
   showProgress = FALSE)
 sativaDf1[1:5, 1:10]


# Örnek 4.85: fread ile sütun seçerek okuma
 suppressPackageStartupMessages(installed <- require(data.table))
 if (!installed){
   install.packages("data.table", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(data.table))
 }

 fileName <- "D:/gwasbook/data/sativa/sativa.ped"
 sativaDf2 <- fread(filename, header=FALSE, sep=" ",
   select=c(1, 6:40), 
   showProgress = TRUE)

 sativaDf2[1:5, 1:10]


# Örnek 4.86: sqldf ile okuma ve filtreleme
 suppressPackageStartupMessages(installed <- require(sqldf))
 if (!installed){
   install.packages("sqldf", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(sqldf))
 }

 filename <- "D:/gwasbook/data/sativa/sativa_long.csv"
 sativa <- read.csv.sql(filename, 
   sql = "SELECT IID, SNP, A1, A2 FROM file WHERE SNP='id1000001'")
 head(sativa)


# Örnek 4.87: Veritabanı ve tablo oluşturma
sqlite3
.cd 'D:\gwasbook\data\SQLiteDBs'
.open sativa.db

CREATE TABLE snpgeno (
 FID text,
 IID int,
 SNP text,
 A1 text,
 A2 text
);

.mode csv
.import 'D:/gwasbook/data/sativa/sativa_long.csv' snpgeno
CREATE INDEX indidx ON snpgeno(IID);
.schema
.quit


# Örnek 4.88: Veritabanına yeni tablo ekleme
sqlite3
.cd 'D:/gwasbook/data/SQLiteDBs'
.open sativa.db

create table snpmap (
CHR text,
SNP text,
GD int,
POS int
);

.mode csv
.import 'D:/gwasbook/data/sativa/sativa_long.map' snpmap
create index chridx on snpmap(CHR);

.exit


# Örnek 4.89: Veritabanı yapısının incelenmesi

sqlite3 D:/gwasbook/data/SQLiteDBs/sativa.db
.tables
.indexes
.schema snpgeno
.exit


# Örnek 4.90: Tablodan kayıt sorgulama
sqlite3 D:/gwasbook/data/SQLiteDBs/sativa.db
.header on
SELECT IID, A1, A2 FROM snpgeno ORDER BY IID LIMIT 5;


# Örnek 4.91: Tablodan sorgulanan kayıtları dosyaya yazma
sqlite3 D:/gwasbook/data/SQLiteDBs/sativa.db
.output D:/gwasbook/data/SQLiteDBs/top5.csv
.mode csv
.header on
select IID, A1, A2 from snpgeno order by IID limit 5;

# Örnek 4.92: RSQLite paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(RSQLite))
 if (!installed){
   install.packages("RSQLite", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RSQLite))
 }


# Örnek 4.93: SQLite veritabanına bağlantı ve tablolara veri ekleme
# Bağımlılık – Örnek 4.91
#
 setwd("D:/gwasbook/data/SQLiteDBs")
 con <- dbConnect(dbDriver("SQLite"), dbname="sativa2.db")

 dbWriteTable(con, "snpgeno", 
   "D:/gwasbook/data/sativa/sativa_long.csv", header=T, append=T, sep=",")

 dbWriteTable(con, "snpmap", 
   "D:/gwasbook/data/sativa/sativa_long.map", header=T, append=T, sep=",")

 dbDisconnect(con)


# Örnek 4.94: SQLite veritabanı ve tablo yapılarını inceleme
# Bağımlılık – Örnek 4.92, 4.93
#
 setwd("D:/gwasbook/data/SQLiteDBs")
 con <- dbConnect(dbDriver("SQLite"), dbname="sativa.db")

 dbListTables(con) 
 dbListFields(con,"snpmap") 
 dbListFields(con,"snpgeno") 
 

# Örnek 4.95: Veritabanı tablosunun veri çerçevesine okunması 1
# Bağımlılık – Örnek 4.94
#
 suppressPackageStartupMessages(installed <- require(dplyr))
 if (!installed){
   install.packages("dplyr", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(dplyr))
 }

 sativa_geno <- dplyr::tbl(con, "snpgeno")
 head(sativa_geno)

# Source:   lazy query [?? x 5]
# Database: sqlite 3.37.0 [D:\gwasbook\data\SQLiteDBs\sativa.db]


# Örnek 4.96: Veritabanı tablosunun veri çerçevesine okunması 2
# Bağımlılık – Örnek 4.94
#
 suppressPackageStartupMessages(installed <- require(magrittr))
 if (!installed){
   install.packages("magrittr", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(magrittr))
 }

 sample3 <- sativa_geno %% 
   filter(IID == 3) %% 
   select('FID', 'IID', 'A1', 'A2') %% 
   collect()

 head(sample3)
# A tibble: 6 x 4


# Örnek 4.97: Veritabanı tablosunda sorgulama
 suppressPackageStartupMessages(installed <- require(RSQLite))
 if (!installed){
   install.packages("RSQLite", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RSQLite))
 }

 setwd("D:/gwasbook/data/SQLiteDBs")
 con <- dbConnect(dbDriver("SQLite"), dbname = "sativa.db")

 snpid <- "id1000001"
 sql <- paste0("SELECT * FROM snpgeno WHERE SNP='", sinpid,"'")
 snpset <- dbGetQuery(con, sql)

 dim(snpset) 
 head(snpset)
 snpset$A1=factor(snpset$A1) 
 snpset$A2=factor(snpset$A2) 

 summary(snpset$A1) 
 summary(snpset$A2) 
 allel <- c(snpset$A1, snpset$A2)
 allelfreq <- summary(allel)/sum(summary(allel))*100
 allelfreq
 dbDisconnect(con)


# Örnek 4.98: Kromozom 4 verilerini sorgulama
 suppressPackageStartupMessages(installed <- require(RSQLite))
 if (!installed){
   install.packages("RSQLite", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RSQLite))
 }
 setwd("D:/gwasbook/data/SQLiteDBs")
 con <- dbConnect(dbDriver("SQLite"), dbname = "sativa.db")

 sql <- "SELECT * FROM snpmap WHERE CHR=4"
 chr4_map <- dbGetQuery(con, sql)

 dim(chr4_map) 
 head(chr4_map)
# Genotip tablosunda 4. kromozomdaki SNP'leri okuma
 chr4_snps <- chr4_map$SNP
 chr4_snps <- paste0("'", chr4_snps, "'", collapse=",")
 chr4_snps <- gsub(" ", "", chr4_snps)

 sql <- paste("SELECT * FROM snpgeno WHERE SNP IN (",chr4_snps,")")
 chr4_geno <- dbGetQuery(con, sql)

 dim(chr4_geno) 
 head(chr4_geno)
 dbDisconnect(con)


# Örnek 4.99: csv formatındaki ham bir SNP dosyasının R ortamına okutulması
setwd("D:/gwasbook/Gwasdata/illumina_raw_data")
conn <- file("GENEVA_1M_HapMap_58.csv")
open(conn)
readLines(conn, n=10)
txtline <- readLines(conn, n=1)
vars <- scan(text=txtline, what = character(1), sep=",")
vars
while(length(txtline)  0) {
  txtline <- readLines(conn, n=1)
  vals <- scan(text=txtline, what = character(1), sep=",")
  cat(txtline)
}
close(conn)


# Örnek 4.100: Illumina formatındaki ham bir SNP dosyasının R'de okunması
# 
 suppressPackageStartupMessages(installed <- require(GWASTools))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASTools")
  suppressPackageStartupMessages(require(GWASTools))  
 }

 suppressPackageStartupMessages(installed <- require(GWASdata))
 if (!installed) {
  if (!requireNamespace("BiocManager", quietly=TRUE))
    install.packages("BiocManager", repos="https://cloud.r-project.org")
  BiocManager::install("GWASdata")
  suppressPackageStartupMessages(require(GWASdata))  
 }

 setwd("D:/gwasbook/data/rawdata")
 rawfile <- system.file("extdata",
    "illumina_raw_data", package="GWASdata")
 gdsfile <- "illumina_raw2gds.gds"
 data(illumina_snp_annot, illumina_scan_annot)
 snpAnnot <- illumina_snp_annot[,c("snpID", "rsID", "chromosome",
    "position", "alleleA", "alleleB")]
 names(snpAnnot)[2] <-  "snpName"

# Test amacıyla alt veri seti
 scanAnnot <- illumina_scan_annot[1:3, c("scanID", "genoRunID", "file")]
 names(scanAnnot)[2] <- "scanName"
 col.nums <- as.integer(c(1,2,12,13))
 names(col.nums) <- c("snp", "sample", "a1", "a2")
 diagfile <- "illumina_diagnostic"
 res <- createDataFile(
   rawfile, gdsfile, file.type="gds", variables="genotype",
   snpAnnot, scanAnnot, sep.type=",",
   skip.num=11, col.total=21, col.nums=col.nums,
   scan.name.in.file=1, diagnostics.filename=diagfile)
 res

 illumina <- GdsGenotypeReader(gdsfile)
 str(illumina)
 illumina@handler
# Genotip matrisi
 geno <- getGenotype(illumina)
 dim(geno)
 geno[1:5,]


# Örnek 4.101: Illumina SNP dizilerini okuma
 suppressPackageStartupMessages(installed <- require(beadarraySNP))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("beadarraySNP")
   suppressPackageStartupMessages(require(beadarraySNP))  
 }
 datadir <- system.file("testdata", package="beadarraySNP")
 snpData <- read.SnpSetIllumina(paste(datadir,
  "4samples_opa4.csv",sep="/"), datadir)

 slotNames(snpData)
 snpData@assayData
 snpData@featureData
 head(snpData@assayData$G)
 head(snpData@assayData$R)


# Örnek 4.102: Affymatrix genotip dosyalarının okunması
#
 gdsfile <- tempfile()
 path <- system.file("extdata", "affy_raw_data", package="GWASdata")
 data(affy_snp_annot, affy_scan_annot)
 snpAnnot <- affy_snp_annot[,c("snpID", "probeID", 
   "chromosome", "position")]
 names(snpAnnot)[2] <- "snpName"
# Test için seçilen örneklem alt seti
 scanAnnot <- affy_scan_annot[1:3, c("scanID", "genoRunID", "chpFile")]
 names(scanAnnot)[2:3] <- c("scanName", "file")
 col.nums <- as.integer(c(2,3)); names(col.nums) <- c("snp", "geno")
 diagfile <- tempfile()
 res <- createDataFile(path, gdsfile, 
   file.type="gds", variables="genotype",
   snpAnnot, scanAnnot, sep.type="\t",
   skip.num=1, col.total=6, col.nums=col.nums,
   scan.name.in.file=-1, diagnostics.filename=diagfile)

 file.remove(diagfile)

# Kontrol işlemi
diagfile <- tempfile()
res <- checkGenotypeFile(path, gdsfile, file.type="gds", 
      snpAnnot, scanAnnot, sep.type="\t", skip.num=1,
      col.total=6, col.nums=col.nums,
      scan.name.in.file=-1, 
      check.scan.index=1:3, n.scans.loaded=3, 
      diagnostics.filename=diagfile)

 file.remove(diagfile)
 file.remove(gdsfile)



# Örnek 5.1: Basit benzetim uygulaması
#  Yöntem 1
 m <- 5    # Örneklem sayısı
 n <- 10   # SNP sayısı
 set.seed(79)
 X <- matrix(sample(c(0, 1, 2), size=n * m, 
   replace=TRUE, prob=c(0.25, 0.5, 0.25)), 
   ncol=n, byrow=TRUE)
 colnames(X) <- paste0("rs", 1:n)
 rownames(X) <- paste0("ind", 1:m)
 X
# Yöntem 2
 m <- 5    # Örneklem sayısı
 n <- 10   # SNP sayısı
 h2 <- 0.5 # Kalıtım derecesi

# SNP kodlama türünü seçme
 snpCodes1 <- c(-1, 1)    # 1,-1 kodlaması
 snpCodes2 <- c(0, 1, 2)  # 0,1,2 kodlaması
 codingType <- 1          # İstenen kodlama numarası
 if(codingType==1){ 
  snpCodes <- snpCodes1
 }else{
  snpCodes <- snpCodes2
 }

# SNP matrisi oluştur
 X <- matrix(0, nrow=m, ncol=n)
 set.seed(17)
 for (j in 1:m)
  X[j,] <- sample(snpCodes, n, replace=T)
 colnames(X) <- paste0("rs", 1:n)
 X
# Genotip matrisi oluştur
 genotip <- data.frame(sampId=1:m, 
    chrom=rep(1,m), pos=1:m, X,
    check.names=FALSE)

 genotip
# SNP etkileri vektörü oluştur 
 b <- rep(0, n) 
# Rastlantısal olarak etkili k SNP adayı seç
 set.seed(17)
 k <- 3
 nomsnp <- sample(1:n, k) 
 nomsnp
# SNP adaylarının etkilerini 1 yap
 b[nomsnp] <- 1
 b
# Genetik etkiler vektörünü hesapla
 Xb <- as.vector(X %*% b)
 Xb
# Hataları hesapla
 e <- rnorm(m, mean=0, sd=sqrt((1-h2)/h2*var(Xb)))
# Fenotip vektörünü oluştur
 y <- Xb  e 
 fenotip <- data.frame(sampId=1:n, pheno=y)
 fenotip


# Örnek 5.2: Benzetim verilerini dosyaya kaydetme
# Bağımlılık – Örnek 5.1
#
 setwd("D:/gwasbook/data/simulation")
 write.table(genotip1, "simgenotip.txt", 
    row.names=F, col.names=T, quote=F)
 write.table(fenotip1, "simfenotip.txt",
    row.names=F, col.names=T, quote=F)


# Örnek 5.3: h2=0.3 olan kantitatif bir özellik benzetimi
 suppressPackageStartupMessages(installed <- require(bigmemory))
 if (!installed) {
   install.packages("bigmemory", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(bigmemory))
 }
# 
 h2 <- 0.3      #Kalıtım derecesi 
 nQtl <- 10	 #QTL sayısı

# Mevcut bir genotip dosyasını oku
 setwd("D:/gwasbook/data/maize")
 genotip <- bigmemory::read.big.matrix("GAPIT.Genotype.Numerical.txt",
   type="char", sep="\t", head = TRUE)
 genotip <- genotip[, -1]
 d <- dim(genotip)
 genotip <- t(as.data.frame(as.matrix(genotip)))

# QTL'leri ata
 QTLs <- 50*(1:nQtl) # QTL belirle
 snpeffects <- rep(0, d[2]) #SNP etkileri
 snpeffects[QTLs] <- 1
 G <- as.vector(crossprod(genotip, snpeffects))
# Fenotip oluştur
 fenotip <- G  rnorm(d[1], mean=0, sd=sqrt((1-h2)/h2*var(g)))
 head(fenotip)
# Dosyayı kaydet
 write.table(fenotip, "maizeH230QTL10.txt", sep="\t", 
   row.names= F, col.names=F, quote=F)


# Örnek 5.4: PLINK ile benzetim 1
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate plink_sim.par "
 plinkCmd <- paste(plinkCmd, "--make-bed --out plink_sim1")
 system(plinkCmd)


# Örnek 5.5: PLINK ile benzetim 2
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate plink_sim.par "
 plinkCmd <- paste(plinkCmd, "--simulate-ncontrols 100 ")
 plinkCmd <- paste(plinkCmd, "--simulate-ncases 30 ")
 plinkCmd <- paste(plinkCmd, "--simulate-prevalence 0.02 ")
 plinkCmd <- paste(plinkCmd, "--make-bed --out plink_sim2")
 system(plinkCmd)

# Örnek 5.6: Benzetim frekansları dosyası
 simfreqs <- read.table("plink_sim2-temporary.simfreq")
 dim(simfreqs)
 head(simfreqs, 3)
 tail(simfreqs, 3)


# Örnek 5.7: PLINK ile benzetim 3
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate plink_sim2.par "
 plinkCmd <- paste(plinkCmd, "--make-bed --out plink_sim3")
 system(plinkCmd)


# Örnek 5.8: PLINK ile benzetim 4
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate plink_sim2.par "
 plinkCmd <- paste(plinkCmd, "--simulate-ncases 50 ")
 plinkCmd <- paste(plinkCmd, "--simulate-ncontrols 300 ")
 plinkCmd <- paste(plinkCmd, "--simulate-prevalence 0.05 ")
 plinkCmd <- paste(plinkCmd, "--make-bed --out plink_sim4")
 system(plinkCmd)


# Örnek 5.9: PLINK ile benzetim ve analiz
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate plink_sim.par --assoc"
 plinkCmd <- paste(plinkCmd, " --out plink_sim5")
 system(plinkCmd)


# Örnek 5.10: PLINK ile benzetim 6
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate plink_sim.par --simulate-label Pop1"
 plinkCmd <- paste(plinkCmd, "--make-bed --out plink_sim6")
 system(plinkCmd)



# Örnek 5.11: PLINK ile benzetim 7
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- "plink --simulate-qt plink_sim3.par --simulate-n 15"
 plinkCmd <- paste(plinkCmd, " --out plink_sim7")
 system(plinkCmd)


# Örnek 5.12: PLINK ile benzetim dosyalarının formatını değiştirme
 setwd("D:/gwasbook/data/simulation")
 plinkCmd <- " plink --bfile plink_sim7 --recode tab"
 plinkCmd <- paste(plinkCmd, "--out plink_sim7a")
 system(plinkCmd)


# Örnek 5.13: MultiTraitGWAS'ın kurulması
 host <- "http://multitraitgwas.kcl.ac.uk:3838/sim-app/"
 zipfile <- "Multi_Trait_GWAS_Software.zip"
 url <- paste0(host, zipfile)
 setupdir <- "D:/gwasbook/MultitraitGWAS"
 dir.create(setupdir)
 setwd(setupdir)
 download.file(url, zipfile)
 unzip(zipfile, exdir=setupdir, overwrite=TRUE)
 subdir <- paste0(setupdir,"/Multi_Trait_GWAS_Software")
 files <- dir(subdir, "*.*", ignore.case=TRUE, all.files=TRUE)
 file.copy(file.path(subdir, files), setupdir, overwrite = TRUE)
 file.remove(zipfile)
 unlink(subdir, recursive=TRUE)
 unlink("__MACOSX", recursive=TRUE)


# Örnek 5.14: MultiTraitGWAS.R dosyasında değişiklik yapılması
# Bağımlılık - Örnek 5.13

# Check whether the machine is Windows; if so, print error and quit
# if(Sys.info()[1]=="Windows"){
#  print("ERROR: this software requires a UNIX/Linux platform")
#  stop()
# }


# Örnek 5.15: MultiTraitGWAS.R'ı R'den çalıştırma
# Bağımlılık - Örnek 5.11, 5.12
#
 setwd("D:/gwasbook/MultitraitGWAS")
 system("R --file=MultiTraitGWAS.R -q --args n 2000 m 100 k 3 MAF 0.3 v 0.005,0.001,0.002 cor.mat 0.25,-0.3,0.01 strand data")


# Örnek 5.16: SNP dosyalarını birleştirme
# Bağımlılık - Örnek 5.15
#
 setwd("D:/gwasbook/MultitraitGWAS/data_output_12-02-2022_20.41.01")
 snpfiles <- list.files(getwd(), "snp*.*")
 snpnames <- c()
 snpdf <- c()
 for (file in snpfiles){      
     tempdf <- read.table(file, header=TRUE)
     snpnames <- c(snpnames, colnames(tempdf)[1])
     snpdf <- cbind(snpdf, tempdf[,1])
     rm(tempdf)
 }
 colnames(snpdf) <- snpnames
 snpdf[1:3, 1:5]
 write.table(snpdf, "D:/gwasbook/data/simulation/multrtgeno.txt",
   row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")


# Örnek 5.17: Fenotip dosyalarını birleştirme
# Bağımlılık - Örnek 5.16
#
 setwd("D:/gwasbook/MultitraitGWAS/data_output_12-02-2022_20.41.01")
 phefiles <- list.files(getwd(), "phe*.*")
 phenames <- c()
 for (file in phefiles){      
     tempdf <- read.table(file, header=TRUE)
     if(!exists("phedf"))
       phedf <- tempdf
     else
       phedf <- cbind(phedf, tempdf)
     rm(tempdf)
 }
 i <- 1
 while(i <= length(snpnames)){
   j <- 1
   colnames(phedf)[i] <- paste0("phe_", snpnames[i], "_",j)
   colnames(phedf)[i1] <- paste0("phe_", snpnames[i],"_", j1)
   colnames(phedf)[i2] <- paste0("phe_", snpnames[i], "_", j2)
   i <- i  3
 }

 phedf[1:3, 1:6]
 write.table(phedf, "D:/gwasbook/data/simulation/multrtpheno.txt",
   row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")


# Örnek 5.18: Benzetim dosyaları klasörünü silme
# Bağımlılık - Örnek 5.15
 setwd("../")
 dir <- "D:/gwasbook/MultitraitGWAS/data_output_12-02-2022_20.41.01"
 unlink(dir, recursive=TRUE)


# Örnek 5.19: simplePHENOTYPES paketinin kurulması ve yüklenmesi
 suppressPackageStartupMessages(installed <- require(simplePHENOTYPES))
 if (!installed) {
   install.packages("simplePHENOTYPES", 
     repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(simplePHENOTYPES))
 }


# Örnek 5.20: Genotip verisinin okunması
# Bağımlılık - Örnek 5.19
#
 data("SNP55K_maize282_maf04")
 SNP55K_maize282_maf04[1:8, 1:10]

# Örnek 5.21: simplePHENOTYPES ile tek özellik için benzetim
# Bağımlılık - Örnek 5.20
#
 setwd("D:/gwasbook/data/simulation/simplePHENOTYPES")
 maize_pheno <- create_phenotypes(
   geno_obj = SNP55K_maize282_maf04,
   add_QTN_num = 4,
   add_effect = 0.3,
   big_add_QTN_effect = c(0.9, 0.8),
   rep = 5,
   h2 = 0.6,
   model = "A",
   to_r = TRUE,
   output_format="long",
   home_dir = getwd())

 maize_pheno[1:5,1:3]


# Örnek 5.22: simplePHENOTYPES ile çok özellik için benzetim
# Bağımlılık - Örnek 5.20
#
 setwd("D:/gwasbook/data/simulation/simplePHENOTYPES")
 pledf <-  create_phenotypes(
   geno_obj = SNP55K_maize282_maf04,
   ntraits = 3,
   h2 = c(0.15, 0.5, 0.6),
   rep = 10,
   add_QTN_num = 3,
   dom_QTN_num = 4,
   big_add_QTN_effect = c(0.2, 0.2, 0.2),
   add_effect = c(0.05, 0.15, 0.2),
   dom_effect = c(0.1, 0.3, 0.2),
   vary_QTN = FALSE,
   architecture = "pleiotropic",
   output_format = "multi-file",
   output_dir = "Pleiotropik_Benzetim",
   to_r = TRUE,
   seed = 123,
   model = "AD",
   sim_method = "geometric",
   home_dir = getwd()
 )

 pledf[1:3, ]


# Örnek 5.23: pedSimulate ile soyağacı ve süt verimi simülasyonu
# Paketin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(pedSimulate))
 if (!installed){
   install.packages("pedSimulate", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pedSimulate))
 }

# Benzetim yap
 set.seed(123)
 simped <- simulatePed(
   F0size = 100, #Kurucu Populasyonda birey sayısı (çift sayı)
   Va0 = 9,  # Eklemeli genetik varyans
   Ve = 36,  # Hata varyansı (kuşaklar boyunca sabit)
   littersize = 1, #Dişi başına yavru sayısı
   ngen = 5, #Kuşak (generasyon) sayısı
   mort.rate = 0.01, #Ölüm (Sütten kesim-ilk çiftleşme yaşı arası ölenler)
   overlap.s = 1, 
   overlap.d = 0,
   f.rate = 0.8,
   m.rate = 0.5,
   fsel = "P",
   msel = "PA",
   f.order = "fsel",
   m.order = "msel"
 )


# Örnek 5.23: Benzetim verisinin yapısı
# Bağımlılık - Örnek 5.22

 dim(simped)
 str(simped)
 head(simped, 3)
 tail(simped, 3)


# Örnek 5.25: Benzetim verisinde birey gruplarını inceleme
# Bağımlılık - Örnek 5.22

 hs_mate_finder(simped) #Üvey kardeşleri göster
 fs_mate_finder(simped) #Öz kardeşleri göster
 pp_mate_finder(simped) #Eşlerin bulunması


# Örnek 5.26: Benzetim verisine yeni kuşak ekleme
# Bağımlılık - Örnek 5.22
#
 simped2 <- appendPed(
   ped=simped,
   Va0 = 9,
   Ve = 36,
   littersize = 1,
   ngen = 1,
   mort.rate = 0.05,
   overlap.s = 1,
   overlap.d = 0,
   f.rate = 0.8,
   m.rate = 0.5,
   fsel = "R",
   msel = "R",
   f.order = "P",
   m.order = "PA"
 )

 head(simped2, 3)
 tail(simped2, 3)


# Örnek 5.27: Genotipik veri benzetimi
# Bağımlılık - Örnek 5.25

 set.seed(123)
 nSNP <- 10 # SNP sayısı
 mmr <- 1e-05 #Maksimum mutasyon oanı
 AF <- runif(nSNP, 0.01, 0.99)
 mut.rate <- runif(nSNP, 0, mmr)
 simgeno <- simulateGen(simped2, AF, mut.rate)
 simgeno <- as.data.frame(simgeno)
 colnames(simgeno) <- paste0("snp", 1:nSNP)
 str(simgeno)


# Örnek 5.28: Veri birleştirme ve kayıt
# Bağımlılık - Örnek 5.27
#
 simdf <- cbind(simped2, simgeno)
 simdf[1:5, 1:12]
 setwd("D:/gwasbook/data/simulation")
 write.table(simdf, "pedsimulate.txt", sep="\t",
   row.names=FALSE, col.names=TRUE, quote=FALSE)


# Örnek 5.29: simcross paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(simcross))
 if (!installed){
    install.packages("simcross", repos="https://cloud.r-project.org")
    suppressPackageStartupMessages(require(simcross))  
 }
 p1 <- create_parent(L=100, allele=1)
 p2 <- create_parent(L=100, allele=2)
 f1 <- create_parent(L=100, allele=1:2)
 f2 <- cross(f1, f1)
 f2 <- cross(f1, f1, m=0, obligate_chiasma=TRUE)

 head(AILped, n=10)
 check_pedigree(AILped)

  
# Örnek 5.30: GWASdata paketinin kurulması/yüklenmesi
#
 suppressPackageStartupMessages(installed <- require(GWASdata))
 if (!installed){
    if (!requireNamespace("BiocManager", quietly = TRUE))
       install.packages("BiocManager")
    BiocManager::install("GWASdata")
    suppressPackageStartupMessages(require(GWASdata))  
 }

 data(illumina_scan_annot)
 data(illumina_snp_annot)
 data(illuminaScanADF) # ScanAnnotationDataFrame
 data(illuminaSnpADF) # SnpAnnotationDataFrame
 varMetadata(illuminaSnpADF)

# NetCDF
 file <- system.file("extdata", "illumina_geno.nc", package="GWASdata")
 nc <- NcdfGenotypeReader(file)
 geno <- getGenotype(nc, snp=c(1,10), scan=c(1,5))
 genoData <- GenotypeData(nc, snpAnnot=illuminaSnpADF,  
    scanAnnot=illuminaScanADF)

# GDS
 file <- system.file("extdata", "illumina_geno.gds", package="GWASdata")
 gds <- GdsGenotypeReader(file)
 geno <- getGenotype(gds, snp=c(1,10), scan=c(1,5))
 genoData <- GenotypeData(gds, snpAnnot=illuminaSnpADF, 
   scanAnnot=illuminaScanADF)

# Ham veri
 list.files(system.file("extdata", "illumina_raw_data",
   package="GWASdata"))

# Örnek 6.1: PLINK ile akrabalı yetiştirme katsayısı hesaplama
# 
 setwd("D:/gwasbook/data/cattle/")
 system("plink --bfile cattle --chr-set 29 --het --out cattle")
 cattleHet <- read.table("cattle.het", header=TRUE)
 head(cattleHet)
 idx <- which(cattleHet$F  1.0)
 idx
integer(0)

# Örnek 6.2: inbreedR ile heterozigotluk/akrabalı yetiştirme kontrolü
 suppressPackageStartupMessages(installed <- require(inbreedR))
 if (!installed) {
   install.packages("inbreedR", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(inbreedR))
 }

# Orijinal genotip verisini oku
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- cattleGeno[,7:ncol(cattleGeno)]
 rownames(geno) <- cattleGeno[,2]
 geno[1:5,1:2]
# g2 hesaplama
 cattleG2 <- g2_snps(geno, nperm=100, nboot=10, boot_over="inds",
   CI=0.95, parallel=TRUE, ncores=5)

 plot(cattleG2, main = "g2 dağılışı",
   col="dodgerblue", cex.axis=0.85)

# Çok lokuslu heterozigotluk hesaplama
 cattleMlh <- MLH(geno)
 head(cattleMlh)
# Standartlaştırılmış çok lokuslu heterozigotluk hesaplama
 cattleSmlh <- sMLH(geno)
 head(cattleSmlh)
# Standartlaştırılmış çok lokuslu heterozigotluk varyansı
 cattleHetVar <- var(cattleSmlh)
 cattleHetVar
# Heterozigotluk-Heterozigotluk korelasyonu (HHC) hesaplama
 cattleHHC <- HHC(geno, reps=100, Cı=0.95)
 cattleHHC
 names(cattleHHC)
 plot(cattleHHC, main="HHC Dağılışı",
   col="dodgerblue", cex.axis=0.85)

# Akrabalı yetiştirme ve heterozigotluk arasında r2
 cattleHf <- r2_hf(genotypes=geno, type="snps")
 plot(cattleHf)



# Örnek 6.3: inbreedR paketi ile akrabalı yetiştirme kontrolü
# Uyum fenotipinin heterozigotluğa regresyonu
 fitnessModel <- lm(proteinyield ~ cattleHet)
# Regresyon katsayısı
 b <- coef(fitnessModel)[2]
# Uyum ve heterozigotluk arasındaki r2
 Wh <- cor(bodyweight,predict(fitnessModel))^2
# Uyum ve akrabalı yetiştirme arasında r2
 Wf <- r2_Wf(genotypes=geno, trait = proteinyield, 
   family=gaussian, type="snps")


# Örnek 6.4: Simülasyon verisinde genomik şişme hesaplama
# Bağımlılık - Kod 7.1, 6.1
# 
# Rastlantısal olarak üretilen 100 p-değeri için gc hesaplama
 pVals <- ppoints(100)
 lambdagc(pVals)
[1] 1.000198

 # GWAS sonuç dosyasındaki özelliklere ait P değerlerinden gc hesaplama
 simGwasres <- simGwasResult(nchr=10, nsnp=1000, chrX="n",
   ntraits=4, maxpos=1e06, nsigp=50,
   minsplev=1e-07, maxsplev=1e-04, seed=13)

 str(simGwasres)
 resGc <- apply(simGwasres[,4:7], 2, lambdagc)
 resGc


# Örnek 6.5: Vaka/kontrol verisinde allel frekansları
# 
 dataDir <- "D:/gwasbook/data/disease"
 if (!dir.exists(dataDir)){
    dir.create(dataDir)
    print(paste(dataDir, "oluşturuldu."))
 }else{
    print(paste(dataDir, "mevcut!"))
 }
 urlLoc <- "http://popgen.dk/ida/popgenKU2019/gwasdata2019.tar.gz"
 #fileName <- basename(urlLoc)	
 fileName <- "disease.tar.gz"
 download.file(urlLoc, dest=fileName)
 untar(fileName)
 subDir <- paste0(dataDir,"/data/")
 files <- list.files(subDir,full.names=TRUE)
 file.copy(files, to=dataDir)
 file.rename(from="gwa", to="disease")
 unlink(subDir, recursive=TRUE)


# Örnek 6.6: Bireyler ve SNP'ler için eksik değerleri saptama
# Bağımlılık – Örnek 6.5
#
# Çalışma klasörünü tanımla
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- "plink --bfile disease --missing --out disease"
 system(plinkCmd) 


# Örnek 6.7: Eksik SNP tanımlamaları inceleme
# Bağımlılık – Örnek 6.5
#
 imiss <- read.table("disease.imiss", head=TRUE)
 head(imiss)
 dim(imiss)
 lmiss <- read.table("disease.lmiss", head=TRUE)
 head(lmiss)
 dim(lmiss)
# Eksik değer oranları histogramı
 opar <- par(mfrow=c(1,2))
 hist(imiss[,6], col="gray",
   xlab="Eksiklik Oranı", ylab="Frekans",
   main="Bireylere göre")
 abline(v=0.05, lwd=3, lty=1, col=2)
 hist(lmiss[,5], col="gray",
   xlab="Eksiklik Oranı", ylab="Frekans",
   main="SNP'lere göre")
 abline(v=0.1, lwd=3, lty=1, col=2)
 par(opar)


# Örnek 6.8: Eksik değerli SNP'leri temizleme
# Bağımlılık – Örnek 6.5
#
 plinkCmd <- "plink --bfile disease --geno 0.05 --make-bed "
 plinkCmd <- paste(plinkCmd, " --out disease_1")
 system(plinkCmd) 

# Temizlenmiş veriyi inceleme
 plinkCmd <- "plink --bfile disease_1 --missing --out disease_1"
 system(plinkCmd) 

# Dosya içeriklerini R'de inceleme
 imiss <- read.table("disease_1.imiss", head=TRUE)
 head(imiss)
 dim(imiss)

 lmiss <- read.table("disease_1.lmiss", head=TRUE)
 head(lmiss)
 dim(lmiss)


# Örnek 6.9: Eksik genotipli bireyleri temizleme
# Bağımlılık – Örnek 6.8
#
 plinkCmd <- "plink --bfile disease_1 --mind 0.1 --make-bed "
 plinkCmd <- paste(plinkCmd, " --out disease_2")
 system(plinkCmd) 

 plinkCmd <- "plink --bfile disease_2 --missing --out disease_2"
 system(plinkCmd) 

 imiss <- read.table("disease_2.imiss", head=TRUE)
 head(imiss)
 lmiss <- read.table("disease_2.lmiss", head=TRUE)
 head(lmiss)


# Örnek 6.10: Eksik değerli lokusları ve bireyleri temizleme
# Bağımlılık – Örnek 6.8
#
 plinkCmd <- "plink --bfile disease --geno 0.05 --mind 0.1 --make-bed "
 plinkCmd <- paste(plinkCmd, " --out disease_2")
 system(plinkCmd) 

 plinkCmd <- "plink --bfile disease_2 --missing --out disease_2"
 system(plinkCmd) 

 imiss <- read.table("disease_2.imiss", head=TRUE)
 head(imiss)

 lmiss <- read.table("disease_2.lmiss", head=TRUE)
 head(lmiss)


# Örnek 6.11: Eksik değer oranları histogramı
# Bağımlılık – Örnek 6.10
#
 opar <- par(mfrow=c(1,2))
 hist(imiss[,6], col="gray",
   xlab="Eksiklik Oranı", ylab="Frekans",
   main="Bireylere göre")
 abline(v=0.05, lwd=3, lty=1, col=2)
 hist(lmiss[,5], col="gray",
   xlab="Eksiklik Oranı", ylab="Frekans",
   main="SNP'lere göre")
 abline(v=0.09, lwd=3, lty=1, col=2)
 par(opar)



# Örnek 6.12: Cinsiyet uyuşmazlığı kontrolü
# Bağımlılık – Örnek 6.11
#
 plinkCmd <- "plink --bfile disease_2 --check-sex --out disease_2"
 system(plinkCmd) 

 sexcheck <- read.table("disease_2.sexcheck", head=TRUE)
 head(sexcheck)


# Örnek 6.13: Cinsiyet için düzeltme
# Bağımlılık – Örnek 6.12
#
 # indidx <- which(sexcheck[, "PEDSEX"] != sexcheck[, "SNPSEX"])
 indidx <- which(sexcheck[, "STATUS"] != "OK")
 sexcheck[indidx,]
# FAM dosyasının okunması
 disease2_fam <- read.table("disease_2.fam")
 disease2_fam[indidx,]
# Cinsiyet kodunun düzeltilmesi
 disease2_fam[indidx,"V6"] <- 1
# Alternatif yol
 fix(disease2_fam)

# Düzeltilmiş kayıtların FAM'e yazılması
 write.table(disease2_fam, "disease2.fam",
  row.names=FALSE, col.names=FALSE, quote=FALSE)


# Örnek 6.14: Cinsiyet için kalite kontrolü grafikleri
# Bağımlılık – Örnek 6.13
#
 opar <- par(mfrow=c(1,3))
 hist(sexcheck[,6], col="gray",
   xlab="F", ylab="Frekans", main="KadınErkek")
 abline(v=c(0.2, 0.8), lty=2, lwd=2, col=3)
 
 female <- subset(sexcheck, sexcheck$PEDSEX==2)
 hist(female[,6], xlim=c(-.1,.2),
    main="Kadın", xlab="F", ylab="Frekans", col="red")
 abline(v=0.2, lty=2, lwd=2, col=3)

 male <- subset(sexcheck, sexcheck$PEDSEX==1)
 hist(male[,6], main="Erkek", xlab="F", ylab="Frekans", col="blue")
 abline(v=0.8, lty=2, lwd=2, col=3)
 par(opar)


# Örnek 6.15: Cinsiyet uyuşmazlığı gösteren bireyleri silme
# Bağımlılık – Örnek 6.13
#
 probinds <- disease2_fam[indidx,]
 write.table(probinds, "probinds.txt", 
   quote=F, row.names=F, col.names=F)
 plinkCmd <- "plink --bfile disease_2 --remove probinds.txt "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disease_3")
 system(plinkCmd) 


# Örnek 6.16: Cinsiyet uyuşmazlığı gösteren bireylerin impütasyonu
# Bağımlılık – Örnek 6.13
#
 probinds <- disease2_fam[indidx,]
 write.table(probinds, "probinds.txt", 
   quote=F, row.names=F, col.names=F)
 plinkCmd <- "plink --bfile disease_2 --impute-sex "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disease_4")
 system(plinkCmd) 


# Örnek 6.17: MAF için kalite kontrolü 
# Bağımlılık – Örnek 6.16
#
 plinkCmd <- "plink --bfile disease_4 --freq --out disease_4 "
 system(plinkCmd) 
 freqs <- read.table("disease_4.frq", head=TRUE)
 head(freqs)


# Örnek 6.18: MAF grafiği
# Bağımlılık – Örnek 6.17
#
 opar <- par(mfrow=c(1,1))
 hist(freqs$MAF, col="gray",
   xlab="MAF", ylab="Frekans", main="MAF")
 abline(v=c(0.01, 0.05, 0.1, 0.2), lty=2, lwd=2, col=2)
 par(opar)


# Örnek 6.19: MAF<0.05 için temizleme 
# Bağımlılık – Örnek 6.16
#
 plinkCmd <- "plink --bfile disease_4 --maf 0.05 "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disease_5")
 system(plinkCmd) 


# Örnek 6.20: HWE için kalite kontrolü 
# Bağımlılık – Örnek 6.19
#
 plinkCmd <- "plink --bfile disease_5 --hardy --out disease_5"
 system(plinkCmd) 

 hwes <- read.table("disease_5.hwe", head=TRUE)
 head(hwes)


# Örnek 6.21: HWE P-değerleri histogramı
# Bağımlılık – Örnek 6.20
#
 hist(hwes$P, col="gray",
   xlab="P", ylab="Frekans", main="HWE : p<1e-06")
 abline(v=1e-06, lty=2, lwd=2, col=2)


# Örnek 6.22: HWE P-değerleri histogramı (yakınlaştırılmış)
# Bağımlılık – Örnek 6.16
#
 hweszoom <- hwes[hwes$P<1e-06,]
 head(hweszoom)
 hist(hweszoom$P, col="gray",
   xlab="P", ylab="Frekans", main="HWE – p<0.000001")
 abline(v=1e-06, lty=2, lwd=2, col=2)



# Örnek 6.23: HWE değerleri için iki adımlı kontrol
# Bağımlılık – Örnek 6.20
#
# Adım 1
 plinkCmd <- "plink --bfile disease_5 --hwe 1e-06 "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disease_6")
 system(plinkCmd) 

# Adım 2
 plinkCmd <- "plink --bfile disease_6 --hwe 1e-9 --hwe-all "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disease_7")
 system(plinkCmd) 


# Örnek 6.24: ME için kalite kontrolü
# Bağımlılık – Örnek 6.23
#
 plinkCmd <- "--bfile disease7 --me 0.05 0.1  "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disase_8")
 system(plinkCmd) 


# Örnek 6.25: Yüksek düzeyde LD ilişkili bölgelerin budanması
# Bağımlılık – Örnek 6.24
#
 inversion <- read.table("high_ld_regions.txt", head=F)
 head(inversion)
 plinkCmd <- "plink --bfile disease_8 --exclude high_ld_regions.txt "
 plinkCmd <- paste(plinkCmd, " --range --indep-pairwise 50 5 0.2 ")
 plinkCmd <- paste(plinkCmd, " --out indepSNPs")
 system(plinkCmd) 


# Örnek 6.26: Heterozigotluğun incelenmesi
# Bağımlılık – Örnek 6.25
#
 plinkCmd <- "plink --bfile disease_8 --extract indepSNPs.prune.in "
 plinkCmd <- paste(plinkCmd, " --het --out het_check")
 system(plinkCmd) 

 hetdata <- read.table("het_check.het", head=TRUE)
 head(hetdata)


# Örnek 6.27: Heterozigotluk oranlarını hesaplama
# Bağımlılık – Örnek 6.26
#
 hetdata$HET_RATE <- (hetdata[,5]-hetdata[,3])/hetdata[,5]
 head(hetdata)
 hetmean <- mean(hetdata$HET_RATE) # Ortalama
 hetmean  
 hetsd <- sd(hetdata$HET_RATE) # Std. sapma
 hetsd 
# Heterozigotluk oranı histogramı
 hist(hetdata$HET_RATE, xlab="Oran", ylab="Frekans",
    main= "Heterozigotluk Oranı")
 abline(v=c(hetmean, hetmean3*hetsd), lty=c(2,3), lwd=2, col=c(2,4))
 abline(v=c(hetmean, hetmean-3*hetsd), lty=c(2,3), lwd=2, col=c(2,4))
 legend("topright", legend=c("Ortalama", "3SD"),
    lty=c(2,3), lwd=c(2,2), col=c(2,4))


# Örnek 6.28: Heterozigotluk oranı aykırı bireyleri temizleme
# Bağımlılık – Örnek 6.27
#
 hetindidx <- which(hetdata$HET_RATE  (hetmean  3*hetsd) |
    hetdata$HET_RATE < (hetmean-3*hetsd))
 head(hetdata[hetindidx,])
 write.table(hetdata[hetindidx, 1:2], "hetindidx.txt",
    quote=F, col.names=F, row.names=F)

 plinkCmd <- "plink --bfile disease_8 --remove hetindidx.txt "
 plinkCmd <- paste(plinkCmd, " --make-bed --out disease_9")
 system(plinkCmd) 


# Örnek 6.29: Bireyler arası ilişki kontrolü 
# Bağımlılık – Örnek 6.28
#
 system("plink --bfile disease_9 --genome --out disease_10")

 relatedness <- read.table("disease_10.genome", head=TRUE)
 head(relatedness)


# Örnek 6.30: Pi-şapka histogramı
# Bağımlılık – Örnek 6.29
#
 hist(relatedness$PI_HAT, col="gray",
   xlab="P", ylab="Frekans", main="Pi-Hat")


# Örnek 6.31: Bireyler arası ilişki grafiği 1
# Bağımlılık – Örnek 6.29
#
 rtpo <- subset(relatedness, RT=="PO")
 rtun <- subset(relatedness, RT=="UN")
 rtlev <- levels(factor(relatedness$RT))
 opar <- par(pch=16, cex=1)
 plot(relations$Z0, relations$Z1,
   xlim=c(0, 1), ylim=c(0,1), type="n",
   xlab="Z0", ylab="Z1")
 points(rtpo$Z0, rtpo$Z1, col="green")
 points(rtun$Z0, rtun$Z1, col="dodgerblue")
 legend(1, 1, legend=rtlev, xjust=1, yjust=1, pch=19, 
   col=c("dodgerblue", "green"))
 par(opar)
# Örnek 6.32: Bireyler arası ilişki grafiği 2
# Bağımlılık – Örnek 6.29
#
 relatedness_1 <- relatedness[relatedness$PI_HAT  0.08,]
 head(relatedness_1)
 rtpo <- subset(relatedness_1, RT=="PO")
 rtun <- subset(relatedness_1, RT=="UN")
 rtlev <- levels(factor(relatedness_1$RT))
 opar <- par(pch=16, cex=1)
 plot(relatedness_1$Z0, relatedness_1$Z1,
   xlim=c(0, 1), ylim=c(0,1), type="n",
   xlab="Z0", ylab="Z1")
 points(rtpo$Z0, rtpo$Z1, col="green")
 points(rtun$Z0, rtun$Z1, col="dodgerblue")
 legend(1, 1, xjust=1, yjust=1, legend=rtlev, pch=19, 
   col=c("dodgerblue", "green"))
 par(opar)


# Örnek 6.33: İlişkili bireylerin kaldırılması
# Bağımlılık – Örnek 6.29
#
 system("plink --bfile disease_10 --genome --min 0.2 --out disease_11")

 relatedness <- read.table("disease_11.genome", head=TRUE)
 head(relatedness)


# Örnek 6.34: Bireyler arası IBS için ilişki kontrolü
# Bağımlılık – Örnek 6.33
#
 system("plink --bfile disease_11 --ibs-test")


# Örnek 6.35: Bireyler arası IBS için ilişki kontrolü
# Bağımlılık – Örnek 6.33
#
 system("plink --bfile disease --genome --out nooutliersIBD")


# Örnek 6.36: MDS analizi
# Bağımlılık – Örnek 6.34
#
 plinkCmd <- "plink --bfile disease_11 --read-genome disease_12.genome"
 plinkCmd <- paste(plinkCmd, "--cluster  --mds-plot 4")
 system(plinkCmd)


# Örnek 6.37: Tek PLINK komutuyla kalite kontrolü
#
 plinkCmd <- paste("plink --bfile disease ",
 "--mind 0.1 ",
 "--geno 0.05 ",
 "–-maf 0.01 ",
 "--hwe 0.000005 ",
 "--me 0.05 0.1 ",
 "--make-bed --out disease_qc")
 system(plinkCmd)


# Örnek 6.38: PLINK2 kullanılarak kalite kontrolü 
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- "plink2 --bfile disease --missing --out disease"
 system(plinkCmd) 

 plinkCmd <- "plink2 --bfile disease --geno 0.1 "
 plinkCmd <- paste(plinkCmd," --make-bed --out qc1 ")
 system(plinkCmd)


# Örnek 6.39: PLINK2 kullanılarak kalite kontrolü 
#
 setwd("D:/gwasbook/data/disease")

# Eksik değerli bireyleri kaldırma 
 plinkCmd <- "plink2 --bfile qc1 --mind 0.2 "
 plinkCmd <- paste(plinkCmd," --make-bed --out qc2")
 system(plinkCmd)

# MAF'ı belli bir eşik altında kalan nadir allelli SNP'leri atma
 plinkCmd <- "plink2 --bfile qc2 --maf 0.01 "
 plinkCmd <- paste(plinkCmd," --make-bed --out qc3")
 system(plinkCmd)

# HWE'yi ihlal eden SNP'leri atma 
# GWAS'ta HWE için eşik olarak 1e-6 yaygın kullanılır
 plinkCmd <- "plink2 --bfile qc3 --hwe 0.000001 "
 plinkCmd <- paste(plinkCmd," --make-bed --out qc4")
 system(plinkCmd)

# Aşırı düşük ve yüksek heterozigotluğu temizleme
 plinkCmd <- "plink2 --bfile qc4 --het  "
 plinkCmd <- paste(plinkCmd," --make-bed --out qc5")
 system(plinkCmd)

# Cinsiyet uyuşmazlığı kontrolü 
 plinkCmd <- "plink2 --bfile qc5 --check-sex  "
 plinkCmd <- paste(plinkCmd," --make-bed --out qc6")
 system(plinkCmd)

# IBS matrisi oluşturma 
 plinkCmd <- "plink2 --bfile qc5 --genome --out ibsmatrix"
 system(plinkCmd)

# MDS analizi 
 plinkCmd <- " plink2 --bfile gwasdata --read-genome ibsmatrix.genome "
 plinkCmd <- paste(plinkCmd," --cluster  --mds-plot 4")
 system(plinkCmd)


# Örnek 6.40: plinkQC paketini kurma/yükleme ve dosyaları tanımlama
 suppressPackageStartupMessages(installed <- require(plinkQC))
 if (!installed) {
   install.packages("plinkQC", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(plinkQC))
 }

# Veri ve PLINK klasörü tanımlama
 inputDir <- "D:/gwasbook/data/disease"
 outputDir <- "D:/gwasbook/data/disease"
 fileName <- "disease"
 path2plink <- "D:/PLINK/plink"


# Örnek 6.41: plinkQC paketiyle kalite kontrolleri
# Bağımlılık – Örnek 6.40
#
# Birey bazlı kalite kontrolleri
 failHetMiss <- check_het_and_miss(
   indir=inputDir, name=fileName,
   path2plink=path2plink,
   interactive=FALSE)

 indMiss <- failHetMiss$fail_imiss
 head(indMiss, 4)
 indHet <- failHetMiss$fail_het
 head(indHet, 4)
 failHetMiss$p_het_imiss

 failMarkers$p_markerQC
 failMarkers <- perMarkerQC(
    indir=inputDir, name=fileName,
    qcdir=outputDir,
    path2plink=path2plink,
    verbose=TRUE, interactive=TRUE,
    showPlinkOutput=FALSE)

 names(failMarkers)
 str(failMarkers$fail_list)
 snpMiss <- failMarkers$fail_list$SNP_missingness 
 head(SNP_miss, 4)
 failMarkers$p_markerQC

# Örnek 6.42: plinkQC paketinde cinsiyet bazlı kalite kontrolleri
# Bağımlılık – Örnek 6.40
#
 failSex <- check_sex(
   indir=inputDir, qcdir=outputDir, name=fileName,
   path2plink=path2plink, 
   maleTh = 0.8, femaleTh = 0.2,
   interactive=TRUE,
   verbose=TRUE)

# Örnek 6.43: plinkQC ile akrabalık için kalite kontrolleri
# Bağımlılık – Örnek 6.40
#
 excludeRelatedness <- check_relatedness(
  indir=inputDir, qcdir=outputDir, name=fileName,
  interactive=TRUE,
  path2plink=path2plink)


# Örnek 6.44: plinkQC paketinde eksik veri içeren markörlerin tespiti
# Bağımlılık – Örnek 6.40
#
 failSnpmissing <- check_snp_missingness(
   indir=inputDir, qcdir=outputDir, name=fileName,
   interactive=TRUE,
   path2plink=path2plink, 
   showPlinkOutput=FALSE)


# Örnek 6.45: plinkQC paketinde HWE’nden sapan markörlerin tespiti
# Bağımlılık – Örnek 6.40
#
 failHwe <- check_hwe(
   indir=inputDir, qcdir=outputDir, name=fileName, 
   interactive=TRUE,
   path2plink=path2plink, 
   showPlinkOutput=FALSE)


# Örnek 6.46: plinkQC paketinde HWE’nden sapan markörlerin tespiti
# Bağımlılık – Örnek 6.40
#
 failMaf <- check_maf(
    indir=inputDir, qcdir=outputDir, name=fileName, 
    interactive=TRUE,
    path2plink=path2plink, 
    showPlinkOutput=FALSE)


# Örnek 6.47: ASRgenomics ile genomik kalite kontrolü
#
# ASRgenomics paketinin kurulması/yüklenmesi
  suppressPackageStartupMessages(installed <- require(ASRgenomics))
  if (!installed) {
    install.packages("ASRgenomics", repos="https://cloud.r-project.org")  
    suppressPackageStartupMessages(require(ASRgenomics))
  }
 # 0,1,2 kodlu genotip veri dosyasının okunması ve yapısı
  setwd("D:/gwasbook/data/cattle")
  cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

# Kalite kontrolü
 filteredGeno <- qc.filtering(M = geno, na.string = "NA",
   base = FALSE, ref = NULL,
   marker.callrate = 0.2, ind.callrate = 0.2, maf = 0.05, 
   heterozygosity = 0.95, Fis = 1, 
   impute = FALSE, plots = TRUE)
# Kalite kontrol grafikleri
 filteredGeno$plot.missing.ind
 filteredGeno$plot.missing.SNP
 filteredGeno$plot.maf
 filteredGeno$plot.heteroz
 filteredGeno$plot.Fis

# Kalite kontrolünden geçmiş temiz veri
 cleanGeno <- filteredGeno$M.clean
 dim(cleanGeno)
# 0.9 korelasyon eşiğine göre LD budaması
 prunedGeno <- snp.pruning(
   M = cleanGeno,
   map = NULL,
   marker = NULL,
   chrom = NULL,
   pos = NULL,
   method = c("correlation"),
   criteria = c("callrate", "maf"),
   pruning.thr = 0.90,
   by.chrom = FALSE,
   window.n = 50,
   overlap.n = 5,
   iterations = 10,
   seed = NULL,
   message = TRUE
 )
# LD budaması yapılmış Genotip ve map verisi
 map <- prunedGeno$map
 geno <- prunedGeno$Mpruned
 dim(geno)
 dim(geno)
[1]    71 27849

# Kalite kontrolünden geçen ve budanan verinin diske kaydedilmesi
 write.table(geno, "cattleqc.dat", sep="\t",
   row.names=TRUE, col.names=TRUE, quote=TRUE)
 write.table(map, "cattleqc.map", sep="\t",
   row.names=TRUE, col.names=TRUE, quote=TRUE)




# Örnek 6.48: KING ile genomik kalite kontrolü 1
#
 setwd("D:/gwasbook/data/cattle")
 system("king -b cattle.bed --bySNP")
 qcStats <- read.table("kingbySNP.txt", header=TRUE)
 str(qcStats)


# Örnek 6.49: KING ile genomik kalite kontrolü 2
#
 setwd("D:/gwasbook/data/cattle")
 system("king -b cattle.bed --cluster --bySNP")
 qcStats <- read.table("kingbySNP.txt", header=TRUE)
 str(qcStats)


# Örnek 6.50: KING ile genomik kalite kontrolü 3
#
 setwd("D:/gwasbook/data/cattle")

 system("king -b cattle.bed --bysample")
 qcStats <- read.table("kingbySample.txt", header=TRUE)
 str(qcStats)


# Örnek 6.51: KING ile genomik kalite kontrolü 4
#
 setwd("D:/gwasbook/data/cattle")
 kingCmd <- "king -b cattle.bed --autoQC "
 kingCmd <- paste(kingCmd, "--callrateM 0.95 --callrateN 0.95 --cpus 5")
 system(kingCmd)


# Örnek 6.52: Mısır bitkisi fenotip verisinde kalite kontrolü
# rTassel paketini kur
 options(java.parameters = c("-Xmx12g", "-Xms12g"))
 suppressPackageStartupMessages(installed <- require(rTASSEL))
 if(!installed) {
   if(!requireNamespace("devtools", quietly=TRUE))
     install.packages("devtools", repos="https://cloud.r-project.org")
   devtools::install_bitbucket("bucklerlab/rTASSEL", ref="master",
     build_vignettes=FALSE)
   suppressPackageStartupMessages(library(rTASSEL))  
 }

# Çalışma klasörünü seç
 setwd("D:/gwasbook/data/rtassel")

# Fenotip dosyasını oku
 phenoFile  <- system.file("extdata","mdp_traits.txt", package="rTASSEL")
 maizePheno <- read.table(phenoFile, head=TRUE)

 str(maizePheno)
 head(maizePheno)
# İlk sütun başlığını düzelt
 colnames(maizePheno)[1] <- "Variety"
 head(maizePheno, 3)

# Eksik fenotipleri bul ve temizle
 missIdx <- which(maizePheno$EarHT == -999)
 missIdx <- c(missIdx, which(maizePheno$EarDia == -999))
 missIdx <- c(missIdx, which(maizePheno$dpoll == -999))
 maizePhenoQc <- maizePheno[-c(missIdx),]
 head(maizePhenoQc)


# Örnek 6.53: EarHT fenotipi için normallik testi
# Bağımlılık – Kod 6.2, Örnek 6.52
#
# Shapiro-Wilk testi
 shapiro.test(maizePhenoQc$EarHT)
# Normallik kontrolü için grafikleri çiz
 diagPlots(maizePhenoQc$EarHT, trname="EarHT", color="gray")


# Örnek 6.54: EarHT fenotipinin normalleştirilmesi
# Bağımlılık – Kod 6.2, Örnek 6.52
#
# Max-Min normalleştirmesi
 minEarHT <- min(maizePhenoQc$EarHT)
 maxEarHT <- max(maizePhenoQc$EarHT)
 maizePhenoQc$EarHTN <- 
   (maizePhenoQc$EarHT-minEarHT) / (maxEarHT-minEarHT)
 head(maizePhenoQc)
 maizePhenoQc$EarHTN <- scale(maizePhenoQc$EarHT)

# Örnek 6.55: EarHTnormal fenotipi için normallik testi
# Bağımlılık - Örnek 6.54
#
 shapiro.test(maizePhenoQc$EarHTN)
 diagPlots(maizePhenoQc$EarHTN)

# Örnek 6.56: EarDia fenotipi için normallik testi
# Bağımlılık - Örnek 6.52
#
 shapiro.test(maizePhenoQc$EarDia)

 diagPlots(maizePhenoQc$EarDia, trname="EarDia", color="gray")

# Örnek 6.57: dpoll fenotipi için normallik testi
# Bağımlılık - Örnek 6.52
#
 shapiro.test(maizePhenoQc$dpoll)
 diagPlots(maizePhenoQc$dpoll, trname="Dpoll", color="gray")


# Örnek 6.58: Ters normal dönüşüm uygulaması
# Bağımlılık – Kod 6.3
#
# Normal dağılmayan veri benzetimi
# 1-serbestlik dereceli Ki-kare dağılışı 
 y1 <- rchisq(n=100, df=1)
# Poisson dağılışı
 y2 <- rpois(100, lambda=4)

# INT normalleştirmesi uygula
 z1 <- invnormtrans(y1)
 z2 <- invnormtrans(y2)

# y ve z yoğunluk grafiklerini çiz
 opar <- par(mfrow=c(2,2))
 plot(density(y1), lwd=2, col="blue", ylab="Yoğunluk", main="y1 PDF")
 plot(density(y2), lwd=2, col="blue", ylab="Yoğunluk", main="y2 PDF")
 plot(density(z1), lwd=2, col="blue", ylab="Yoğunluk", main="z1 PDF")
 plot(density(z2), lwd=2, col="blue", ylab="Yoğunluk", main="z2 PDF")
 par(opar)



# Örnek 6.59: EarHT fenotipi için INT normalleştirmesi
# Bağımlılık – Kod 6.2, 6.3, Örnek 6.52
#
 maizePhenoQc$EarHTINT <- invnormtrans(maizePhenoQc$EarHT)
#
 shapiro.test(maizePhenoQc$EarHTINT)
 diagPlots(maizePhenoQc$EarHTINT, trname="EarHT Normal", color="gray")



# Örnek 6.60: Aykırı değerlerin bulunması
# Bağımlılık – Kod 6.4, Örnek 6.54
# 
 outliersEarHT <- findOutliers(maizePhenoQc$EarHT, plot=T)
# Aykırı gözlemlerin indisleri
 outliersEarHT
# Aykırı gözlemlerin değerleri
 maizePhenoQc$EarHT[outliersEarHT]


# Örnek 6.61: Aykırı değerlerin temizlenmesi
# Bağımlılık – Kod 6.5, Örnek 6.54
#
 EarHT <- removeOutliers(maizePhenoQc$EarHT)
 outliersEarHT <- findOutliers(filteredEarHT, plot=T, col="skyblue")


# Örnek 6.62: MaCH programı ile SNP impütasyona dair terminal kod örnekleri
mach -d xyz.dat -p xyz.ped -h hapmap.haplos -s hapmap.snps
 --rounds 50 --greedy --geno

mach -d xyz.dat -p xyz.ped -h hapmap.haplos -s hapmap.snps 
 --rounds 500 --states 200 --geno

mach -d xyz.dat -p xyz.ped -h hapmap.haplos -s hapmap.snps
 --rounds 500 --states 200 --weighted --geno


# Örnek 6.63: Merkez ölçüleriyle genotip imputasyonu
# Bağımlılık – Kod 6.6
#
# Verinin okunması ve hazırlanması
 setwd("D:/gwasbook/data/cattle")

# PLINK ile temel kalite kontrolü
 plinkCmd <- "plink --file cattle --cow" 
 plinkCmd <- paste(plinkCmd, "--geno 0.05 --hwe 0.00001 --maf 0.02")
 plinkCmd <- paste(plinkCmd, "--recodeA --out cattlesnp")
 system(plinkCmd)

# 0,1,2 kodlu genotip veri dosyasının okunması ve yapısı
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- cattleGeno[, -c(1:6)]
 misGeno <- geno 
 set.seed(123)
 idxSNP <- sample(1:ncol(misGeno), 1000)
 for(j in idxSNP){
   idxSample <- sample(1:nrow(misGeno), 1)
   misGeno[idxSample, j] <- NA
 }

# Eksik genotiplerin satır ve sütun indisleri ve değerleri
 misTable <- which(is.na(misGeno), arr.ind=TRUE)
 head(misTable)
# Eksik genotiplerin vektörel indisleri
 misIdx <- which(is.na(misGeno))
 head(misIdx)
# Genotip tamamlama
 impMeanCattleGeno <- genImp(misGeno, method="mean")
 impMedianCattleGeno <- genImp(misGeno, method="median")
 impModeCattleGeno <- genImp(misGeno, method="mode")
 impSampleCattleGeno <- genImp(misGeno, method="sample")
 impRandCattleGeno <- genImp(misGeno, method="rand")
 impCustomCattleGeno <- genImp(misGeno, method="custom", custval=2)

# Gerçek değerler
 trueGenotypes <- geno[misTable]
 head(trueGenotypes)
# Tamamlanmış değerler
 head(impMeanCattleGeno[misTable])
 head(impMedianCattleGeno[misTable])
 head(impModeCattleGeno[misTable])
 head(impSampleCattleGeno[misTable])
 head(impRandCattleGeno[misTable])
 head(impCustomCattleGeno[misTable])


# Örnek 6.64: mice ile genotip imputasyonu
# Bağımlılık – Örnek 6.63
#
# mice paketinin kurulması
 suppressPackageStartupMessages(installed <- require(mice))
 if (!installed) {
   install.packages("mice", repos="https://cloud.r-project.org")
   suppressPackageStartupMessages(require(mice))
 }
# Genotip verisinin küçültülmesi ve eksik değer ekleme
 set.seed(123)
 geno <- cattleGeno[, sample(7:ncol(cattleGeno), 100)]
 idxSNP <- sample(1:ncol(geno), 5, replace=TRUE)
 misGeno <- geno
 for(j in idxSNP){
   misGeno[sample(1:nrow(misGeno),1), j] <- NA
 }

# Eksik Genotip sayısı
 sum(is.na(misGeno))

# Eksik genotiplerin satır ve sütun numaraları
 misTable <- which(is.na(misGeno), arr.ind=TRUE)
 misTable

# Eksik genotiplerin gösterilmesi
 unname(misGeno[misTable[,1], misTable[,2]])                

# Mice PMM yöntemiyle eksik genotiplerin tamamlanması
 impRes <- mice(misGeno, method="pmm")
 impPmmCattleGeno <- complete(impRes)

# Tamamlanmış veride eksik genotip sayısının kontrol edilmesi
 sum(is.na(impPmmCattleGeno))

# Gerçek değerler
 trueGenotypes <- geno[misTable]
 head(trueGenotypes)

# Tamamlanmış değerler
 head(impPmmCattleGeno[misTable])


# Örnek 6.65: rrBLUP ile genotip tamamlama
# Bağımlılık – Örnek 6.64
#
 suppressPackageStartupMessages(installed <- require(rrBLUP))
 if (!installed) {
   install.packages("rrBLUP", repos="https://cloud.r-project.org")
   suppressPackageStartupMessages(require(rrBLUP))
 }
 impRes <- A.mat(misGeno, impute.method="mean", return.imputed=T) 
 impRrBlupMeanCattleGeno <- impRes$imputed 
 head(impRrBlupMeanCattleGeno[misTable])

 impRes <- A.mat(misGeno, impute.method="EM", return.imputed=T) 
 impRrBlupEMCattleGeno <- impRes$imputed 
 head(impRrBlupEMCattleGeno[misTable])


# Örnek 6.66: rMVP ile genotip tamamlama
#
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")
   suppressPackageStartupMessages(require(rMVP))
 }
# PLINK BED dosyasını MVP formatına çevir
 library(rMVP)
 setwd("D:/gwasbook/data/cattle")
 MVP.Data(
   fileBed = "cattle",
   out = "cattle",
   ncpus = 8
 )

 MVP.Data.impute(
   mvp_prefix = "cattle",
   out = "impCattle",
   method = "Major",
   ncpus = 1,
   verbose = TRUE
 )



# Örnek 6.67: Genotip tamamlama yöntemlerinin karşılaştırması
# Bağımlılık – Kod 6.7, Örnek 6.59
#
 suppressPackageStartupMessages(installed <- require(mice))
 if (!installed) {
   install.packages("mice", repos="https://cloud.r-project.org")
   suppressPackageStartupMessages(require(mice))
 }

# 0,1,2 kodlu genotip veri dosyasının okunması ve yapısı
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)

# Eksik genotip oluştur
 set.seed(1)
 geno <- cattleGeno[, sample(7:ncol(cattleGeno), 200)]
 idxSNP <- sample(1:ncol(geno), 10, replace=TRUE)
 misGeno <- geno
 for(j in idxSNP){
   misGeno[sample(1:nrow(misGeno),1), j] <- NA
 }

# Toplam eksik genotip sayısı
 sum(is.na(misGeno))
[1] 10

# Eksik genotiplerin matristeki konumları
 misTable <- which(is.na(misGeno), arr.ind=TRUE)
 misTable

 unname(misGeno[misTable[,1], misTable[,2]])                

# Eksik genotiplerin CART ile tamamlanması
 impCartCattleGeno <- complete(mice(geno, method="cart"))
 predGenotypes <- impCartCattleGeno[misTable]

# Yanılgı matrisi
 table(trueGenotypes, predGenotypes)
# Gerçek genotipler
 trueGenotypes <- geno[misTable]

# Başarım ölçütleri
 perfMetrics(trueGenotypes, predGenotypes)
$cm
$classmetrics
$macrometrics
$micrometrics
$majoritymetrics
$Kappa
# CART, PMM ve RF yöntemlerinin karşılaştırılması
#
 set.seed(28)
 geno <- cattleGeno[, sample(7:ncol(cattleGeno), 100)]
 idxSNP <- sample(1:ncol(geno), 5, replace=TRUE)
 misGeno <- geno
 for(j in idxSNP){
   misGeno[sample(1:nrow(misGeno), 1), j] <- NA
 }
 misTable <- which(is.na(misGeno), arr.ind=TRUE)
 trueGenotypes <- geno[misTable]
 trueGenotypes

 impMethods <- c("pmm", "rf", "cart")
 perfMat <- as.data.frame(matrix(NA, nrow=length(impMethods), ncol=7))
 rownames(perfMat) <- impMethods
 colnames(perfMat) <- c("Accuracy","Macro Precision",
   "Macro Recall", "Macro F1", "Micro Precision","Micro Recall",
   "Micro F1")
 for(i in 1:length(impMethods)){
   impGeno <- complete(mice(misGeno, method=impMethods[i]), verbose=F)
   predGenotypes <- impGeno[misTable]
   predGenotypes
   metrics <- perfMetrics(trueGenotypes, predGenotypes)
   macmet <- metrics$macrometrics
   micmet <- metrics$micrometrics[2:4]
   acc <- metrics$classmetrics[1,1]
   perf <- c(acc, macmet, micmet)
   perfMat[i,] <- perf
 }

 t(perfMat)

# Örnek 6.68: LEA paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(LEA))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("LEA")
   suppressPackageStartupMessages(require(LEA))
 }


# Örnek 6.69: Genotip verisinin okunması ve hazırlanması
# Bağımlılık – Örnek 6.68
#
# Verinin okunması ve hazırlanması
 setwd("D:/gwasbook/data/cattle")
# PLINK ile temel kalite kontrolü
 plinkCmd <- "plink --file cattle --cow" 
 plinkCmd <- paste(plinkCmd, "--geno 0.05 --hwe 0.00001 --maf 0.02")
 plinkCmd <- paste(plinkCmd, "--recodeA --out cattlesnp")
 system(plinkCmd)

# 0,1,2 kodlu genotip veri dosyasının okunması ve yapısı
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 str(cattleGeno)

# Birey ve populasyon adlarını sonra kullanmak için kaydet
 popNames <- cattleGeno[,1]
 sampleNames <- cattleGeno[,2]
 save(sampleNames, popNames, file="popInfo.RData")

# Sadece SNP verilerini alma
 cattleGeno <- cattleGeno[,-c(1:6)]
 str(cattleGeno)
 dim(cattleGeno)
# SNP verisinden LEA için lfmm ve geno dosyaları oluşturma
 LEA::write.lfmm(cattleGeno, "cattle.lfmm")
 LEA::write.geno(cattleGeno, "cattle.geno")
# ped2geno(input.file="cattle.ped", force = TRUE) #ped'den geno yapma


# Örnek 6.70: SNMF analizinin yapılması
# Bağımlılık – Örnek 6.69
#
# Populasyon yapısının incelenmesi
 cattleProject <- NULL
 cattleProject <- snmf("cattle.geno", ploidy=2,
   project = "new",
   K = 1:5, 
   I = 1500,
   entropy = TRUE, alpha = 10, 
   tolerance = 0.00001, percentage = 0.05, 
   repetitions = 5, iterations = 200,
   CPU = 7,
   seed = -1)


# Örnek 6.71: Proje dosyasının okunması ve kullanılması
# Bağımlılık – Örnek 6.69
#
 show(cattleProject)

 summary(cattleProject)

$repetitions
$crossEntropy


# Örnek 6.72: Proje dosyasının okunması ve kullanılması
# Bağımlılık – Örnek 6.71
#
 setwd("D:/gwasbook/data/cattle")
 cattleProject <- load.snmfProject("cattle.snmfProject")

 optK <- which.min(summary(cattleProject)$crossEntropy[3,])
 optK
 plot(cattleProject, col="blue", pch = 19, cex = 1.2, type="b")


# Örnek 6.73: Q matrisinin elde edilmesi ve kaydedilmesi
# Bağımlılık – Örnek 6.70
#
# Belli bir K için en iyi çalıştırmanın bulunması
 bestRun <- which.min(cross.entropy(cattleProject, K=optK))
 bestRun

# Q matrisinin elde edilmesi
 Q <- Q(cattleProject, K=optK, run=bestRun)
 colnames(Q) <- paste0("K", 1:optK)
 head(Q)
# Alt populasyondaki bireyler
 load("popInfo.Rdata")
 subPops <- apply(Q, 1, which.max)
 subPops <- data.frame(pop=popNames, predpop=subPops)
 head(subPops)
 table(subPops)
# Populasyon yapısının görselleştirilmesi
 colPal <- c("tomato", "dodgerblue", "orange", "olivedrab", "pink")
 plot(Q, pch=19, cex=1.2, col=colPal[as.factor(popNames)],
   main=paste0("Populasyon yapısı (K=", optK,")"))
 legend("topright", col=colPal, pch=19, cex=1.4, legend=unique(popNames))

# Q matrisinin kaydedilmesi
 write.table(Q, file="cattleQmatrix.dat", sep="\t", 
   col.names=FALSE, row.names=FALSE, quote=FALSE)


# Örnek 6.74: Q matrisinin görselleştirilmesi
# Bağımlılık – Örnek 6.68, 6.71
#
 load("popInfo.Rdata")
 colPal <- c("tomato", "dodgerblue", "orange", "olivedrab", "pink")

 barchart(cattleProject, K=optK, run=bestRun,
   border = NA, space = 0,
   col = colPal,
   xlab = "Örneklemler",
   ylab = "Ortak soy yüzdesi",
   main = "Karışım grafiği") - bp
 axis(1, at = 1:length(bp$order),
  labels = sampleNames[bp$order], las=2,
  cex.axis = 0.5)


# Örnek 6.75: G matrisinin oluşturulması
# Bağımlılık – Örnek 6.70
#
# Atasal genotip frekansları matrisi (G)
 G <- G(cattleProject, K=optK, run=bestRun)
 colnames(G) <- paste0("Pop.",1:optK)
 head(G)
# Atasal genotip frekansları  histogramı
 opar <- par(mfrow=c(1,3))
 for(i in 1:optK){
   hist(G[,i], xlab="Genotip frekansları", main=paste("Pop.",i))
 }
 par(opar) 


# Örnek 6.76: SNMF projelerinin yönetilmesi
# Bağımlılık – Örnek 6.69, 6.70
#
# Proje dışa aktarımı
 export.snmfProject("cattle.snmfProject")
# Proje içe aktarımı
 dir.create("tempDir", showWarnings=TRUE)
 cattleProject2 <- import.snmfProject("cattle_snmfProject.zip", "tempDir")
# Proje birleştirme
 cattleProject3 <- combine.snmfProject(
   "cattle.snmfProject", "tempDir/cattle.snmfProject")
# Proje silme
 remove.snmfProject("tempDir/cattle.snmfProject")

# Örnek 6.77: Temel Bileşenler Analizi
# Bağımlılık – Örnek 6.70
#
 suppressPackageStartupMessages(installed <- require(LEA))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("LEA")
   suppressPackageStartupMessages(require(LEA))
 }

 setwd("D:/gwasbook/data/cattle")
 cattlePCA <- LEA::pca(
   input.file="cattle.lfmm",
   #K=3,
   center=TRUE, scale=TRUE)


# Örnek 6.78: PCA sonuçlarının incelenmesi
# Bağımlılık – Örnek 6.77
#
 LEA::show(cattlePCA)
* pca class *
 summary(cattlePCA)
Importance of components:
 pcProjs <- cattlePCA$projections
 colnames(pcProjs) <- paste0("PC",1:ncol(pcProjs))
 pcProjs[1:5, 1:5]
 pcEvecs <- cattlePCA$eigenvectors
 colnames(pcEvecs) <- paste0("PC",1:ncol(pcEvecs))
 pcEvecs[1:5, 1:5]
 pcEvals <- cattlePCA$eigenvalues
 head(pcEvals)
 pcSds <- cattlePCA$sdev
 head(pcSds)


# Örnek 6.79: Kayşat grafiği
# Bağımlılık – Örnek 6.78
#
 plot(cattlePCA, type="b",
   col="dodgerblue", pch=19, lwd=2, cex=1.2,
   xlab="PCs", ylab="Özdeğerler", main="Kayşat Grafiği")


# Örnek 6.80: Kayşat grafiğinde dirsek noktasının bulunması
# Bağımlılık – Örnek 6.78
#
 suppressPackageStartupMessages(installed <- require(PCAtools))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("PCAtools")
   suppressPackageStartupMessages(require(PCAtools))
 }
 nPC <- PCAtools::findElbowPoint(pcEvals)
 nPC
 plot(cattlePCA, type="b",
   col="dodgerblue", pch=19, lwd=2, cex=1.2,
   xlab="PCs", ylab="Özdeğerler", main="Kayşat Grafiği")
 abline(v=nPc, col="red", lty=3)


# Örnek 6.81: Kümülatif varyans eşiğine göre PC sayısı
# Bağımlılık – Örnek 6.78
#
 nPC <- which(summary(cattlePCA)[3,] = 0.8)[1]
 nPC
 plot(summary(cattlePCA)[3,], pch=19, col="dodgerblue", 
   xlab="PCs", ylab="Kümülatif %", main="Kümülatif varyans")
 abline(h=0.8, col="red", lty=2, lwd=2)
 abline(v=optPC, col="red", lty=2, lwd=2)


# Örnek 6.82: Tracy-Widom testine göre PC sayısı 
# Bağımlılık – Örnek 6.78
#
 cattleTW <- LEA::tracy.widom(cattlePCA)
 str(cattleTW)
 alpha <- 0.001
 nPC <- length(which(cattleTW$pvalues < alpha))
 nPC
# Bileşenlerce açıklanan varyans yüzdesi grafiği
 plot(cattleTW$percentage, type="b", 
  pch = 19, col = "dodgerblue", cex = 1.2,
  xlab="PCs", ylab="Varyans %", main="Tracy-Widom")
 abline(v=nPC, lwd=2, lty=3, col="red")


# Örnek 6.83: PC'nin kaydedilmesi ve populasyon yapısı
# Bağımlılık – Örnek 6.78
#
 P <- pcEvecs[,1:nPC]
 head(P)
# P matrisinin kaydedilmesi
 write.table(P, file="cattlePmatrix.dat", sep="\t", 
   col.names=FALSE, row.names=FALSE, quote=FALSE)

 load("popInfo.Rdata")
 colPal <- c("tomato", "dodgerblue", "forestgreen", "olivedrab", "pink")
 plot(P, pch=19, cex=1.2, col=colPal[as.factor(popNames)],
   main="Populasyon yapısı")
 legend("bottomleft",col=colPal, pch=19, cex=1.4,legend=unique(popNames))
 abline(v=0, h=0, lty=3, lwd=2, col="gray")

# Paralel koordinat grafiği
 MASS::parcoord(pcEvecs[,1:10], col=colPal[as.factor(popNames)])



# Örnek 6.84: PCAtools ile Temel Bileşenler Analizi
# Bağımlılık – Örnek 6.68, 6.69
#
 suppressPackageStartupMessages(installed <- require(PCAtools))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("PCAtools")
   suppressPackageStartupMessages(require(PCAtools))
 }
# Genotip verisini oku
 cattleGeno <- LEA::read.geno("cattle.geno")
 cattleGeno <- t(cattleGeno)

# Üstveri (metadata) 
 load("popinfo.Rdata")
 cattleMetadata <- data.frame(Group=popNames)
 rownames(cattleMetadata) <- colnames(cattleGeno) <- sampleNames

# PCA analizi
 cattlePCA <- PCAtools::pca(
   mat = cattleGeno,
   metadata = cattleMetadata,
   center = TRUE,
   scale = FALSE,
   rank = NULL,
   #removeVar = 0.1,
   transposed = FALSE,
   #BSPARAM = ExactParam()
 )


# Örnek 6.85: PCA sonuçlarının incelenmesi
# Bağımlılık – Örnek 6.84
#
 names(cattlePCA)
# Bileşenler
 length(cattlePCA$components)
 PCs <- getComponents(cattlePCA)
 head(PCs)
# Varyanslar
 varPCs <- getVars(cattlePCA)
 head(varPCs)
# Kümülatif varyans
 cumVarPCs <- cumsum(varPCs)
 head(cumVarPCs)
# Yüklemeler
 loadPCs <- getLoadings(cattlePCA)
 loadPCs[1:3, 1:5]


# Örnek 6.86: Optimal PC sayısının saptanması ve PC'lerin kaydedilmesi
# Bağımlılık – Örnek 6.84
#
 nPC <- PCAtools::findElbowPoint(cattlePCA$variance)
 nPC
# Kayşat ve kümülatif varyans grafiği
 screeplot(cattlePCA, hline=80,
  axisLabSize = 12, titleLabSize = 16,
  xlab="PCs", ylab="Açıklanan Varyans %", title="Kayşat grafiği")


# Örnek 6.87: PCA sonuçlarının görselleştirilmesi
# Bağımlılık – Örnek 6.84
#
 pairsplot(cattlePCA, triangle = TRUE)

 biplot(cattlePCA$loadings[,c(1:2)], 
   colby='Group', shape='Group',
   colkey=c(SIM="forestgreen", JER="dodgerblue", HOL="red"),
   shapekey = c(SIM=19, JER=19, HOL=19),
   max.overlaps=100,
   legendPosition = "bottom", legendLabSize = 16, legendIconSize = 6.0,
   hline=0, vline=0)

 library("ggalt")
 biplot(cattlePCA, 
   colby='Group', shape='Group',
   colkey=c(SIM="forestgreen", JER="dodgerblue", HOL="red"),
   shapekey = c(SIM=19, JER=19, HOL=19),
   encircle = TRUE, encircleFill = TRUE,
   legendPosition = "left", legendLabSize = 16, legendIconSize = 8.0,
   hline=0, vline = c(-25, 0, 25), max.overlaps=0)

 plotloadings(cattlePCA, drawConnectors=TRUE)
 eigencorplot(cattlePCA, metavars = c('pcvar'))



# Örnek 6.88: PLINK ile PCA
 setwd("D:/gwasbook/data/cattle")
 plinkCmd <- "plink --bfile cattle --chr-set 29 "
 plinkCmd <- paste(plinkCmd, "--pca 20 --out cattle")
 system(plinkCmd)

# PCA analizi sonucunu oku 
 eigenvecs <- read.table("cattle.eigenvec")
 eigenvecs[1:5, 1:6]

 eigenvalues <- as.matrix(read.table("cattle.eigenval"))

# Optimum bileşen sayısı
 nPC <- PCAtools::findElbowPoint(eigenvalues)
 nPC
 opar <- par(mfrow=c(1,2))
# Kayşat grafiği
 plot(x = seq(1:length(eigenvalues)), y = eigenvalues,
    type = "l", col="dodgerblue", lwd=2,
    xlab = "Temel Bileşenler", ylab = "Varyans", main="Kayşat grafiği")
 abline(v=nPC, col="red", lty=3)

 colPal1 <- c("red", "deepskyblue",  "green", 
   "orange", "gray30", "dodgerblue")
 plot(eigenvecs$V3, eigenvecs$V4, col=colPal1[as.factor(eigenvecs$V1)],
   xlab="PC1", ylab="PC2", main="PCA grafiği (PC1 vs PC2)")
 abline(h=0, lty=3, lwd=2, col="gray")
 abline(v=0, lty=3, lwd=2, col="gray")
 par(opar)

# GWAS analizi için PC matrisini oluştur ve kaydet
 pcMat <- eigenvecs[,-c(1:2)]
 pcMat[1:5, 1:6]
 write.table(pcMat, file="cattle.pca", sep="\t",
   row.names=FALSE, col.names=FALSE, quote=FALSE)


# Örnek 6.89: KING ile PCA
 setwd("D:/gwasbook/data/cattle")
 kingCmd <- "king -b cattle.bed --pca --pcs 20"
 system(kingCmd)

# PCA analizi sonucunu oku 
 pca <- read.table("kingpc.txt", header=TRUE)
 pca[1:5, 1:10]
 colPal <- c("red", "deepskyblue",  "green", 
   "pink", "green", "dodgerblue")
 plot(pca$PC1, pca$PC2, col=colPal[as.factor(pca$FID)],
   xlab="PC1", ylab="PC2", main="PCA grafiği (PC1 vs PC2)")
 abline(h=0, lty=3, lwd=2, col="gray")
 abline(v=0, lty=3, lwd=2, col="gray")


# Örnek 6.90: rMVP ile GWAS analizi için PCA
#
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }

# PLINK BED dosyasını MVP formatına çevir
 setwd("D:/gwasbook/data/cattle")
 MVP.Data(
   fileBed = file.path(paste0(getwd(),"/cattle")),
   out = "cattle",
   ncpus = 8
 )

# PCA analizi yap
 MVP.Data.PC(
   filePC = TRUE,
   mvp_prefix = "cattle",
   out = "cattle",
   pcs.keep = 5,
   priority = "speed",
   sep = "\t",
   cpus = 8,
   verbose = TRUE
 )



# Örnek 6.91: PC dosyasının okunması
# Bağımlılık: Örnek 6.90
# 
# Büyük matris formatındaki PC dosyasını oku
 cattlePCA <- attach.big.matrix("cattle.pc.desc")
 cattlePCA[1:3, 1:5]
 nPC <- 3
# PC grafiğini çiz
 colPal2 <- c("red", "orange", "green", 
   "deepskyblue", "gray30", "dodgerblue")

 MVP.PCAplot(PCA=cattlePCA,
   Ncluster=nPC, class=NULL,
   col=colPal2, pch=19, 
   file.output=FALSE, verbose=FALSE)


# Örnek 6.92: RPCA ile temel bileşenler analizi
# Bağımlılık – Örnek 6.69
#
 suppressPackageStartupMessages(installed <- require(rsvd))
 if (!installed) {
   install.packages("rsvd", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rsvd))
 }
 suppressPackageStartupMessages(installed <- require(LEA))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("LEA")
   suppressPackageStartupMessages(require(LEA))
 }
# Genotip verisini oku
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- LEA::read.geno("cattle.geno")

 cattleRPCA <- rpca(
    A=cattleGeno,
    k = NULL,
    center = TRUE, scale = TRUE,
    retx = TRUE,
    p = 10, q = 2,
    rand = TRUE
 )

 names(cattleRPCA) 
 summary(cattleRPCA)
 
# Kayşat grafiği
 ggscreeplot(
  rpcaObj=cattleRPCA, type="ratio") # "var", "cum", "eigenvals" olabilir

 ggindplot(
  rpcaObj=cattleRPCA,
  pcs = c(1, 2),
  groups = NULL,
  alpha = 0.6,
  ellipse = TRUE,
  alpha.ellipse = 0.2,
  ind_labels = TRUE,
  ind_labels.names = NULL
 )

# Korelasyon grafiği 
 ggcorplot(
  rpcaObj=cattleRPCA,
  pcs = c(1, 2),
  loadings = TRUE,
  var_labels = FALSE,
  var_labels.names = NULL,
  alpha = 1,
  top.n = NULL
)


# Örnek 6.93: Klasik MDS ile populasyon yapısı analizi
# Bağımlılık – Örnek 6.69
#
 suppressPackageStartupMessages(installed <- require(PCAtools))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("PCAtools")
   suppressPackageStartupMessages(require(PCAtools))
 }

# Genotip verisini oku
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- LEA::read.geno("cattle.geno")

# Üstveri (birey ve populasyon adları) dosyasını oku 
 load("popInfo.Rdata")

 rownames(cattleGeno) <- sampleNames

# Bireyler arası Öklid uzaklıkları hesapla
 distCattle <- dist(cattleGeno, method="euclidean") 

# MDS uygula
 cattleMDS <- cmdscale(distCattle, eig=TRUE, k=4) 


# Örnek 6.94: MDS sonuçlarının incelenmesi ve görselleştirilmesi
# Bağımlılık – Örnek 6.69, 6.93
#
 names(cattleMDS) 
 head(cattleMDS$points)
 head(cattleMDS$eig, 4)
 cattleMDS$GOF
# MDS grafiği çiz
 load("popInfo.Rdata")
 colPal <- c("tomato", "dodgerblue", "forestgreen", "orange",  "pink")
 plot(cattleMDS$points[,1:2], pch=19,
   cex=1, col=colPal[as.factor(popNames)],
   xlab="Koordinat 1", ylab="Koordinat 2",
   main="MDS ile Populasyon Yapısı")
 abline(v=0, h=0, lty=2, lwd=2)
 legend("topleft",col=colPal, pch=19, cex=1.4,legend=unique(popNames))
# text(x, y, labels = rownames(cattleGeno), 
# cex=0.8, col=colPal[as.factor(popNames)],)

# MDS koordinatlarının dosyaya kaydedilmesi
 write.table(cattleMDS$points, "cattlemds.dat", sep="\t",
   col.names=FALSE, row.names=FALSE, quote=FALSE) 


# Örnek 6.95: PLINK ile MDS
# Bağımlılık – Örnek 6.69
#
 setwd("D:/gwasbook/data/cattle")
 system("plink --file cattle --cluster --cow --mds-plot 4 --out cattle")
 cattleMDS2 <- read.table("cattle.mds", header=T)

 load("popInfo.Rdata")
 colPal <- c("tomato", "dodgerblue", "forestgreen", "orange",  "pink")
 plot(cattleMDS2$C1, cattleMDS2$C2,
  pch=19, cex=1, col=colPal[as.factor(popNames)],
   xlab="Koordinat 1", ylab="Koordinat 2",
   main="PLINK MDS ile Populasyon Yapısı")
 abline(v=0, h=0, lty=2, lwd=2)
 legend("topleft",col=colPal, pch=19, cex=1.4,legend=unique(popNames))


# Örnek 6.96: KING ile MDS
# Bağımlılık – Örnek 6.69
#
 setwd("D:/gwasbook/data/cattle")
 system("king -b cattle.bed --mds")

 cattleMDS3 <- read.table("kingpc.txt", header=T)
 cattleMDS3[1:5, 1:10]
 colPal <- c("tomato", "dodgerblue", "forestgreen", "orange",  "pink")
 plot(cattleMDS3$PC1, cattleMDS3$PC2,
  pch=19, cex=1, col=colPal[as.factor(cattleMDS3$FID)],
   xlab="Koordinat 1", ylab="Koordinat 2",
   main="KING MDS ile Populasyon Yapısı")
 abline(v=0, h=0, lty=2, lwd=2)
 legend("bottomleft", col=colPal, pch=19,
   cex=1,legend=unique(cattleMDS3$FID))


# Örnek 6.97: t-SNE analizi
# Bağımlılık – Örnek 6.69
#
 suppressPackageStartupMessages(installed <- require(Rtsne))
 if (!installed) {
    install.packages("Rtsne", repos="https://cloud.r-project.org")
    require(Rstne)
 }
 suppressPackageStartupMessages(installed <- require(LEA))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("LEA")
   suppressPackageStartupMessages(require(LEA))
 }

# Genotip verisini oku
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- LEA::read.geno("cattle.geno")

# Üstveri (birey ve populasyon adları) dosyasını oku 
 load("popInfo.Rdata")
 rownames(cattleGeno) <- sampleNames
 pops <- unique(popNames)

# t-SNE analizi
 cattleTSNE <- Rtsne(
   X = cattleGeno, 
   dims = 2, 
   normalize = TRUE,
   is_distance = FALSE,
   check_duplicates = TRUE,
   initial_dims = 50,
   Y_init = NULL,
   pca = FALSE,
   partial_pca = FALSE,
   pca_center = TRUE,
   pca_scale = FALSE,
   perplexity=15, theta=0.5, 
   eta = 200, max_iter = 500,
   #stop_lying_iter = ifelse(is.null(Y_init), 250L, 0L),
   #mom_switch_iter = ifelse(is.null(Y_init), 250L, 0L),
   momentum = 0.5,
   final_momentum = 0.8,
   exaggeration_factor = 12,
   num_threads = 1,
   verbose=TRUE)


# Örnek 6.98: t-SNE sonuçlarının incelenmesi ve görselleştirilmesi
# Bağımlılık – Örnek 6.97
#
# t-SNE nesnesi bileşenleri
 names(cattleTSNE)
 head(cattleTSNE$Y)
# Renk paleti
 colPal <- c("forestgreen", "dodgerblue", "red", "skyblue", 
   "gold", "violet", "darkorchid", "slateblue", "forestgreen", 
   "violetred", "orange", "midnightblue", "grey31", "black")

# Populasyon yapısı grafiği
 opar <- par(mgp=c(2.5,1,0))
 plot(cattleTSNE$Y, t='n', asp=0.5, "cex.main"=2, "cex.lab"=1.5,
   main="t-SNE", xlab="Boyut 1", ylab="Boyut 2")
 text(cattleTSNE$Y, labels=popNames, col=colPal[as.factor(popNames)])
 abline(v=0, h=0, lty=3, lwd=2, col="gray")
 par(opar)

# Boyut değerlerini dosyaya kaydet
 write.table(cattleTSNE$Y, file="cattletsne.dat", sep="\t",
    col.names=F, row.names=F, quote=F)



# Örnek 6.99: t-SNE için uygun tereddüt değeri seçme
# Bağımlılık – Kod 6.8, Örnek 6.97
#
# Farklı perplexity değerleriyle deneme
# Renk paleti
 colPal <- c("forestgreen", "dodgerblue", "red", "skyblue", 
   "gold", "violet", "darkorchid", "slateblue", "forestgreen", 
   "violetred", "orange", "midnightblue", "grey31", "black")

 pps <- c(2, 5, 10, 15, 20, 30)
 sapply(pps, function(i) {
    tsnePerplexityTuning(pp=i,x=cattleGeno,
    colvec=colPal, labs=popNames)})


# Örnek 6.100: Umap analizi
# Bağımlılık – Örnek 6.69
#
 suppressPackageStartupMessages(installed <- require(umap))
 if (!installed) {
    install.packages("umap", repos="https://cloud.r-project.org")
    require(umap)
 }
 suppressPackageStartupMessages(installed <- require(LEA))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
      install.packages("BiocManager")
   BiocManager::install("LEA")
   suppressPackageStartupMessages(require(LEA))
 }

# Genotip verisini oku
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- LEA::read.geno("cattle.geno")

# Üstveri (birey ve populasyon adları) dosyasını oku 
 load("popInfo.Rdata")
 rownames(cattleGeno) <- sampleNames
 pops <- unique(popNames)

 cattleUMAP <- umap(
   d = cattleGeno,
   config = umap.defaults,
   method = "naive",
   preserve.seed = TRUE
 )


# Örnek 6.101: umap sonuçlarının incelenmesi ve görselleştirilmesi
# Bağımlılık – Örnek 6.100
#
 names(cattleUMAP)
 head(cattleUMAP$layout)
# Renk paleti
 colPal <- c("forestgreen", "dodgerblue", "red", "skyblue", 
   "gold", "violet", "darkorchid", "slateblue", "forestgreen", 
   "violetred", "orange", "midnightblue", "grey31", "black")

# Populasyon yapısı grafiği
 opar <- par(mgp=c(2.5,1,0))
 plot(cattleUMAP$layout, pch=19, asp=1, "cex.main"=2, "cex.lab"=1.5,
   col=colPal[as.factor(popNames)],
   main="UMAP", xlab="Boyut 1", ylab="Boyut 2")
 #text(cattleUMAP$layout,labels=popNames,col=colPal[as.factor(popNames)])
 abline(v=0, h=0, lty=3, lwd=2, col="gray")
 legend("topright",col=colPal, pch=19, cex=1.4,legend=unique(popNames))
 par(opar)

# Boyut değerlerini dosyaya kaydet
 write.table(cattleUMAP$layout, file="cattleumap.dat", sep="\t",
    col.names=F, row.names=F, quote=F)


# Örnek 6.102: umap parametre ayarlama
# Bağımlılık – Örnek 6.101

# Varsayılan parametre değerleri
 umap.defaults

# Parametre değerlerini değiştirme/ayarlama
 userParams <- umap.defaults
 userParams$n_neighbors <- 5
 userParams$min_dist <- 0.2

 userParams
 cattleUMAP2 <- umap(
   d = cattleGeno,
   config = userParams,
   method = "naive",
   preserve.seed = TRUE
 )
# Renk paleti
 colPal <- c("forestgreen", "dodgerblue", "red", "skyblue", 
   "gold", "violet", "darkorchid", "slateblue", "forestgreen", 
   "violetred", "orange", "midnightblue", "grey31", "black")

# Populasyon yapısı grafiği
 opar <- par(mgp=c(2.5,1,0))
 plot(cattleUMAP2$layout, pch=19, asp=1, "cex.main"=2, "cex.lab"=1.5,
   col=colPal[as.factor(popNames)],
   main="UMAP", xlab="Boyut 1", ylab="Boyut 2")
 #text(cattleUMAP2$layout,labels=popNames,col=colPal[as.factor(popNames)])
 abline(v=0, h=0, lty=3, lwd=2, col="gray")
 legend("topright",col=colPal, pch=19, cex=1.4,legend=unique(popNames))
 par(opar)


# Örnek 6.103: umap ile tahmin
# Bağımlılık – Örnek 6.102
#
 genotypes <- sample(0:2, 50* ncol(cattleGeno), replace=TRUE)
 newGeno <- matrix(genotypes, nrow=50, ncol=ncol(cattleGeno))

# Yeni veriyi projeksiyonla
 cattlePred <- predict(cattleUMAP, newGeno)

# Tahminleri göster
 head(cattlePred, 3)


# Örnek 6.104: Genotip verisini oku
# Bağımlılık – Kod 6.9
#
# Orijinal genotip verisini oku
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- cattleGeno[,7:ncol(cattleGeno)]
 rownames(geno) <- cattleGeno[,2]
 geno[1:5,1:2]
# Genotipleri normalleştir
 normGeno <- normalizegeno(g=geno)
 normGeno <- as.matrix(normGeno)
 normGeno[1:5, 1:2]

# Örnek 6.105: Van Raden yöntemi ile GRM
# Bağımlılık – Örnek 6.104
#
# GRM matrisini oluştur
 G <- normGeno %*% t(normGeno) / ncol(normGeno)
 G[1:5, 1:5]
# GRM matrisinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 pheatmap(as.matrix(G),
   cellheight = 6, cellwidth=6,
   border_color = "gray", cex=0.7,
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
 )

# GRM matrisinin dosyaya kaydedilmesi
 write.table(G, "cattlegrmvr.dat", col.names=F, row.names=F) 


# Örnek 6.106: Forni yöntemi ile GRM
# Bağımlılık – Kod 6.10, Örnek 6.104
#
# GRM matrisini oluştur
 G1 <- forniG(geno=geno, option=1)
 G1[1:5, 1:5]
 G2 <- forniG(geno=geno, option=2)
 G2[1:5, 1:5]
 G3 <- forniG(geno=geno, option=3)
 G3[1:5, 1:5]
# GRM matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(G1), main="GRM (Forni 1)",
   cellheight = 6, cellwidth=6,
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 pheatmap(as.matrix(G2),
   cellheight = 6, cellwidth=6, main="GRM (Forni 2)",
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 pheatmap(as.matrix(G3),
   cellheight = 6, cellwidth=6, main="GRM (Forni 3)",
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 par(opar)

# GRM matrislerinin dosyaya kaydedilmesi
 write.table(G1, "cattlegrmforni1.dat", col.names=F, row.names=F)
 write.table(G2, "cattlegrmforni2.dat", col.names=F, row.names=F)
 write.table(G3, "cattlegrmforni3.dat", col.names=F, row.names=F)


# Örnek 6.107: AGHmatrix ile eklemeli GRM
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
# SNP veri dosyasının okunması
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]
 geno[1:5,1:2]
# Van Raden yöntemiyle GRM
 grmVR <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", 
   maf=0.02, missingValue=NA)
 grmVR[1:5, 1:5]
# Yang yöntemiyle GRM
 grmYang <- Gmatrix(
   SNPmatrix=geno, method="Yang", 
   maf=0.02, missingValue=NA)
 grmYang[1:5, 1:5]

# GRM matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(grmVR), main="Eklemeli GRM (Van Raden)",
   cellheight = 6, cellwidth=6,
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 pheatmap(as.matrix(grmYang), main="Eklemeli GRM (Yang)",
   cellheight = 6, cellwidth=6,
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 par(opar)

# GRM matrislerinin dosyaya kaydedilmesi
 write.table(grmVR, "cattlegrmvr1.dat", col.names=F, row.names=F)
 write.table(grmYang, "cattlegrmyang.dat", col.names=F, row.names=F)


# Örnek 6.108: AGHmatrix ile dominans GRM
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
# SNP veri dosyasının okunması
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]
 geno[1:5,1:2]
# Su yöntemiyle GRM
 grmSu <- Gmatrix(
   SNPmatrix=geno, method="Su", 
   maf=0.02, missingValue=NA)
 grmSu[1:5, 1:5]

# Vitezica yöntemiyle GRM
 grmVitezica <- Gmatrix(
   SNPmatrix=geno, method="Vitezica", 
   maf=0.02, missingValue=NA)
 grmVitezica[1:5, 1:5]

# GRM matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(grmSu), main="Dominans GRM (Su)",
   cellheight = 6, cellwidth=6,
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 pheatmap(as.matrix(grmVitezica),
   cellheight = 6, cellwidth=6, main="Dominans GRM (Vitezica)",
   border_color = "white",
   scale = "none",
   cluster_cols = TRUE,
   cluster_rows = TRUE,
   show_rownames = FALSE,
   show_colnames = FALSE
 )
 par(opar)

# GRM matrislerinin dosyaya kaydedilmesi
 write.table(grmSu, "cattlegrmsu.dat", col.names=F, row.names=F)
 write.table(grmVitezica, "cattlegrmvitezica.dat",
   col.names=F, row.names=F)


# Örnek 6.109: AGHmatrix ile poliploidler için GRM
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
# SNP veri dosyasının okunması
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

# Ashraf (2016) yöntemiyle GRM
 grmOpVr1 <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", ploidy=2, 
   maf=0.02, missingValue=NA)
 grmOpVr1[1:5, 1:5]

# Ashraf (2016) yöntemiyle ploidi 4 alınarak GRM
 grmOpVr2 <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", ploidy=4, 
   maf=0.02, missingValue=NA)

# Endelman yöntemiyle GRM
 grmOpEndelman <- Gmatrix(
   SNPmatrix=geno, method="Endelman", ploidy=4, 
   maf=0.02, missingValue=NA)
 grmOpEndelman[1:5, 1:5]

# Slater ve ark. yöntemiyle tam otoploidi GRM
 grmOpSlater1 <- Gmatrix(
   SNPmatrix=geno, method="Slater", ploidy=4, 
   maf=0.02, missingValue=NA)
 grmOpSlater1[1:5, 1:5]

# Slater ve ark. yöntemiyle sözde otoploidi GRM
 grmOpSlater2 <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", ploidy=4, pseudo.diploid=TRUE,
   maf=0.02, missingValue=NA)
 grmOpSlater2[1:5, 1:5]
# Liu ve ark. yöntemiyle ağırlıklı GRM
 snpWeights <- runif(ncol(geno), 0.01, 0.5)
 grmOpLiu <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", ploidy=4, weights=snpWeights,
   maf=0.02, missingValue=NA)
 grmOpLiu[1:5, 1:5]

# GRM matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(grmOpVr1), main="Poliploidi GRM (Van Raden)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(grmOpVr2), main="Poliploidi GRM (Van Raden)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(grmOpEndelman), main="Poliploidi GRM (Endelman)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(grmOpSlater1), main="Poliploidi GRM (Slater 1)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(grmOpSlater2), main="Poliploidi GRM (Slater 2)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(grmOpLiu), main="Poliploidi GRM (Liu)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 par(opar)


# Örnek 6.110: AGHmatrix ile poliploidler için oran verisiyle GRM
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
# SNP veri dosyasının okunması
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

# Genotipi oran olarak değiştirme
 ratioGeno <- geno/2 
 ratioGeno[1:5,1:2]

 grmOpVr1 <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", ploidy=2, ratio=FALSE, 
   maf=0.02, missingValue=NA)

 grmOpRatioVr1 <- Gmatrix(
   SNPmatrix=ratioGeno, method="VanRaden", ploidy=2, ratio=TRUE, 
   maf=0.02, missingValue=NA)

 grmOpVr1[1:5,1:5] == grmOpRatioVr1[1:5,1:5]
 grmOpVr2 <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", ploidy=2, ratio=FALSE, 
   ploidy.correction=TRUE, maf=0.02, missingValue=NA)

 grmOpRatioVr2 <- Gmatrix(
   SNPmatrix=ratioGeno, method="VanRaden", ploidy=2, ratio=TRUE, 
   ploidy.correction=TRUE, maf=0.02, missingValue=NA)

 grmOpVr2[1:5,1:5] == grmOpRatioVr2[1:5,1:5]
# GRM matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(grmOpVr2), main="Dozaj verisiylen GRM (Van Raden)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(grmOpRatioVr2), main="Oran verisiyle GRM (Van Raden)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 par(opar)


# Örnek 6.111: AGHmatrix ile epistatik GRM
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }
# SNP veri dosyasının okunması
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

# Van Raden yöntemiyle eklemeli GRM
 G <- Gmatrix(
   SNPmatrix=geno, method="VanRaden", 
   maf=0.02, missingValue=NA)

# Su yöntemiyle dominans GRM
 D <- Gmatrix(
   SNPmatrix=geno, method="Su", 
   maf=0.02, missingValue=NA)

# Birinci dereceden epistatik ilişkiler
# Eklemeli x Eklemeli etkileşimler
 E1 <- G*G
# Dominans x Dominans etkileşimler
 E3 <- D*D
# Eklemeli x Dominans etkileşimler
 E2 <- G*D

# İkinci dereceden epistatik ilişkiler
# Eklemeli x Eklemeli x Eklemeli etkileşimler
 E4 <- G*G*G
# Dominans x Dominans x Dominans etkileşimler
 E5 <- D*D*D
# Eklemeli x Eklemeli x Dominans etkileşimler
 E6 <- G*G*D
# Eklemeli x Dominans x Dominans etkileşimler
 E7 <- G*D*D

# Epistatik matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(E1), main="Eklemeli x Eklemeli",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(E2), main="Dominans x Dominans",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 pheatmap(as.matrix(E3), main="Eklemeli x Dominans",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 par(opar)


# Örnek 6.112: AGHmatrix ile epistatik GRM
 suppressPackageStartupMessages(installed <- require(AGHmatrix))
 if (!installed) {
   install.packages("AGHmatrix", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(AGHmatrix))
 }

# SNP veri dosyasının okunması
 setwd("D:/gwasbook/data/cattle/")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

 ped <- cattleGeno[,2:4]
 A <- Amatrix(ped, ploidy=2, w = 0.1)
 A[1:5, 1:3]
 G <- Gmatrix(geno, ploidy=2, maf=0.02, method="VanRaden")
 G <- round(G,3)
 colnames(G) <- rownames(G) <- rownames(A)
 G[1:5, 1:3]

 # Munoz yöntemiyle H matrisi
 munozH <- Hmatrix(A=A, G=G, ploidy=2,
     method="Martini", markers=geno,
     maf=0.02, missingValue=NA)

 munozH[1:5, 1:3]
 # Martini yöntemiyle H matrisi
 martiniH <- Hmatrix(A=A, G=G, ploidy=2,
     method="Martini", 
     maf=0.02, missingValue=NA)

# H matrislerinin ısı haritası
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 opar <- par(ask=TRUE)
 pheatmap(as.matrix(E1), main="H matrisi (Munoz)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )

 pheatmap(as.matrix(martiniH), main="H matris (Martini)",
   cellheight = 6, cellwidth=6,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE,
   show_rownames = FALSE, show_colnames = FALSE
 )
 par(opar)


 
# Örnek 6.113: ASRgenomics ile GRM
# ASRgenomics paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(ASRgenomics))
 if (!installed) {
   install.packages("ASRgenomics", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ASRgenomics))
 }

# 0,1,2 kodlu genotip veri dosyasının okunması ve yapısı
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

 qcGeno <- qc.filtering(M = geno, na.string = "NA",
   base = FALSE, ref = NULL,
   marker.callrate = 0.2, ind.callrate = 0.2, maf = 0.05, 
   heterozygosity = 0.95, Fis = 1, 
   impute = FALSE, plots = TRUE)

 gMatRes <- G.matrix(
   M = qcGeno$M.clean,
   method = "VanRaden", 
   na.string = NA)

 G <- gMatRes$G
 G[1:5, 1:5]
 
 kinship.heatmap(
   K = G, 
   dendrogram = TRUE, 
   row.label = FALSE,
   col.label = FALSE)
 kinship.heatmap(
   K = grmSu, 
   dendrogram = TRUE, 
   row.label = FALSE,
   col.label = FALSE)


# Örnek 6.114: ASRgenomics ile GRM kalitesini inceleme
# Bağımlılık – Örnek 6.111
#
 diagnosticRes <- kinship.diagnostics(
   K = G, 
   diagonal.thr.small = 0.8, 
   diagonal.thr.large = 1.2,
   duplicate.thr = 0.95)
# Köşegende sınırları aşan değerler
 diagnosticRes$list.diagonal 
# Kopya genotipler listesi
 diagnosticRes$list.duplicate
# Köşegen ve köşegen dışı değerlere ait tanı grafikleri
 opar <- par(ask=TRUE)
 diagnosticRes$plot.diag
 diagnosticRes$plot.offdiag
 par(opar)



# Örnek 6.115: rMVP ile GWAS analizi için K matrisi
# rMVP paketini kurma ve yükleme 
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }

# Plink Bed dosyasını okuma ve dönüştürme
 setwd("D:/gwasbook/data/cattle")
 MVP.Data(
   fileBed="cattle",
   out="cattle_mvp",
   verbose=FALSE
 )

# MVP genotip dosyasını okuma
 cattlegeno <- attach.big.matrix("cattle_mvp.geno.desc")
 cattlemap <- read.table("cattle_mvp.geno.map", head=TRUE)

 cattlegeno[1:5, 1:10]
 cattlemap[1:5,]
 setwd("D:/gwasbook/data/cattle")
 G <- MVP.Data.Kin(fileKin = TRUE,
   mvp_prefix = "cattle_mvp",
   priority = "speed", sep = "\t",
   out = "cattle_mvp",
   cpus = 5, verbose = TRUE)

 G[1:5, 1:5]


# Örnek 6.116: rMVP ile GWAS analizi için K matrisi (Blok stratejisi)
 setwd("D:/gwasbook/data/cattle")
 cattlegenotype <- attach.big.matrix("cattle_mvp.geno.desc")

 G1 <- MVP.calk(cattlegenotype)

 dim(G1)
[1] 71 71

 G1[1:5,1:5]


# Örnek 6.117: GRM dosyasının okunması
# 
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }
 setwd("D:/gwasbook/data/cattle")
 G2 <- attach.big.matrix("cattle_mvp.kin.desc")
 G2[1:5,1:5]


# Örnek 6.118: rMVP ile GRM (van Raden yöntemi)
# 
 setwd("D:/gwasbook/data/cattle")
 cattlegenotype <- attach.big.matrix("cattle_mvp.geno.desc")

 G3 <- MVP.K.VanRaden(
   M = cattlegenotype, 
   priority = "speed", cpu = 6,
   verbose = FALSE)

 dim(G3)

 G3[1:5,1:5]

# GRM matrisinin ısı haritası (heatmap.2 ile)
 suppressPackageStartupMessages(installed <- require(gplots))
 if (!installed) {
   install.packages("gplots", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(gplots))
 }
 heatmap.2(as.matrix(K3, trace="none"))

# GRM matrisinin ısı haritası (pheatmap ile)
 suppressPackageStartupMessages(installed <- require(pheatmap))
 if (!installed) {
   install.packages("pheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pheatmap))
 }
 pheatmap(as.matrix(K3),
   cellheight = 6, cellwidth=6,
   border_color = "gray", cex=0.7,
   scale = "none",
   cluster_cols = TRUE, cluster_rows = TRUE)


# Örnek 6.119: GRM matrisinin tersini alma
 suppressPackageStartupMessages(installed <- require(ASRgenomics))
 if (!installed) {
   install.packages("ASRgenomics", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ASRgenomics))
 }

# 0,1,2 kodlu genotip veri dosyasının okunması ve yapısı
 setwd("D:/gwasbook/data/cattle")
 cattleGeno <- read.table("cattlesnp.raw", head=TRUE)
 geno <- as.matrix(cattleGeno[,7:ncol(cattleGeno)])
 rownames(geno) <- cattleGeno[,2]

 qcGeno <- qc.filtering(M = geno, na.string = "NA",
   base = FALSE, ref = NULL,
   marker.callrate = 0.2, ind.callrate = 0.2, maf = 0.05, 
   heterozygosity = 0.95, Fis = 1, 
   impute = FALSE, plots = TRUE)

 gMatRes <- G.matrix(
   M = qcGeno$M.clean,
   method = "VanRaden", 
   na.string = NA)

 G <- gMatRes$G
 G[1:5, 1:5]

 inverseG <- G.inverse(
   G = G,
   A = NULL,
   rcn.thr = 1e-12,
   blend = FALSE,
   pblend = 0.02,
   bend = TRUE,
   eig.tol = NULL,
   align = FALSE,
   digits = 8,
   sparseform = FALSE,
   message = TRUE
 )

 Ginv <- inverseG$Ginv
 Ginv[1:5,1:5]
 inverseG$status
 kinship.heatmap(K = G, dendrogram = TRUE, 
   row.label = FALSE, col.label = FALSE)

 kinship.heatmap(K = Ginv, dendrogram = TRUE, 
   row.label = FALSE, col.label = FALSE)


# Örnek 6.120: PLINK2 ile GRM hesaplama
 setwd("D:/gwasbook/data/cattle")
 plinkCmd <- "plink2 --bfile cattle --chr-set 29 "
 plinkCmd <- paste(plinkCmd, "--make-rel square meanimpute ")
 plinkCmd <- paste(plinkCmd, "--out cattle")
 system(plinkCmd)

 cattleGRM <- as.matrix(read.table("cattle.rel"))
 sampIds <- read.table("cattle.rel.id")$V2
 rownames(cattleGRM) <- colnames(cattleGRM) <- sampIds
 cattleGRM[1:5, 1:5]
 suppressPackageStartupMessages(installed <- require(ASRgenomics))
 if (!installed) {
   install.packages("ASRgenomics", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ASRgenomics))
 }
 kinship.heatmap(K = cattleGRM, dendrogram = TRUE, 
   row.label = FALSE, col.label = FALSE)



# Örnek 6.121: PLINK2 ile King-robust matris hesaplama
 setwd("D:/gwasbook/data/cattle")
 system("plink2 --bfile cattle --chr-set 29 --make-king --out cattle")

 kins <- scan("cattle.king")	
 n <- floor(sqrt(length(kins) * 2))
 kingMat <- matrix(NA, n, n)
 kingMat[upper.tri(kingMat, diag=TRUE)] <- kins
 kingMat <- t(kingMat)
 kingMat[upper.tri(kingMat)] <- kingMat[lower.tri(kingMat)]
 sampIds <- read.table("cattle.king.id")$V2
 rownames(kingMat) <- sampIds[-1]
 colnames(kingMat) <- sampIds[-n]
 kingMat[1:5, 1:5]
# King matrisin simetrik kare matris olarak elde edilmesi
 plinkCmd <- "plink2 --bfile cattle --chr-set 29 "
 plinkCmd <- paste(plinkCmd, "--make-king square meanimpute --out cattle")
 system(plinkCmd)

 kingMat <- as.matrix(read.table("cattle.king"))
 sampIds <- read.table("cattle.king.id")$V2
 rownames(kingMat) <- sampIds
 colnames(kingMat) <- sampIds
 kingMat[1:5, 1:5]
 suppressPackageStartupMessages(installed <- require(ASRgenomics))
 if (!installed) {
   install.packages("ASRgenomics", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ASRgenomics))
 }
 kinship.heatmap(K = kingMat, dendrogram = TRUE, 
   row.label = FALSE, col.label = FALSE)


# Örnek 6.122: KING ile King-robust matris hesaplama
 setwd("D:/gwasbook/data/cattle")
 system("king -b cattle.bed --kinship")

 kins <- read.table(file = "king.kin", header=T)
 str(kins)
 plot(kins$IBS0, kins$Kinship, type="p",
  col = "blue",  main = "KING-Robust",
  xlab="Proportion of Zero IBS", ylab = "EstimatedKinship Coef.")
 lines <- c(0.3536, 0.1768, 0.0884, 0.0442, 0.0221, 0)
 abline(h=lines, col=c(1,1,1,1,1,2), lty=c(rep(3,5),1))

# İstenilen aileleri farklı renklendirme
 HOL <- which(kins$FID=="HOL")
 points(kins$IBS0[HOL], kins$Kinship[HOL], col = "red")
 SIM <- which(kins$FID=="SIM")
 points(kins$IBS0[SIM], kins$Kinship[SIM], col = "green")


# Örnek 6.123: King matrisi tablodan kare matrise dönüştürme
# Bağımlılık – Örnek 6.122
#
# Dönüştürme fonksiyonu
 vector2square <- function(vec){
     n <- floor(sqrt(2 * length(vec)  0.25) - 0.5)
     mat <- matrix(0, n, n)
     k <- 1
     for (i in 1:n){
         for (j in i:n){
             mat[i,j] = mat[j,i] <- vec[k]
             k <- k1
         }
     }
     mat
 }

# King matrisini oluşturma
 kingMat <- vector2square(kins$Kinship)
 kingMat[1:5,1:5]



# Örnek 7.1: Genotip ve fenotip veri dosyalarının okunması
 setwd("D:/gwasbook/data/simdata")
# Fenotip dosyasının okunması ve yapısı
 pheno <- read.table("cattle_sim_pheno1.dat", sep="\t", head=TRUE)
 str(pheno)
 pheno[1:5, ]
# Map dosyasının okunması ve yapısı
 map <- read.table("cattle_sim.map", sep="\t", head=TRUE)
 head(map[,1:5])
# Genotip dosyasının okunması ve yapısı
 geno <- read.table("cattle_sim_geno1.dat", sep="\t")
 rownames(geno) <- map$SNP
 colnames(geno) <- pheno$index
 geno <- t(geno)
 geno[1:5, 1:5]


# Örnek 7.2: İkili fenotip için GLM analizi
# Bağımlılık – Örnek 7.1
#
# Çalışılan fenotipi seç
 y <- as.factor(pheno[,"Trait1"])
 results <- matrix(NA, nrow=ncol(geno), ncol=4)
 colnames(results) <- c("b","std b","z","p")
 for(i in 1:ncol(geno)){
    model <- glm(y ~ geno[,i], family="binomial")
    snpTest <- as.matrix(summary(model)$coefficients)
    if(dim(snpTest)[1]==1)
       results[i,] <- rep(NA,4)
    else
       results[i,] <- snpTest[2,]
 }
# Sonuçları görüntüle
 results <- as.data.frame(results)
 head(results)


# Örnek 7.3: GWAS sonuçlarını inceleme
# Bağımlılık – Örnek 7.2
#
# GWAS sonuç tablosu oluştur
 gwasResults <- cbind(map[,1:3], results$p)
 colnames(gwasResults) <- c("SNP","CHR","POS", "P")
 head(gwasResults)
# GWAS analizi p-değerleri grafiği çiz
 plot (-log10(gwasResults$P),  
   col="grey", pch=19, xlab="SNPs", ylab="-log(P)")
 abline(h=-log10(1e-05), col="blue")


# Örnek 7.4: Fenotiple ilişkili SNP'lerin bulunması
# Bağımlılık – Örnek 7.3
#
 alpha <- 0.001
 idx <- which(gwasResults$P < alpha)
 idx 
 [1]  147 1714 1770 3754
 map[idx, 1:5]


# Örnek 7.5: P-değerlerinin düzeltilmesi
# Bağımlılık – Örnek 7.3
#
# Düzeltme yöntemleri
 p.adjust.methods
# 1. tip hata düzeyi
 alpha <- 0.05
 n <- nrow(gwasResults) #Test sayısı
 fwer <- alpha/n #Aile geneli hata oranı

# Genom boyu önemlilik eşiğine göre önemli bulunan ilişkiler
 gwSigThreshold <- 5e-8
 which(gwasResults$P < gwSigThreshold)
integer(0)

# Bonferroni düzeltmesi
 pAdjBonferroni <- p.adjust(gwasResults$P, method = "bonferroni", n=n)
 head(pAdjBonferroni)
 which(pAdjBonferroni < alpha)
# veya
 which(gwasResults$P < fwer)

# Holm düzeltmesi
 pAdjHolm <- p.adjust(gwasResults$P, method = "holm", n=n)
 head(pAdjHolm)
 which(pAdjHolm < alpha)
# FDR düzeltmesi
 pAdjFdr <- p.adjust(gwasResults$P, method = "fdr", n=n)
 head(pAdjFdr)
 which(pAdjFdr < alpha)


# Örnek 7.6: PCA ve çevre faktörleriyle GLM
# Bağımlılık – Örnek 7.1
#
# Çalışılan fenotip ve çevre faktörlerini ayarla
 y <- as.factor(pheno[,"Trait1"])
 sex <- as.factor(pheno$sex)
 F1 <- as.factor(pheno$F1)
 F2 <- as.factor(pheno$F2)
 C1 <- pheno$C1

# Temel bileşenler analizi
 pca <- prcomp(geno)
 PC <- pca$x

# GLM analizi
 results <- t(apply(geno, 2, function(x){ 
    model <- glm(y ~ x  
      sex  F1  F2  C1  
      PC[,1]  PC[,2]  PC[,3], 
      family = "binomial")
    snpTest <- as.matrix(summary(model)$coefficients)
    if(dim(snpTest)[1]==1)
       (rep(NA,4))
    else
       (snpTest[2,])
 }))
 results <- as.data.frame(results)
 colnames(results) <- c("b","std b","z","p")

# GWAS sonuç tablosu oluştur
 gwasResults <- cbind(map[,1:3], results$p)
 colnames(gwasResults) <- c("SNP","CHR","POS", "P")
 head(gwasResults)
# 1. tip hata düzeyi
 alpha <- 0.05
 n <- nrow(gwasResults)

# Genom boyu önemlilik eşiğine göre önemli bulunan ilişkiler
 gwSigThreshold <- 5e-8
 which(gwasResults$P < gwSigThreshold)
# Bonferroni düzeltmesi
 pAdjBonferroni <- p.adjust(gwasResults$P, method = "bonferroni", n=n)
 head(pAdjBonferroni)
 which(pAdjBonferroni < alpha)

# Holm düzeltmesi
 pAdjHolm <- p.adjust(gwasResults$P, method = "holm", n=n)
 head(pAdjHolm)
 which(pAdjHolm < alpha)

# FDR düzeltmesi
 pAdjFdr <- p.adjust(gwasResults$P, method = "fdr", n=n)
 head(pAdjFdr)
 which(pAdjFdr < alpha)


# Örnek 7.7: Kantitatif fenotip için GLM
# Bağımlılık – Örnek 7.1
#
# Çalışılan fenotip ve çevre faktörlerini ayarla
 y <- pheno[,"Trait4"]
 sex <- as.factor(pheno$sex)
 F1 <- as.factor(pheno$F1)
 F2 <- as.factor(pheno$F2)
 C1 <- pheno$C1

# Temel bileşenler analizi
 pca <- prcomp(geno)
 PC <- pca$x

# GLM analizi
 results <- t(apply(geno, 2, function(x){ 
    model <- glm(y ~ x  sex  F1  F2  C1  PC[,1:3], 
      family = "gaussian")
    snpTest <- as.matrix(summary(model)$coefficients)
    if(dim(snpTest)[1]==1)
       (rep(NA,4))
    else
       (snpTest[2,])
 }))
 results <- as.data.frame(results)
 colnames(results) <- c("b","std b","z","p")

# GWAS sonuç tablosu oluştur
 gwasResults <- cbind(map[,1:3], results$p)
 colnames(gwasResults) <- c("SNP","CHR","POS", "P")
 head(gwasResults)
# 1. tip hata düzeyi
 alpha <- 0.05
 n <- nrow(gwasResults)

# Genom boyu önemlilik eşiğine göre önemli bulunan ilişkiler
 gwSigThreshold <- 5e-8
 which(gwasResults$P < gwSigThreshold)
integer(0)

# Bonferroni düzeltmesi
 pAdjBonferroni <- p.adjust(gwasResults$P, method = "bonferroni", n=n)
 head(pAdjBonferroni)
 which(pAdjBonferroni < alpha)
[1]  398 3809

 idx <- which(-log10(gwasResults$P)  -log10(alpha/n))
 idx
 map[idx, 1:5]
# GWAS analizi p-değerleri grafiği çiz
 plot (-log10(gwasResults$P),  
   col="gray", pch=19, xlab="SNPs", ylab="-log10(P)")
 abline(h=-log10(1e-05), col="blue")

# Holm düzeltmesi
 pAdjHolm <- p.adjust(gwasResults$P, method = "holm", n=n)
 head(pAdjHolm)
 idx <- which(pAdjHolm < alpha)
 idx
 map[idx, 1:5]
# FDR düzeltmesi
 pAdjFdr <- p.adjust(gwasResults$P, method = "fdr", n=n)
 head(pAdjFdr)
 idx <- which(pAdjFdr < alpha)
 idx
 map[idx, 1:5]


# Örnek 7.8: Anotasyon paketlerinin kurulması ve kullanılması
 if(!require(org.Hs.eg.db)){
   if (!require("BiocManager", quietly = TRUE))
      install.packages("BiocManager")
   BiocManager::install("org.Hs.eg.db")
 }
 library(org.Hs.eg.db)
# Paketteki veriler
 ls("package:org.Hs.eg.db")

# Kromozomlara eşlenmiş Entrez gen tanımlayıcıları 
 x <- org.Hs.egCHR
 mappedGenes <- mappedkeys(x)
# Veri çerçevesine dönüştür
 dfGenes <- as.data.frame(x[mappedGenes])
 head(dfGenes, 5)


# Örnek 7.9: Açıklama verisine AnnotationDbi ile erişim
# Bağımlılık – Örnek 7.8, Örnek 7.10
#
 columns(org.Hs.eg.db)
 library(AnnotationDbi)
 anames <- c('JAK1','AATK','A2BP1','A2LD1') 
 select(org.Hs.eg.db, anames, c("ENTREZID","GENENAME"), "ALIAS")


# Örnek 7.10: AnnotationDbi kurulması ve kullanılması
 if(!require(AnnotationDbi)){
   if (!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager", repo="https://cloud.r-project.org")
  BiocManager::install("AnnotationDbi")
 }
 library(AnnotationDbi)

 if(!require(GO.db)){
   if (!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager", repo="https://cloud.r-project.org")
  BiocManager::install("GO.db")
 }
 library(GO.db)
 columns(GO.db)
 head(keys(GO.db))
 goIds <- c("GO:0042254","GO:0044183")
 select(GO.db, keys=goIds, columns=c("GOID","ONTOLOGY","TERM"),
     keytype="GOID")


# Örnek 7.11: biomaRt kurulması ve kullanılması
 if(!require(biomaRt)){
   if (!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager", repo="https://cloud.r-project.org")
  BiocManager::install("biomaRt")
 }
 library(biomaRt)
# BioMart sunucuları
 listMarts()
# ENSEMBL sunucusuna bağlanma ve veri setlerini listeleme
 martEns <- useMart("ENSEMBL_MART_ENSEMBL")
# Sunucudaki veri setlerini gösterme
 View(listDatasets(martEns))

# Gökkuşağı alabalığı veritabanını kullanma
 martTrout <- useMart("ENSEMBL_MART_ENSEMBL","omykiss_gene_ensembl")

# Öznitelikler ve filtreler
 atribs <- listAttributes(martTrout)
 str(atribs)

 filters <- listFilters(martTrout)
 str(filters)
# Veri alma
# getBM(attributes, filters, query_values, martObject)

# Kromozomlar ve pozisyonları tanımla
 chr <- c(9, 17 , 27 , 27 )
 bp <- c(407663, 3396, 143453, 921922)
# Gen arama penceresi başlangıç ve bitiş pozisyonlarını ayarla
 qStart <- bp - 100
 qEnd <- bp  100
# Sorgu için liste oluştur
 qList <- list(chr, qStart, qEnd)
 results <- getBM(c("ensembl_gene_id", "chromosome_name", 
   "start_position", "end_position","strand"),
   c("chromosome_name","start","end"), qList, martTrout)
 results

# Alternatif olarak kromozomların istenen bölgeleri sorgula
 chrRegions <- c("9: 307563: 507763:1")
 results <- getBM(c("ensembl_gene_id", "chromosome_name", 
   "start_position", "end_position","strand"),
   c("chromosomal_region"), chrRegions, martTrout)
 (results)

# annotables paketi ile çalışma
 if(!require(annotables)){
  if(!require(devtools)) install.packages("devtools")
  devtools::install_github("stephenturner/annotables")}
 library(annotables)
# galgal5 tavuk türü, diğerleri için paket kitabına bakılabilir
 galgal5 %% 
  dplyr::filter(biotype == "protein_coding" & chr == "4") %% 
  dplyr::select(ensgene, symbol, chr, start, end, description) %% head 


# Örnek 7.12: AnnotationHub ile çalışma
# 
 if(!require(AnnotationHub)){
   install.packages("AnnotationHub", repo="https://cloud.r-project.org")}
 library(AnnotationHub)

 if(!require(ensembldb)){
   if (!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager", repo="https://cloud.r-project.org")
  BiocManager::install("ensembldb")
 }
 library(ensembldb)

 if(!require(magrittr)){
   install.packages("magrittr", repo="https://cloud.r-project.org")}
 library(magrittr)

 if(!require(dplyr)){
   install.packages("dplyr", repo="https://cloud.r-project.org")}
 library(dplyr)

# AnnotationHub'a bağlanma
 anoHub <- AnnotationHub()

# AnnotationHub nesnesini inceleme
 anoHub

# AnnotationHub'ta veri sağlayıcıları, türler ve veri türleri (sınıfları)
# hakkında bilgi edinme
 unique(anoHub$dataprovider)
 unique(anoHub$species)
 anoHub$rdataclass

# AnnotationHub sorgulaması
 goatQuery <- query(anoHub, c("Capra hircus", "EnsDb"))
 goatQuery
AnnotationHub with 23 records
# snapshotDate(): 2023-10-23
# $dataprovider: Ensembl
# $species: Capra hircus
# $rdataclass: EnsDb
# Çalışılacak anotasyon veritabanını seçme
 goatDb <- goatQuery[["AH116220"]]
 keytypes(goatDb)
 columns(goatDb)
 egId <- as.character(head(keys(goatDb, "ENTREZID")))
 egId
 select(goatDb, egId, c("SYMBOL", "GENENAME"), "ENTREZID")

# Gen düzeyi bilgiler
 goatGenes <- genes(goatDb, return.type = "data.frame") 
 head(goatGenes[,1:6])
# Transkript düzeyi bilgiler
 goatTrans <- transcripts(goatDb, return.type = "data.frame") 
 View(goatTrans)
# Exon düzeyi bilgiler
 goatExons <- exons(goatDb, return.type = "data.frame")
 View(goatExons)

# Gen düzeyi veri çerçevesi oluşturma 
 goatGeneAnnot <- goatGenes  %%
  dplyr::select(gene_id, entrezid, gene_name, gene_biotype) %% 
  dplyr::filter(gene_id %in% gwasResults$gene)


# Örnek 8.1: simGwasResult ile GWAS sonuçları simülasyonu
# Bağımlılık: Kod 8.1 
#
 simgwasres <- simGwasResult(nchr=10, nsnp=1000, chrX="n",
   ntraits=4, maxpos=1e06, nsigp=50,
   minsplev=1e-07, maxsplev=1e-04, seed=13)

 str(simgwasres)
 head(simgwasres, 4)


# Örnek 8.2: Önemli ilişkilerin listelenmesi
# Bağımlılık: Örnek 8.1
#
# Önemlilik için eşik değer hesaplama (Bonferroni düzeltmeli)
 thrP <- -log10(0.05/nrow(simgwasres))
 thrP
# Fenotiplere göre önemli ilişkilerin listelenmesi
 simgwasres[-log10(simgwasres$P1)  thrP, ] 
 simgwasres[-log10(simgwasres$P2)  thrP, ] 
 simgwasres[-log10(simgwasres$P3)  thrP, ] 
 simgwasres[-log10(simgwasres$P4)  thrP, ]



# Örnek 8.3: Simülasyon verisinde p-değerlerini değiştirme
# Bağımlılık: Kod 8.1
#
 simgwasres2 <- simGwasResult(nchr=10, nsnp=1000, chrX="n",
   ntraits=4, maxpos=1e06, nsigp=0, seed=13)

# 1. kromozomda 50. snp ve 2. fenotip için p değerini 1e-07 yap
 spval <- c(1, 50, 2, 1e-06)
 snpidx <- which(simgwasres2$CHR==spval[1])[spval[2]]
 simgwasres2[snpidx, 3spval[3]] <- spval[4]
 simgwasres2[snpidx, ] 
# 5. kromozomda 123. snp ve 3. fenotip için p değerini 1e-08 yap
 spval <- c(5, 123, 3, 1e-07)
 snpidx <- which(simgwasres2$CHR==spval[1])[spval[2]]
 simgwasres2[snpidx, 3spval[3]] <- spval[4]
 simgwasres2[snpidx, ] 


# Örnek 8.4: gwas_qq fonksiyonu ile QQ grafiği
 pval <- simgwasres$P1
 pvdf <- gwas_qq(pval)
 head(pvdf, 4)


# Örnek 8.5: gwas_manhattan fonksiyonu ile Manhattan grafiği
# Bağımlılık: Kod 8.3, Örnek 8.1
#
 gwasresult <- simgwasres[, 1:5] # GWAS sonuçları
 colnames(gwasresult)[4] <- "P"
 colPal <- c("skyblue","dodgerblue") # Renk paleti
 gwas_manhattan(gwasresult, palette=colPal)
 axis(1, at=seq(500, 11000, 1000),
   labels=paste0("Chr-",1:11), col.axis="black", las=2)


# Örnek 8.6: CMplot ile çember Manhattan grafiği
# Bağımlılık - Paket CMplot, Örnek 8.1
#
# CMplot paketi fonksiyonlarının yüklenmesi
 source("https://raw.githubusercontent.com/YinLiLin/CMplot/master/R/CMplot.r")

# GWAS sonuç verilerinin CMplot için hazırlanması
 gwasresult <- simgwasres[, c(1:3, 4)] # GWAS sonuçları

# Dairesel Manhattan grafiğinin çizilmesi
 CMplot(gwasresult, plot.type="c", 
   chr.labels=paste("Chr", c(1:10, "X"), sep=""),
   r=0.4, outward=FALSE, 
   cir.legend=TRUE, cir.legend.col="black",
   cir.chr.h=0.8, chr.den.col="gray", 
   file.output=FALSE)


# Örnek 8.7: Miami grafiği
# Bağımlılık - Örnek 8.1
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }

# GWAS sonuçlarının qqman için hazırlanması
 gwasresult1 <- simgwasres[, c(1:3,4)] # GWAS sonuçları 1
 gwasresult2 <- simgwasres[, c(1:3,5)] # GWAS sonuçları 2

# Miami grafiğinin çizilmesi
 par(mar=c(5,5,3,3))
 opar <- par(mfrow=c(2,1), mar=c(1,5,3,3))
 manhattan(gwasresult1, bp="POS", p="P1",
   ylim=c(0,8), cex=1, cex.lab=2.5, font.lab=2, font.axis=2,
   cex.axis=1.6, las=2, font=2, col = c("dodgerblue", "orange3"))

 par(mar=c(2,5,3,3))
 manhattan(gwasresult2, bp="POS", p="P2",
   ylim=c(8,0), cex=1, cex.lab=2.5, font.lab=2, font.axis=2, 
   cex.axis=1.6, las=2, font=2, xlab="", xaxt="n", 
   col = c("dodgerblue", "orange3"))
 par(opar)


# Örnek 8.8: Basit Manhattan grafiği
# Bağımlılık: Paket qqman / Örnek 8.1
#
# qqman paketini kurma ve yükleme
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }
# Veriyi hazırlama
 gwasresult <- simgwasres[,c(1:3,5)]
 head(gwasresult, 3)
# Grafiği çizme
 manhattan(gwasresult, bp="POS", p="P2",
   main = paste("Manhattan grafiği – Fenotip 2"))


# Örnek 8.9: Özelleştirilmiş Manhattan grafiği
# Bağımlılık: Örnek 8.1, 8.8
#
 manhattan(gwasresult, chr="CHR", bp="POS", snp="SNP", p="P",
   chrlabs = c(1:10, "X"), 
   col = c("dodgerblue", "orange3"), 
   ylim = c(0, 6), cex = 0.8, cex.axis = 0.9, 
   suggestiveline = -log10(1e-05), genomewideline=TRUE,
   main = paste("Manhattan grafiği – Fenotip 2"))


# Örnek 8.10: Özel bir kromozom için Manhattan grafiği (yakınlaştırma)
# Bağımlılık: Örnek 8.1, 8.8
 gwasresult2 <- subset(gwasresult, CHR == 8)
 manhattan(gwasresult2, chr="CHR", bp="POS", snp="SNP", p="P2",
   ylim = c(0, 7), col = c("dodgerblue", "orange3"),
   main = paste("Manhattan grafiği – Fenotip 2, Chr 8"))


# Örnek 8.11: SNP adı (etiket) ekleme
# Bağımlılık: Örnek 8.1, 8.8
#
 manhattan(gwasresult, chr="CHR", bp="POS", snp="SNP", p="P2",
   annotatePval = 0.01, 
   ylim = c(0, 10), col = c("dodgerblue", "orange3"),
   main = paste("Manhattan grafiği – Fenotip 2"))


# Örnek 8.12: İlgilenilen SNP'leri vurgulama
# Bağımlılık: Örnek 8.1, 8.8
#
 snplist <- gwasresult$SNP[gwasresult$P2 <= 1e-05]
 snplist
 
 manhattan(gwasresult, chr="CHR", bp="POS", snp="SNP", p="P2",
   highlight=snplist, ylim = c(0, 10),
   col = c("dodgerblue", "orange3"),
   main = paste("Manhattan grafiği – Fenotip 2"))


# Örnek 8.13: Belli bir kromozomda ilgilenilen SNP'leri vurgulama
# Bağımlılık: Örnek 8.1, 8.7
#
 gwasresult2 <- subset(gwasresult, CHR == 8)
 snplist <- gwasresult2$SNP[gwasresult2$P2 <= 1e-05]
 manhattan(gwasresult2, chr="CHR", bp="POS", snp="SNP", p="P2",
   highlight=snplist, ylim = c(0, 7), col = "gray30",
   main = paste("Manhattan grafiği – Fenotip 2, Chr 8"))


# Örnek 8.14: Renk paletleri kullanma
# Bağımlılık: Örnek 8.1, 8.8
#
 pal1 <- palette(c("red","black", "green","orange","blue","gray"))
 pal2 <- palette(c("#b2182b","#ef8a62","#fddbc7", "#d1e5f0",
   "#67a9cf","#2166ac"))
 pal3 <- palette( c("#06373e", "#0b7259", "#45bd57", "#a7f966",
  "#cad4d1", "#93a0a3", "#5a6a75", "#2a3340", "#000000", "#312262",
  "#7f3d95", "#d367bd", "#ffbfe3", "#222d60", "#2e5d9d", "#42a8cc",
  "#9cf9ec", "#5e082f", "#9f2245", "#e65663", "#ffb1a2", "#5e2035",
  "#883f44", "#c87671", "#f8bda3", "#5c2609", "#995717", "#d1983d",
  "#f8f17d", "#4c2627", "#865645", "#bb8563", "#e7bf94"))
#
 manhattan(gwasresult, chr="CHR", bp="POS", snp="SNP", p="P2",
   col = pal2, chrlabs=c(1:10,"X"), 
   ylim = c(0, 10), annotatePval = 0.001,
   xlab="Kromozom", 
   main = paste("Manhattan grafiği – Fenotip 2"))


# Örnek 8.15: QQ grafiği
# Bağımlılık: Örnek 8.1, 8.8
#
 qq(gwasresult$P2)



# Örnek 8.16: CMplot paketini kurma ve yükleme
 suppressPackageStartupMessages(installed <- require(CMplot))
 if (!installed) {
   install.packages("CMplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(CMplot))
 }

# CMplot paketindeki fonksiyonları yükleme
 source("https://raw.githubusercontent.com/YinLiLin/CMplot/master/R/CMplot.r")


# Örnek 8.17: CMplot paketi Pmap dosya yapısı örneği
# Bağımlılık: Örnek 8.16
#
 data(cattle50K)
 head(cattle50K, 3)


# Örnek 8.18: Veri yapısının incelenmesi
# Bağımlılık: Örnek 8.1
#
 str(simgwasres)
 head(simgwasres, 3)


# Örnek 8.19: CMplot ile QQ grafiği
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 CMplot(Pmap=gwasresult, plot.type="q", 
   chr.labels=paste("Chr", c(1:10,"X"), sep=""),
   conf.int=TRUE, conf.int.col="gray",
   threshold=c(1e-5), threshold.col="red", threshold.lty=3,
   box=TRUE, width=10, height=6, dpi=300,
   main="QQ grafiği – Fenotip 2",
   file.output=FALSE, verbose=TRUE)



# Örnek 8.20: CMplot ile Manhattan grafiği 1
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 CMplot(gwasresult, plot.type="m", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"), 
   threshold=1e-5, threshold.lty=1,
   threshold.lwd=2, threshold.col="red",
   box=TRUE, dpi=300, width=14, height=6,
   main="Manhattan grafiği – Fenotip 2", 
   file.output=FALSE, verbose=FALSE)



# Örnek 8.21: CMplot ile Manhattan grafiği 2
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 pal1 <-c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
          "#0072B2", "#D55E00", "#CC79A7", "#7C162C",  "#83D3AD")
 CMplot(gwasresult, plot.type="m", 
   col=pal1, LOG10=TRUE,
   chr.labels= c(1:10,"X"),  
   ylim=NULL, ylab=expression(-log[10](italic(p))), ylab.pos=3, 
   threshold=c(1e-5, 1e-4), threshold.lty=c(2,1),
   threshold.lwd=c(1, 1), threshold.col=c("blue","blue"),
   signal.col=c("pink","red"), signal.cex=c(1.5, 1.2),
   signal.line=c(1, 1), signal.pch=c(19,19), amplify=TRUE, 
   bin.size=1e4, bin.range=NULL,
   chr.den.col=c("darkgreen", "yellow", "red"),
   dpi=300, width=14, height=6,
   main="Manhattan grafiği – Fenotip 2",
   file.output=FALSE, verbose=FALSE)



# Örnek 8.22: CMplot ile Manhattan grafiği 3
# Bağımlılık: Örnek 8.1, 8.17
 gwasresult <- simgwasres[, c(1:3, 5)]
 thresholdp <- 1e-05
 sigsnp <- gwasresult[gwasresult[,4] < thresholdp, 1]
 CMplot(gwasresult, plot.type="m", 
   col=c("gray50","gray30"),
   highlight=sigsnp, highlight.text=sigsnp, 
   highlight.pch=c(15:17), highlight.cex=1,
   highlight.col=c("red","blue"),  
   highlight.text.col=c("red","blue","darkgreen"),
   threshold=threshold1, threshold.lty=2,   
   amplify=FALSE, dpi=300,width=14,height=6,
   main="Manhattan grafiği – Fenotip 2",
   file.output=FALSE, verbose=FALSE)


# Örnek 8.23: CMplot ile Manhattan grafiği 4
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 threshbonf <- 0.05 / nrow(gwasresult)
 sigsnp <- gwasresult[gwasresult[,4] < threshbonf, 1]
 genelabels <- paste("Gene", 1:length(sigsnp), sep=".")
 CMplot(gwasresult, plot.type="m", 
   type="h", highlight.type="p",
   highlight=sigsnp, highlight.text=genelabels, 
   highlight.pch=20, highlight.cex=1,
   highlight.col=c("red","blue"),  
   highlight.text.col=c("red","blue","darkgreen"),
   threshold= threshbonf, threshold.lty=2,   
   amplify=FALSE, dpi=300,width=14,height=6,
   main="Manhattan grafiği – Fenotip 2",
   file.output=FALSE, verbose=FALSE)


# Örnek 8.24: CMplot ile dairesel Manhattan grafiği 1
# Bağımlılık: Örnek 8.1, 8.17
 gwasresult <- simgwasres[, c(1:3, 5)]
 CMplot(gwasresult, plot.type="c", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   cir.band=1, cir.chr.h=1.5, cir.chr=TRUE,
   cir.legend=TRUE, cir.legend.cex=0.6, 
   cir.legend.col="blue",
   r=0.4, H=2, outward=FALSE,
   chr.den.col="gray",
   threshold=1e-5, threshold.lty=1, 
   threshold.lwd=1, threshold.col="red",
   file.output=FALSE, verbose=FALSE)


# Örnek 8.25: CMplot ile dairesel Manhattan grafiği 2
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 CMplot(gwasresult, plot.type="c", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   r=0.5, H=4, outward=TRUE, 
   cir.legend.col="black", cir.chr.h=1.5, 
   cir.legend=TRUE, chr.den.col="gray",
   threshold=1e-5, threshold.lty=1, 
   threshold.lwd=1, threshold.col="red",
   file.output=FALSE, verbose=FALSE)


# Örnek 8.26: Grafiği dosyaya kaydetme 
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 setwd("D:/gwasbook/graphics")
 CMplot(gwasresult, plot.type="c", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   r=0.4, cir.legend=TRUE, outward=TRUE, 
   cir.legend.col="black", cir.chr.h=1.3, chr.den.col="gray", 
   file.output=TRUE, file="jpg", dpi=300,
   memo="simülasyon verisi") 


# Örnek 8.27: CMplot ile çoklu dairesel Manhattan grafiği 1
# Bağımlılık: Örnek 8.1, 8.17
#
 gwasresult <- simgwasres[, c(1:3, 4, 5)]
 CMplot(gwasresult, plot.type="c", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   r=0.4, cir.legend=TRUE, outward=FALSE, 
   cir.legend.col="black", cir.chr.h=1.3, 
   main="Manhattan grafiği – Fenotip 1 ve 2",
   main.cex=4, main.font=3,
   chr.den.col="gray", file.output=FALSE)



# Örnek 8.28: CMplot ile çoklu dairesel Manhattan grafiği 
# Bağımlılık: Örnek 8.1, 8.17
#
 CMplot(simgwasres, plot.type="c", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   r=0.4, cir.legend=TRUE, outward=TRUE, 
   cir.legend.col="black", cir.chr.h=1.3, 
   chr.den.col="gray", file.output=FALSE)


# Örnek 8.29: Çoklu Manhattan grafikleri
# Bağımlılık: Örnek 8.1, 8.17
#
 opar <- par(mfrow=c(2,2), mar=c(5,5,5,5))
 CMplot(simgwasres, plot.type="m", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   r=0.4, cir.legend=TRUE, outward=FALSE, 
   cir.legend.col="black", cir.chr.h=1.3, 
   chr.den.col="gray", file.output=FALSE)
 par(opar)


# Örnek 8.30: Çoklu QQ grafikleri
# Bağımlılık: Örnek 8.1, 8.17
#
 opar <- par(mfrow=c(2,2), mar=c(5,5,5,5))
 CMplot(simgwasres, plot.type="q", 
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   r=0.4, cir.legend=TRUE, outward=TRUE, 
   cir.legend.col="black", cir.chr.h=1.3, 
   chr.den.col="gray", file.output=FALSE)
 par(opar)


# Örnek 8.31: SNP yoğunluk grafiği 1
# Bağımlılık: Örnek 8.1, 8.17
#
 CMplot(simgwasres, type="p", plot.type="d", 
    bin.size=5e4, width=10, dpi=300,
    chr.labels=paste("Chr", c(1:10,"X"), sep=""),
    chr.den.col=c("darkgreen", "yellow", "red"),
    main="SNP Yoğunluğu - simgwasres", 
    file.output=FALSE, verbose=FALSE)


# Örnek 8.32: SNP yoğunluk grafiği 2
# Bağımlılık: Örnek 8.15, 8.16
#
 data(pig60K)
 CMplot(pig60K, type="p", plot.type="d", 
   bin.size=1e6, width=10, height=6, dpi=300,
   chr.labels=paste("Chr", c(1:10,"X"), sep=""),
   chr.den.col=c("darkgreen", "yellow", "red"),
   main="SNP Yoğunluğu – pig60K", 
   file.output=FALSE, verbose=FALSE)


# Örnek 8.33: rMVP paketini kurma ve yükleme
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }


# Örnek 8.34: rMVP ile dairesel Manhattan grafiği
# Bağımlılık: Örnek 8.1, 8.31
#
 gwasresult <- simgwasres[, c(1:3, 5)]
 MVP.Report(gwasresult, plot.type="c", 
   col=c("deepskyblue3","dodgerblue3"),
   chr.labels=paste("Chr", c(1:10,"X"), sep="-"),
   threshold=c(1e-6,1e-4), threshold.lty=c(1,1), 
   threshold.col=c("red", "red"), threshold.lwd=c(1,1),
   signal.line=1, signal.col=c("red","yellow", "green"), 
   r=0.4, cir.legend=TRUE, outward=FALSE, 
   cir.legend.col="black", cir.chr.h=1.0, 
   chr.den.col=c("darkgreen","yellow","red"),
   bin.size=1e5, width=10, height=10, 
   file.output=FALSE, verbose=TRUE)


# Örnek 8.35: Çoklu dairesel Mahhattan grafiği
# Bağımlılık: Örnek 8.1, 8.31
#
 colormatrix <- matrix(c("#4DAF4A", NA, NA,
   "dodgerblue4", "deepskyblue", NA,
   "dodgerblue1", "olivedrab3", "darkgoldenrod1", 
      NA, "grey50", "grey30"), nrow=4, byrow=TRUE)
 colormatrix
 MVP.Report(simgwasres, plot.type="c", 
   LOG10=TRUE, outward=TRUE,
   col=colormatrix,
   chr.labels=paste("Chr",c(1:10, "X"), sep=""),
   threshold=NULL, r=1.2, chr.den.col="black", 
   cir.chr.h=1.5, cir.legend.cex=0.5, cir.band=1,
   file.output=FALSE, verbose=FALSE)


# Örnek 8.36: Çoklu Manhattan grafiği
# Bağımlılık: Örnek 8.1, 8.31
#
 gwasresult <- simgwasres[,c(1:3, 5, 6)]
 MVP.Report(gwasresult, plot.type="m", multracks=TRUE,
   col=c("orange", "dodgerblue"),
   threshold=c(1e-6, 1e-4), threshold.lty=c(1, 2), 
   threshold.lwd=c(2,2), threshold.col=c("gray","black"),
   amplify=TRUE, bin.size=1e5, 
   chr.den.col=c("blue", "white", "red"),
   signal.col=c("red","green"), signal.cex=c(1,1),
   width=14, height=7, dpi=300,
   file.output=FALSE, verbose=FALSE)


# Örnek 8.37: Çoklu QQ grafiği
# Bağımlılık: Örnek 8.1, 8.31
#
 MVP.Report(simgwasres, plot.type="q", multracks=TRUE,
   col=c("dodgerblue1", "olivedrab3", "darkgoldenrod1"), 
   box=FALSE, threshold=1e6, 
   signal.pch=19, signal.cex=1.5, signal.col="red",  
   dpi=300, width=10, height=8,
   file.output=FALSE, verbose=FALSE)


# Örnek 8.39: ggfastman ile çalışma
# rMVP paketinden pig60K veri setini oku
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rMVP))
 }

 data(pig60K)
 trialname <- "pig60K Trait 1"
 gwasresult <- pig60K[,c(1:3, 4)]
 head(gwasresult, 3)
 colnames(gwasresult) <- c("rsid","chr", "pos", "pvalue")
 gwasresult$chr <- paste0("chr", gwasresult$chr)
 head(gwasresult,3)
 fast_manhattan(gwasresult, build='hg18', speed = "slow",
   y_scale = TRUE, log10p = TRUE, 
   color1 = "orange2", color2 = "dodgerblue", alpha = 0.5, 
   dodge_x = FALSE, highlight = NULL)


# Örnek 8.40: Yüksek hızlı modda Manhattan grafiği
# Bağımlılık: Örnek 8.37
#
 fast_manhattan(gwasresult, build='hg19', speed = "ultrafast",
   y_scale = TRUE, log10p = TRUE, 
   color1 = "orange2", color2 = "dodgerblue", alpha=0.5, 
   pointsize = 1, pixels = c(512, 512),
   dodge_x = FALSE, highlight = NULL)


# Örnek 8.41: Hızlı modda Manhattan grafiği
# Bağımlılık: Örnek 8.37
#
 gwasresult$color <- as.character(factor(gwasresult$chr, labels = 1:20))
 fast_manhattan(gwasresult, build='hg18', speed = "fast",
   pointsize = 2, pixels = c(1024, 1024))


# Örnek 8.42: Hızlı modda Manhattan grafiği
# Bağımlılık: Örnek 8.37
#
 gwasresult$color <- as.character(factor(NA))
 gwasresult[gwasresult$pvalue < 1e-6,]$color <- "red"
 fast_manhattan(gwasresult, build = "hg18", speed = "fast",
   points=2)


# Örnek 8.43: Yavaş modda QQ grafiği
# Bağımlılık: Örnek 8.37
#
 fast_qq(gwasresult$pvalue, speed = "slow", 
    log10 = TRUE, inflation_method = "median", 
    pointsize = 1.2, linecolor = "deeppink", 
    ci_color = "steelblue", ci_alpha = 0.3, 
    conf.alpha = 0.05, confint = TRUE, 
    title = "pig60K QQ-grafiği")


# Örnek 8.42: Hızlı modda QQ grafiği
# Bağımlılık: Örnek 8.37
#
 fast_qq(gwasresult$pvalue, speed = "fast", 
    log10 = TRUE, inflation_method = "median", 
    pointsize = 1.5, linecolor = "blue", 
    ci_color = "pink", ci_alpha = 0.3, 
    conf.alpha = 0.01, confint = TRUE, 
    title = "pig60K QQ-grafiği")


# Örnek 8.43: Ensembl Capra hircus 111 veritabanı ve GWAS sonuçları okuma
#
 if(!require(biomaRt)){
   if (!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager", repo="https://cloud.r-project.org")
  BiocManager::install("biomaRt")
 }
 library(biomaRt)
 martEns <- useMart("ENSEMBL_MART_ENSEMBL")
# Sunucudaki veri setlerini gösterme
 View(listDatasets(martEns))

# Keçi veritabanını kullanma
 martGoat <- useMart("ENSEMBL_MART_ENSEMBL","chircus_gene_ensembl")

 qList <- list(chr=c(1:29), qStart=rep(1, 29), qEnd=rep(1e9, 29))

 goatGenes <- biomaRt::getBM(c("ensembl_gene_id", "external_gene_name",
   "gene_biotype", "chromosome_name", "start_position", "end_position",
   "strand", "exon_chrom_start", "exon_chrom_end"),
   c("chromosome_name","start","end"), qList, martGoat)

# Sütun adlarını topr'a uygun hale getir
 colnames(goatGenes) <- c("EnsDbId", "gene_symbol", "biotype", "chrom",
   "gene_start", "gene_end", "strand", "exon_chromstart", "exon_chromend")

 setwd("D:/gwasbook/data/gwasresults")
 save(goatGenes, file="Capra_hircus_Ensembl.rda", compress='xz')
 load("Capra_hircus_Ensembl.rda")
# GWAS sonuç dosyasının okunması
 gwasRes <- read.csv("goatadaptmap.csv", header=TRUE)
 head(gwasRes, 3)
# GWAS sonuç dsoyası sütun adlarını değiştirme
 colnames(gwasRes) <- c("SNP","CHROM","POS", "EFFECT", "SE", "P")


# Örnek 8.44: topr ile görselleştirme
# Bağımlılık – Örnek 8.43
#
 if(!require(topr)){
    install.packages("topr", repo="https://cloud.r-project.org")
 }
 library(topr)

# Önemli SNP'leri listeleme
 leadSnps <- topr::get_lead_snps(
   df = gwasRes,
   protein_coding_only = FALSE,
   thresh = 5e-08, region_size = 1e06,
   chr = NULL,  keep_chr = TRUE
   .checked = FALSE, verbose = NULL)

# Aday genleri listeleme
 nomGenes <- annotate_with_nearest_gene(leadSnps, build=goatGenes)
 nomGenes[,c(1:3, 7:8)]
 QQ grafiği
 #topr::qqtopr(gwasRes)

# Manhattan grafiği 1
 topr::manhattan(gwasRes, build=goatGenes,
   protein_coding_only = FALSE,
   annotate=1e-5, annotate_with = "Gene_Symbol", #ID de olabilir
   color="blue", sign_thresh_color="red",
   shape=19, size=2, alpha=0.5, 
   label_size = 4, label_color="black", label_alpha=1,
   #use_shades=TRUE, shades_color="gray", 
   )

# Manhattan grafiği 2
 reportedGenes <- c("ADAM22", "ADGLR2", "TNS1","CDYL2","CEP112", "EDRNA")
 knownGenes <- subset(nomGenes, Gene_Symbol %in% reportedGenes)
 novelGenes <- subset(nomGenes, !(Gene_Symbol %in% reportedGenes))

 manhattan(list(gwasRes, knownGenes, novelGenes),
   color=c("black","blue","red"),
   annotate = c(1e-5, 5e-08, 5e-08), #label_color=1,
   annotate_with = "Gene_Symbol", shape=19, size=3,
   legend_labels = c("Study","Known loci","Novel loci"))



# Örnek 8.45: topr ile inceleme ve görselleştirme
# Bağımlılık – Örnek 8.43, 8.44
#
 topr::regionplot(gwasRes, gene="ADAM22", build=goatGenes)


# Örnek 8.46: topr ile inceleme ve görselleştirme
# Bağımlılık – Örnek 8.43, 8.44
#
 get_gene_coords("EDNRA", build=goatGenes)
 get_genes_by_Gene_Symbol(c("ADAM22","ADGRL2"), build=goatGenes)
 get_genes_in_region(region="3:58937497-58939497", build=goatGenes)
 get_snpset(leadSnps, gwasRes)
 get_snps_within_region(gwasRes, "1:360000-2.5e6")

 gwasRes$R2 <- rnorm(nrow(gwasRes), 0, 1)
 chr1Snps <- get_snps_within_region(gwasRes, "1:360000-2.5e6")
 locuszoom(chr1Snps, build=goatGenes, max_genes=300, protein_coding=F)


# Örnek 8.47: İnsan gen anotasyon veritabanı ve GWAS sonuç dosyasını okuma
# 
# Analizde kullanılan paketlerin kurulması/yüklenmesi
 if(!require(AnnotationHub)){
   install.packages("AnnotationHub", repo="https://cloud.r-project.org")}
 library(AnnotationHub)
 if(!require(ensembldb)){
   if (!requireNamespace("BiocManager", quietly = TRUE))
      install.packages("BiocManager", repo="https://cloud.r-project.org")
  BiocManager::install("ensembldb")
 }
 library(ensembldb)
 if(!require(topr)){
   install.packages("topr", repo="https://cloud.r-project.org")}
 library(topr)

# EnsemblDb'den en güncl insan gen açıklama veritabanının alınması
 anoHub <- AnnotationHub()
 hubQuery <- query(anoHub, c("EnsDb", "Homo sapiens"))
 hubQuery

 ensDb_hs_111 <- anoHub[["AH116291"]]

# Gen bilgilerini e
 genes <- ensembldb::genes(ensDb_hs_111, return.type = "data.frame") 
 head(genes[,2:5])
# GWAS analizi sonuç dosyasının okunması
 setwd("D:/gwasbook/data/gwasresults")
 gwasRes <- read.table("gwashumanfaraco.tsv", sep="\t", header=TRUE)
 gwasRes[1:3, 1:5]

 topr::manhattan(gwasRes, build=ensDb_hs_111,
   protein_coding_only = FALSE,
   annotate=5e-8, annotate_with = "Gene_Symbol", #ID de olabilir
   color="blue", sign_thresh_color="red",
   shape=19, size=2, alpha=0.5, 
   label_size = 4, label_color="black", label_alpha=1)


# Örnek 8.48: locuszoomr paketiyle görselleştirme
# Bağımlılık – Örnek 8.47
# locuszoomr paketinin kurulması/yüklenmesi
 if(!require(locuszoomr)){
   install.packages("locuszoomr", repos="https://cloud.r-project.org")}
 library(locuszoomr)

# Önemli SNP'leri listele
 snpPeaks <- quick_peak(
  data=gwasRes,
  npeaks = 10, p_cutoff = 1e-05, #5e-08
  span = 1e06, min_points = 2,
  chrom = "chrom", pos = "pos", p = "p")
 topSnps <- gwasRes$rsid[snpPeaks]
 head(topSnps,5)

# Gen adıyla lokus bilgisi – Lokus tanımlama 1
 locInfo <- locus(data = gwasRes, gene = "GOT2P2", 
   fix_window = 1e7, ens_db = ensDb_hs_111,
   chrom = "chrom", pos = "pos", p = "p")

 summary(locInfo)
# Lokus grafiği
 locus_plot(loc=locInfo, 
  filter_gene_name = NULL, filter_gene_biotype = NULL, 
  xlab = NULL, cex = 1, cex.axis = 0.9, cex.lab = 1, cex.text = 0.7, 
  use_layout = TRUE, heights = c(3, 2), showExons = TRUE, maxrows = 20, 
  xticks = "bottom", border = FALSE, gene_col = "blue4", 
  exon_col = "blue4", exon_border = "blue4",
  text_pos = "top", recomb_col = "blue")

# Gen izleri (temel) grafiği
 genetracks(locInfo, filter_gene_biotype = NULL,
   gene_col = 'red', exon_col = 'blue', exon_border = 'darkgrey',
   maxrows = 10)

# ggplot2 ve plotly ile gen izi grafikleri
 gg_genetracks(locInfo)  # ggplot2
 genetrack_ly(locInfo)  # plotly


# Örnek 8.49: locuszoomr paketiyle görselleştirme 2
# Bağımlılık – Örnek 8.47, 8.48
# Aralığa dayalı (xrange) lokus bilgisi – Lokus tanımlama 2
 locInfo <- locus(data = gwasRes, xrange=c(2.2e7, 2.4e7), seqname="14", 
  flank = 1e4, ens_db = ensDb_hs_111, 
  chrom = "chrom", pos = "pos", p = "p")
 locus_plot(locInfo)


# Örnek 8.50: locuszoomr paketiyle görselleştirme 3
# Bağımlılık – Örnek 8.47, 8.48
 locInfo <- locus(data = gwasRes, xrange=c(2.1e7, 2.5e7), seqname="14", 
  flank = 1e6, ens_db = ensDb_hs_111, 
  chrom = "chrom", pos = "pos", p = "p")

 ldlinkToken <- "??3?c??a?d?5" #LDlink'ten alınmalıdır
 locInfo2 <- link_LD(locInfo, token = ldlinkToken)
 locus_plot(locInfo2)

# LD bilgisinin eklendiği GWAS sonuç dosyası
 gwasResLD <- locInfo2$data
 gwasResLD[1:5, c(1:3, 6,12,13)]

# LD bilgisinin eklendiği GWAS sonuçlarını disk dosyasına kaydetme
 write.table(gwasResLD, file="gwashumanfaracold.tsv", sep="\t",
   col.names=TRUE, row.names=FALSE, quote=FALSE)


# Örnek 8.51: locuszoomr paketiyle görselleştirme 4
# Bağımlılık – Örnek 8.47, 8.48

# eQTL grafiği	
 #ldlinkToken <- "??3?c??a?d?5" #LDlink'ten alınmalıdır
 locInfo <- locus(gwasResLD, gene = 'C14orf93', 
   flank = 1e6, LD = "ld", ens_db = ensDb_hs_111)
 locInfo2 <- link_eqtl(locInfo, token = ldlinkToken)
 head(locInfo2$LDexp, 3)  # eQTL verisi
 as.data.frame (table(locInfo2$LDexp$Gene_Symbol))
 as.data.frame(t(table(locInfo2$LDexp$Tissue)))
 eqtl_plot(locInfo2, tissue = "Brain - Cortex", eqtl_gene = "TRAC")
 overlay_plot(locInfo2, eqtl_gene = "TRAC")


# Örnek 9.1: GWAS panel verileri ve yapıları
 suppressPackageStartupMessages(installed <- require(snpStats))
 if (!installed) {
   if (!requireNamespace("BiocManager", quietly=TRUE))
     install.packages("BiocManager", repos="https://cloud.r-project.org")
   BiocManager::install("snpStats")
   suppressPackageStartupMessages(require(snpStats))  
 }

 setwd("D:/gwasbook/data/stmgp")
 famFile <- "simbin.fam"
 bimFile <- "simbin.bim"
 bedFile <- "simbin.bed"

 gwasData <- read.plink(bedFile, bimFile, famFile)
 str(gwasData)
 geno <- as.data.frame(gwasData$genotypes)
 geno[1:5,1:5]
 fam <- as.data.frame(gwasData$fam)
 fam[1:5,]
 map <- as.data.frame(gwasData$map)
 map[1:5,]


# Örnek 9.2: PLINK ile frekansları hesapla ve allfreqs.frqx'e yaz 
 setwd("D:/gwasbook/data/stmgp")
 system("plink --bfile simbin --freqx --out allfreqs")

# Frekansları oku ve göster
 freqAll <- read.table("allfreqs.frqx", sep="\t", head=TRUE)
 head(freqAll)

# Örnek 9.3: Vaka/kontrol verisinde vaka için allel frekansları
#
 setwd("D:/gwasbook/data/stmgp")
 system("plink --bfile simbin --freqx --filter-cases --out casefreqs")
 freqCases <- read.table("casefreqs.frqx", sep="\t", head=TRUE)
 head(freqCases)

# Örnek 9.4: Vaka/kontrol verisinde kontrol için allel frekansları
#
 setwd("D:/gwasbook/data/stmgp")
 system("plink --bfile simbin --freqx --filter-controls --out contfreqs")
 freqControls <- read.table("contfreqs.frqx", sep="\t", head=TRUE)
 head(freqControls)


# Örnek 9.5: SNP1 ve SNP2 için Ki-kare testi örnekleri 
# Bağımlılık – Örnek 9.3, 9.4
#
 controlsSNP1 <- as.numeric(freqControls[1, 5:7])
 casesSNP1 <- as.numeric(freqCases[1, 5:7])
 ctableSNP1 <- data.frame(cbind(casesSNP1, controlsSNP1))
 rownames(ctableSNP1) <- c("AA","AB","BB")
 print(ctableSNP1)
# Ki-kare testi
 chisq.test(x=ctableSNP1)
# SNP2 için vaka ve kontrol sayıları çapraz tablosu 
 controlsSNP2 <- as.numeric(freqControls[2, 5:7])
 casesSNP2 <- as.numeric(freqCases[2, 5:7])
 ctableSNP2 <- data.frame(cbind(casesSNP2, controlsSNP2))
 rownames(ctableSNP2) <- c("AA","AB","BB")
 print(ctableSNP2)	
# Ki-kare testi 
 chisq.test(x=ctableSNP2)

# Örnek 9.6: SNP1 için genotip vaka oranı grafiğinin çizilmesi 
# Bağımlılık – Örnek 9.5
#
 opar <- par(mfrow=c(1,2))
 barplot(ctableSNP1[,1] / (ctableSNP1[,1]  ctableSNP1[,2]),
   xlab="Genotip", ylab="Vaka oranı", 
   col=c("orange","blue","green"), main="SNP 1",
   names=c("AA","AB","BB"), las=1, ylim=c(0, 1))
 barplot(ctableSNP2[,1] / (ctableSNP2[,1]  ctableSNP2[,2]),
   xlab="Genotip", ylab="Vaka oranı", main="SNP 2",
   col=c("orange","blue","green"), 
   names=c("AA","AB","BB"), las=1, ylim=c(0, 1))
 par(opar)
	

# Örnek 9.7: İkili fenotipler için ilişkilendirme analizi 1
#
 setwd("D:/gwasbook/data/stmgp")
 system("plink --bfile simbin --assoc --out simbin")

 simbinGwas <- read.table("simbin.assoc", head=TRUE)
 head(simbinGwas)


# Örnek 9.8: İkili fenotipler için ilişkilendirme analizi 2
#
 setwd("D:/gwasbook/data/stmgp")
 system("plink --bfile simbin --assoc --adjust --out simbin")

 simbinGwas2 <- read.table("simbin.assoc.adjusted", head=TRUE)
 simbinGwas2[1:5, 1:7]


# Örnek 9.9: İkili fenotipler için ilişkilendirme analizi 3
#
 setwd("D:/gwasbook/data/stmgp")
 system("plink --bfile simbin --assoc --ci 0.95 --out simbin2")

 simbinGwas2 <- read.table("simbin2.assoc", head=TRUE)
 head(simbinGwas2)


# Örnek 9.10: İkili fenotipler için ilişkilendirme analizi 4
 setwd("D:/gwasbook/data/stmgp")
# Fenotip dosyası yapısı ve içeriği
 pheno <- read.table("sim.phe", head=TRUE)
 head(pheno)
# PLINK ile analiz
 plinkCmd <- "plink  --bfile simbin --assoc"
 plinkCmd <- paste(plinkCmd, "--pheno sim.phe --mpheno 2")
 plinkCmd <- paste(plinkCmd, " --out simbin3")
 system(plinkCmd)

# Sonuçlar
 simbinGwas3 <- read.table("simbin3.assoc", head=TRUE)
 head(simbinGwas3)


# Örnek 9.11: İkili fenotipler için ilişkilendirme analizi 5
 setwd("D:/gwasbook/stmgp")
 plinkCmd <- "plink  --bfile simbin --assoc "
 plinkCmd <- paste(plinkCmd, "--pheno sim.phe --pheno-name bphen ")
 plinkCmd <- paste(plinkCmd, "--out simbin3")
 system(plinkCmd)

 simbinGwas3 <- read.table("simbin2.assoc", head=TRUE)
 head(simbinGwas3)


# Örnek 9.12: İkili fenotipler için ilişkilendirme analizi 6
 setwd("D:/gwasbook/data/stmgp")
 plinkCmd <- "plink  --bfile simbin --logistic"
 plinkCmd <- paste(plinkCmd,"--out simbin4")
 system(plinkCmd)

 simbinGwas4 <- read.table("simbin4.assoc.logistic", head=TRUE)
 head(simbinGwas4)


# Örnek 9.13: İkili fenotipler için ilişkilendirme analizi 7
 setwd("D:/gwasbook/data/stmgp")
 covars <- read.table("sim.cov", header=TRUE)
 head(covars)
 plinkCmd <- "plink  --bfile simbin --logistic"
 plinkCmd <- paste(plinkCmd, "--covar sim.cov --covar-number 1-2")
 plinkCmd <- paste(plinkCmd,"--out simbin5")
 system(plinkCmd)

 simbinGwas5 <- read.table("simbin5.assoc.logistic", head=TRUE)
 head(simbinGwas5)


# Örnek 9.14: İkili fenotipler için ilişkilendirme analizi 8
 setwd("D:/gwasbook/data/stmgp")
 plinkCmd <- "plink  --bfile simbin --logistic beta"
 plinkCmd <- paste(plinkCmd, "--covar sim.cov --covar-number 1-2")
 plinkCmd <- paste(plinkCmd,"--out simbin5")
 system(plinkCmd)

 simbinGwas5 <- read.table("simbin5.assoc.logistic", head=TRUE)
 head(simbinGwas5)


# Örnek 9.15: İkili fenotipler için ilişkilendirme analizi 9
 setwd("D:/gwasbook/data/stmgp")
 plinkCmd <- "plink  --bfile simbin --logistic beta hide-covar"
 plinkCmd <- paste(plinkCmd, "--covar sim.cov --covar-number 1-2")
 plinkCmd <- paste(plinkCmd,"--out simbin6")
 system(plinkCmd)

 simbinGwas6 <- read.table("simbin6.assoc.logistic", head=TRUE)
 head(simbinGwas6)


# Örnek 9.16: İkili fenotipler için ilişkilendirme analizi 10
 setwd("D:/gwasbook/stmgp")
 system("plink  --bfile simbin --fisher --out simbin7")

 simbinGwas7 <- read.table("simbin7.assoc.fisher", head=TRUE)
 head(simbinGwas7)


# Örnek 9.17: İkili fenotipler için ilişkilendirme analizi 11
 setwd("D:/gwasbook/stmgp")
 system("plink  --bfile simbin --model --out simbin6")

 simbinGwas6 <- read.table("simbin6.model", head=TRUE)
 head(simbinGwas6, 10)



# Örnek 9.18: Kantitatif fenotipler için ilişkilendirme analizi 1
#
 setwd("D:/gwasbook/data/stmgp")
 quantPheno <- read.table("simquant.fam", header=TRUE)
 head(quantPheno)
 system("plink  --bfile simquant --assoc --out simquant1")
 simqGwas <- read.table("simquant1.qassoc", head=TRUE)
 head(simqGwas, 5)


# Örnek 9.19: Kantitatif fenotipler için ilişkilendirme analizi 2
 setwd("D:/gwasbook/data/stmgp")
 system("plink  --bfile simquant --linear --out simquant2")
 simqGwas2 <- read.table("simquant2.assoc.linear", head=TRUE)
 head(simqGwas2, 5)


# Örnek 9.20: Kantitatif fenotipler için ilişkilendirme analizi 3
#
 setwd("D:/gwasbook/data/stmgp")
 covars <- read.table("sim.cov", header=TRUE)
 head(covars, 5)
 plinkCmd <- "plink  --bfile simquant --linear"
 plinkCmd <- paste(plinkCmd, "--covar sim.cov --covar-number 1-2")
 plinkCmd <- paste(plinkCmd,"--out simquant3")
 system(plinkCmd)

 simqGwas3 <- read.table("simquant3.assoc.linear", head=TRUE)
 head(simqGwas3, 5)


# Örnek 9.21: PLINK ile ilişkilendirme analizi
 setwd("D:/gwasbook/data/disease")
 system("plink --bfile disease --assoc --adjust --out disease1")


# Örnek 9.22: GWAS analiz sonuçlarının incelenmesi 
# Bağımlılık – Örnek 9.21
#
 setwd("D:/gwasbook/data/disease")
 gwasResults <- read.table("disease1.assoc", head=TRUE)
 head(gwasResults, 5)
 gwasAdjusted <- read.table("disease1.assoc.adjusted", head=TRUE)
 gwasAdjusted[1:5, c(1:3, 5:6, 9:10)]


# Örnek 9.23: GWAS analiz sonuçlarının inceleme ve görselleştirme
# Bağımlılık – Örnek 9.22
#
 setwd("D:/gwasbook/data/disease")
 gwasResults <- read.table("disease1.assoc", head=TRUE)
 gwasResults <- gwasResults[!is.na(gwasResults$P),]
 colPal0 <- palette(c("dodgerblue", "orange3"))

 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }
 manhattan(gwasResults, chr = "CHR", bp = "BP", p = "P", col=colPal0)
 qqman::qq(gwasResults$P)

# Örnek 9.24: Kalite kontrolü
#
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- paste("plink --bfile disease ",
 "--mind 0.1 ",
 "--geno 0.05 ",
 "--maf 0.02 ",
 "--hwe 0.000005 ",
 "--me 0.05 0.1 ",
 "--make-bed --out disease_qc")
 system(plinkCmd)	

 system("plink --bfile disease_qc --assoc --adjust --out disease2")
 
 gwasResults <- read.table("disease2.assoc", head=TRUE)
 head(gwasResults)
 gwasResults <- gwasResults[!is.na(gwasResults$P),]
 colPal0 <- palette(c("dodgerblue", "orange3"))

 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }	
 manhattan(gwasResults, chr = "CHR", bp = "BP", p = "P", col=colPal0)
 qqman::qq(gwasResults$P)

# Örnek 9.25: Kalite kontrolü ve ilişkilendirme analizi
#
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- paste("plink --bfile disease ",
 "--mind 0.1 ",
 "--geno 0.05 ",
 "--maf 0.02 ",
 "--hwe 0.000005 ",
 "--me 0.05 0.1 ",
 "--assoc --adjust --out disease3")
 system(plinkCmd)	

 gwasResults <- read.table("disease3.assoc", head=TRUE)
 head(gwasResults)

# Örnek 9.26: Kalite kontrolü ve ilişkilendirme analizi
#
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- paste("plink --bfile disease ",
 "--mind 0.1 ",
 "--geno 0.05 ",
 "--maf 0.02 ",
 "--hwe 0.000005 ",
 "--cluster --mds-plot 2",
 "--out disease")
 system(plinkCmd)

 mds <- read.table("disease.mds", head=TRUE)
 head(mds)

 plot(mds$C1, mds$C2, xlab="Koordinat 1", ylab="Koordinat 2",
   main="MDS Grafiği", type="n")
 text(mds$C1, mds$C2, labels = row.names(mds), pos=4, cex=0.7)
 points(mds$C1, mds$C2, pch=19, cex=0.9, col=as.factor(mds$FID))



# Örnek 9.27: Populasyon yapısı ile ilişkilendirme analizi
#
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- paste("plink --bfile disease ",
 "--mind 0.1 ",
 "--geno 0.05 ",
 "--maf 0.02 ",
 "--hwe 0.0000005 ",
 "--covar disease.mds --covar-name C1 C2 ",
 "--logistic --adjust --hide-covar --out disease4")
 system(plinkCmd)

 gwasResults <- read.table("disease4.assoc.logistic", head=TRUE)
 head(gwasResults)
 gwasResults <- gwasResults[!is.na(gwasResults$P),]
 colPal0 <- palette(c("dodgerblue", "orange3"))
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }	
 manhattan(gwasResults, chr = "CHR", bp = "BP", p = "P", col=colPal0)
 qqman::qq(gwasResults$P)


# Örnek 9.28: Düzeltilmiş p-değerleri
# Bağımlılık – Örnek 9.27
#
 setwd("D:/gwasbook/data/disease")
 gwasResults <- read.table("disease4.assoc.logistic", head=TRUE)
 gwasResults <- gwasResults[!is.na(gwasResults$P),]

 gwasResults2 <- read.table("disease4.assoc.logistic.adjusted", head=TRUE)
 dim(gwasResults2)
 head(gwasResults2, 3)

# Genom boyu önemlilik düzeyine göre ilişkili SNP'ler
 idx <- which(gwasResults2$UNADJ < 5e-8)
 gwasResults2$SNP[idx]
# Bonferroni düzeltmesine göre ilişkili SNP'ler
 idx <- which(gwasResults2$BONF < 0.05)
 gwasResults2$SNP[idx]
# BH düzeltmesine göre ilişkili SNP'ler
 idx <- which(gwasResults2$FDR_BH < 0.05)
 gwasResults2$SNP[idx]


# Örnek 9.29: Cinsiyete göre düzeltmeli GWAS
 setwd("D:/gwasbook/data/disease")
 plinkCmd <- paste("plink --bfile disease ",
 "--mind 0.1 ",
 "--geno 0.05 ",
 "--maf 0.02 ",
 "--hwe 0.0000005 ",
 "--sex --covar disease.mds --covar-name C1 C2 ",
 "--logistic --adjust --hide-covar --out disease5")
 system(plinkCmd)

 gwasResults <- read.table("disease5.assoc.logistic", head=TRUE)
 head(gwasResults)


# Örnek 9.30: Keçi adaptasyon proje verisini okuma ve kalite kontrolü
# PLINK bed,bim ve fam formatındaki dosyaları oku
 setwd("D:/gwasbook/data/goat")
 plinkData <- genio::read_plink("goat")
 fam <- plinkData$fam
 bim <- plinkData$bim
 geno <- t(plinkData$X)

 dim(geno)
 geno[1:5, 1:2]
 head(bim)
# A tibble: 6 × 6
 head(fam)
# A tibble: 6 × 6


# Örnek 9.31: Keçi adaptasyon proje verisinde kalite kontrolü
 setwd("D:/gwasbook/data/goat")
 plinkCmd <- "plink --bfile goat --allow-no-sex --chr-set 29 "
 plinkCmd <- paste(plinkCmd, "--autosome --not-chr 0 ")
 plinkCmd <- paste(plinkCmd, "--mind 0.1 --geno 0.05 ")
 plinkCmd <- paste(plinkCmd, "--maf 0.02 --me 0.05 0.1 ")
 plinkCmd <- paste(plinkCmd, "--make-bed --out goatqc")
 system(plinkCmd) 


# Örnek 9.32: Kalite kontrolünden geçen veride LD budaması
#
# Budanacak varyantların saptanması
 plinkCmd <- "plink --bfile goatqc --allow-no-sex --chr-set 29"
 plinkCmd <- paste(plinkCmd, "--indep-pairwise 1000 50 0.20 ")
 plinkCmd <- paste(plinkCmd, "--out goatqcld")
 system(plinkCmd) 

# Budamanın gerçekleştirilmesi
 plinkCmd <- "plink --bfile goatqc --allow-no-sex --chr-set 30"
 plinkCmd <- paste(plinkCmd, "--exclude goatqcld.hh ")
 plinkCmd <- paste(plinkCmd, "--extract goatqcld.prune.in ")
 plinkCmd <- paste(plinkCmd, "--make-bed --out goatqcld")
 system(plinkCmd) 


# Örnek 9.33: LD budaması yapılmış veriyi raw (dosage) formatına çevirme
# Bağımlılık – Örnek 9.32
#
 plinkCmd <- "plink --bfile goatqcld --allow-no-sex --chr-set 29 " 
 plinkCmd <- paste(plinkCmd, "--not-chr 0 --recode A --out goatnumericqc")
 system(plinkCmd) 


# Örnek 9.34: Sayısal formattaki dosyayı okuma 
 setwd("D:/gwasbook/data/goat")
 plinkData <- read.table("goatnumericqc.raw", header=TRUE)
 dim(plinkData)
 plinkData[1:5, 1:7]
# Genotip verisi
 geno <- plinkData[,-c(1:6)]
 dim(geno)

# Eksik genotip sayısı
 sum(is.na(geno))
 sum(is.na(geno))/ (dim(geno)[1]*dim(geno)[2])


# Örnek 9.35: Genotip tamamlama ve fenotiplerin simülasyonu
# Bağımlılık – Kod 9.1, Örnek 9.34
# Genotipi tamamla
 geno <- imputegeno(geno)
 sum(is.na(geno))/ (dim(geno)[1]*dim(geno)[2])



# Örnek 9.36: Fenotiplerin simülasyonu
# Bağımlılık – Kod 9.2; Örnek 9.35
#
# Fenotiplerin simülasyonu 
# Kalıtım derecelerini ata
 h2 <- c(0.6, 0.3, 0.05)  # Üç özellik için kalıtım dereceleri
 nq <- 50  # QTL sayısı
 simPheno <- simulatepheno(geno=geno, h2=h2, nq=nq)

 FID <- plinkData$FID
 IID <- plinkData$IID
 iddf <- data.frame(FID=FID, IID=IID)
 y <- cbind(iddf, simPheno$y)
 head(y)	
 cor(y[,3:5])
 pairs(y[,3:5], col="dodgerblue", pch=19, cex=0.8)


# Örnek 9.37: Simüle edilen fenotipler ve genotipin kaydedilmesi
# Bağımlılık – Örnek 9.35, 9.36
#
# QTL'leri kaydet
 write.table(simPheno$QTL, "goatsimqtls1.dat", sep="\t", 
    col.names=TRUE, row.names=FALSE, quote=FALSE)
# Fenotipi kaydet
 write.table(y, "goatpheno1.dat", sep="\t",
   col.names=TRUE, row.names=FALSE, quote=FALSE)
# Genotipi kaydet
 write.table(geno, "goatnumericgeno.dat", sep="\t", 
   row.names=FALSE, col.names=TRUE, quote=FALSE)


# Örnek 9.38: Genotip dosyasının PLINK raw formatında kaydedilmesi
# Bağımlılık – Örnek 9.37
#
 setwd("D:/gwasbook/data/goat")
 plinkData <- read.table("goatnumericqc.raw", header=TRUE)
 impGeno <- read.table("goatnumericgeno.dat", sep="\t", head=TRUE) 
 plinkDataC <- plinkData[, 1:6]
 plinkDataC <- cbind(plinkDataC, impGeno)
 write.table(plinkDataC, "goatnumericimp.raw", sep=" ",
   row.names=FALSE, col.names=TRUE, quote=FALSE)


# Örnek 9.39: Populasyon yapısı için MDS analizi
# Bağımlılık – Örnek 9.37, 9.39
#
 setwd("D:/gwasbook/data/goat")
 plinkCmd <- "plink --bfile goatqcld --chr-set 29 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex --genome --out goat")
 system(plinkCmd)
 plinkCmd <- "plink --bfile goatqcld --chr-set 29 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex --read-genome goat.genome")
 plinkCmd <- paste(plinkCmd, " --cluster --mds-plot 2 --out goat")
 system(plinkCmd)


# Örnek 9.40: Trait2 için GWAS analizi 
# Bağımlılık – Örnek 9.37, 9.39
#
 plinkCmd <- "plink --bfile goatqcld --chr-set 29 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex")
 plinkCmd <- paste(plinkCmd, "--pheno goatpheno1.dat --pheno-name Trait2")
 plinkCmd <- paste(plinkCmd, "--covar goat.mds --covar-name C1 C2")
 plinkCmd <- paste(plinkCmd," --linear hide-covar")
 plinkCmd <- paste(plinkCmd,"--out goatgwas1")
 system(plinkCmd)


# Örnek 9.41: GWAS analiz sonuçlarını inceleme ve görselleştirme 
# Bağımlılık – Örnek 9.40
#
 setwd("D:/gwasbook/data/goat")
 gwasResults1 <- read.table("goatgwas1.assoc.linear", head=TRUE)
 head(gwasResults1)

# Yerleştirilmeyen SNP'leri ayıkla
 gwasResults1 <- gwasResults1[gwasResults1$CHR!="0",]
 gwasResults1 <- gwasResults1[!is.na(gwasResults1$P),]

# QQ ve Manhattan grafiklerini çiz
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }
 colPal1 <- palette(c("dodgerblue", "orange"))
 qqman::manhattan(gwasResults1, chr = "CHR", bp = "BP", p = "P",
    col=colPal1)
 qqman::qq(gwasResults1$P)
 abline(h=-log10(5e-8), col="blue", lwd=1, lty=3)

# Önemli bulunan sinyallerin listelenmesi
 idx <- which(gwasResults1$P < 5e-8)
 length(idx)

 head(gwasResults1[idx,])
# Simüle edilen QTL'ler dosyasını oku ve 2. özellik indisleri al
 qtlIdx <- read.table("goatsimqtls1.dat", header=T)
 qtlIdx2 <- qtlIdx$Trait2
# Önemli bulunan ilişkilerde QTL'leri ara
# Varsa TP, yoksa FP olarak işaretle
 tpIdx <- which(idx %in% qtlIdx2)
 fpIdx <- idx[-tpIdx]

# TP listele
 length(tpIdx)
 head(gwasResults1[tpIdx,])
# FP listele
 length(fpIdx)
 head(gwasResults1[fpIdx,])	


# Örnek 9.42: Tüm fenotipler için GWAS
 setwd("D:/gwasbook/data/goat")
 plinkCmd <- "plink  --bfile goatqcld --chr-set 29 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex --pheno goatpheno1.dat ")
 plinkCmd <- paste(plinkCmd, "--all-pheno ")
 plinkCmd <- paste(plinkCmd, "--covar goat.mds --covar-name C1 C2 ")
 plinkCmd <- paste(plinkCmd,"--linear hide-covar --adjust")
 plinkCmd <- paste(plinkCmd,"--out goatgwas2")
 system(plinkCmd)
# Trait3 için analiz sonuçlarını inceleme
 gwasResults3 <- read.table("goatgwas2.Trait3.assoc.linear", head=TRUE)
 head(gwasResults3)
# QQ ve Manhattan grafiklerini çiz
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }
 colPal1 <- palette(c("dodgerblue", "orange"))
 qqman::manhattan(gwasResults3, chr = "CHR", bp = "BP", p = "P",
    col=colPal1)
 qqman::qq(gwasResults3$P)
 abline(h=-log10(5e-8), col="blue", lwd=1, lty=3)


# Örnek 9.43: Trait3 için GWAS analizi sonuçlarının incelenmesi
# Bağımlılık – Örnek 9.42
#
# Yerleştirilmeyen SNP'leri ayıkla
 gwasResults3 <- gwasResults3[gwasResults3$CHR!="0",]
 gwasResults3 <- gwasResults3[!is.na(gwasResults3$P),]

# Genom-boyu önemlilik eşiğine göre önemli ilişki sinyalleri
 idx <- which(gwasResults3$P < 5e-8)
 length(idx)

# Bonferroni düzeltmesine göre önemli ilişki sinyalleri
 pAdjBonf <- p.adjust(gwasResults3$P, method="bonf")
 idx <- which(pAdjBonf < 0.05)
 length(idx)
 gwasResults3[idx,]
# FWER eşiğine göre alteernatif listelem
 idx <- which(gwasResults3$P < 0.05/length(gwasResults3$P))
 length(idx)
 gwasResults3[idx,]


# Örnek 9.44: Pirinç panelindeki çeşitlerin coğrafi dağılımları
 setwd("D:/gwasbook/data/sativa")
 germplasm <- read.csv("sativagermplasm.csv", skip=1)
 str(germplasm)
 range(germplasm$Latitude, na.rm = T)
 range(germplasm$Longitude, na.rm = T)

# Koordinat verisi
 coords <- cbind(germplasm$Longitude, germplasm$Latitude)
 coords[1:3,]

# Harita işlemleri
 if(!require(rworldmap)){
  install.packages("rworldmap", repos="https://cloud.r-project.org")
  require(rworldmap)
 }
 plot(rworldmap::getMap(resolution="low"))
 points(coords, pch = 19, cex = 1.5, col="red")


# Örnek 9.45: Pirinç paneli verilerinin yapısı ve içeriği
# PLINK bed,bim ve fam formatındaki dosyaları oku
 setwd("D:/gwasbook/data/sativa")
 ped <- read.table("sativa.ped")
 fam <- read.table("sativa.fam")
 map <- read.table("sativa.map")

# PED verisi
 dim(ped)
 ped[1:5, 1:15]

# MAP verisi
 dim (map)
 head(map)
 tail(map)

# FAM verisi
 dim(fam)
 head(fam)

# Fenotip verisi
 pheno <- read.table("sativa.phe", header=TRUE, sep="\t",
   stringsAsFactors = FALSE) 

 str(pheno)
 pheno[1:5, 1:3]
 dim(pheno)


# Örnek 9.46: Pirinç panel verisinde kalite kontrolü
# 
 setwd("D:/gwasbook/data/sativa")
 system("plink --file sativa --make-bed --out sativa")

 system("plink --bfile sativa --freq --missing --out sativa")


# Örnek 9.47: MAF ve eksik genotiplerin incelenmesi ve görselleştirilmesi
# data.table paketini yükle
 suppressPackageStartupMessages(installed <- require(data.table))
 if (!installed) {
   install.packages("data.table", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(data.table))
 }

# Frekans ve eksik değerleri oku
 setwd("D:/gwasbook/data/sativa")
 maf <- fread("sativa.frq", header=TRUE)
 imiss <- fread("sativa.imiss", header=TRUE)
 lmiss <- fread("sativa.lmiss", header=TRUE)

# Histogramları çiz
 opar <- par(mfrow=c(1,3))
 hist(maf$MAF, breaks=50, col="gray", 
   main="MAF Histogramı", xlab="MAF Oranı")
 abline(v=0.02, lty=2, col="red", lwd=3)
 hist(lmiss$F_MISS, breaks=35, col="gray",
   main="Varyantlara göre eksiklikler", xlab="Eksiklik %")
 abline(v=0.05, lty=2, col="red", lwd=3)
 hist(imiss$F_MISS, breaks=35, col="gray",
   main="Bireylere göre eksiklikler", xlab="Eksiklik %")
 abline(v=0.1, lty=2, col="red", lwd=3)
 par(opar)


# Örnek 9.48: LD hesaplanması ve görselleştirme
# data.table ve plyr paketini yükle
 suppressPackageStartupMessages(installed <- require(data.table))
 if (!installed) {
   install.packages("data.table", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(data.table))
 }
 suppressPackageStartupMessages(installed <- require(plyr))
 if (!installed) {
   install.packages("plyr", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(plyr))
 }

 setwd("D:/gwasbook/data/sativa")
 plink <- "plink --bfile sativa --r2 "
 plink <- paste(plink, "--ld-window 100 --ld-window-kb 100 ")
 plink <- paste(plink, "--ld-window-r2 0 --out sativa")
 system(plink)

 ldData <- data.table::fread("sativa.ld", data.table=FALSE)
 binWide <- 100
 ldData$dist <- ldData$BP_B - ldData$BP_A
 ldData$bin <- round(ldData$dist/binWide, 0)
 ldData2 <- plyr::ddply(ldData, .(bin), summarise, meanr2 = mean(R2))
 write.table(ldData2, "ld_in_100bp_bin.csv", sep=",", 
   row.names=FALSE, quote=FALSE)
 ldData <- read.csv("ld_in_100bp_bin.csv")
 plot(ldData$bin*100, ldData$meanr2, pch=19, col="gray",
   xlab="Fiziki uzaklık (bp)", ylab="R2", main="LD bozunma oranı")
 abline(h=0.3, col="red")


# Örnek 9.49: Genotipik kalite kontrolü
 setwd("D:/gwasbook/data/sativa")
 plinkCmd <- "plink --bfile sativa --allow-no-sex --chr-set 12 "
 plinkCmd <- paste(plinkCmd, "--autosome --not-chr 0 ")
 plinkCmd <- paste(plinkCmd, "--mind 0.1 --geno 0.05 --maf 0.02")
 plinkCmd <- paste(plinkCmd, "--make-bed --out sativaqc")
 system(plinkCmd) 



# Örnek 9.50: LD budaması
# Bağımlılık – Örnek 9.49
#
# Budanacak varyantların saptanması
 plinkCmd <- "plink --bfile sativaqc --allow-no-sex --chr-set 12"
 plinkCmd <- paste(plinkCmd, "--indep-pairwise 1000 50 0.50 ")
 plinkCmd <- paste(plinkCmd, "--out sativaqcld")
 system(plinkCmd) 

# Budamanın gerçekleştirilmesi
 plinkCmd <- "plink --bfile sativaqc --allow-no-sex --chr-set 12"
 plinkCmd <- paste(plinkCmd, "--extract sativaqcld.prune.in ")
 plinkCmd <- paste(plinkCmd, "--make-bed --out sativaqcld")
 system(plinkCmd)


# Örnek 9.51: Fenotipik kalite kontrolü
# Bağımlılık – Örnek 9.49
#
 setwd("D:/gwasbook/data/sativa")
# Fenotip dosyası
 pheno <- read.table("sativa.phe", header=TRUE, sep="\t",
   stringsAsFactors = FALSE) 
 n <- nrow(pheno)
 nMiss <-sapply(pheno, function(x) sum(length(which(is.na(x)))))
 nMiss <- data.frame(n=nMiss, yuzde=round(nMiss / n,2))
 nMiss

# Protein içeriği özelliğinde eksik fenotipli örneklemelerin saptanması
 idx <- which(is.na(pheno$Protein.content))
 missSamps <- data.frame(FID=fam[idx,1], IID=fam[idx,2])
 head(missSamps)

# Eksik fenotipli örneklem kimlikleri dosyasının oluşturulması
 write.table(missSamps, "missphenos.txt", 
   col.names=F, row.names=F, quote=F)

# Eksik fenotipli örneklemlerin BED dosyasından kaldırılması
 plinkCmd <- "plink --bfile sativaqcld --remove missphenos.txt "
 plinkCmd <- paste(plinkCmd, "--make-bed --out sativaprotein")
 system(plinkCmd)

# Eksik fenotipli örneklemlerin Fenotip verisinden kaldırılması
 protein <- pheno$Protein.content[-idx]
 protein <- data.frame(FID=fam[-idx,1], IID=fam[-idx,2], protein=protein)
 head(protein)
# Fenotip dosyası oluşturulması
 write.table(protein, "sativaprotein.phe", sep="\t",
  col.names=TRUE, row.names=FALSE, quote=FALSE)


# Örnek 9.52: MDS analizi ile populasyon yapısı
# Bağımlılık – Örnek 9.51
#
 setwd("D:/gwasbook/data/sativa")
 plinkCmd <- "plink --bfile sativaprotein --chr-set 12 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex --genome --out sativa")
 system(plinkCmd)
 plinkCmd <- "plink --bfile sativaprotein --chr-set 12 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex --read-genome sativa.genome")
 plinkCmd <- paste(plinkCmd, " --cluster --mds-plot 2 --out sativa")
 system(plinkCmd)


# Örnek 9.53: GWAS analizi
# Bağımlılık – Örnek 9.51, 9.52
 setwd("D:/gwasbook/data/sativa")
 plinkCmd <- "plink --bfile sativaprotein --chr-set 12 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex")
 plinkCmd <- paste(plinkCmd, "--pheno sativaprotein.phe ")
 plinkCmd <- paste(plinkCmd, "--pheno-name protein ")
 plinkCmd <- paste(plinkCmd, "--covar sativa.mds --covar-name C1 C2")
 plinkCmd <- paste(plinkCmd," --linear hide-covar")
 plinkCmd <- paste(plinkCmd,"--out sativaproteingwas")
 system(plinkCmd)


# Örnek 9.54: GWAS analizi sonuçlarının incelenmesi ve raporlanması
# Bağımlılık – Örnek 9.53
#
 setwd("D:/gwasbook/data/sativa")
 gwasResults <- read.table("sativaproteingwas.assoc.linear", head=TRUE)
 head(gwasResults)

# Yerleştirilmeyen SNP'leri ayıkla
 gwasResults <- gwasResults[gwasResults$CHR!="0",]
 gwasResults <- gwasResults[!is.na(gwasResults$P),]

# QQ ve Manhattan grafiklerini çiz
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman)) }
 colPal <- palette(c(rgb(0,.7,0,.3), rgb(1,0,0,.3)))
 opar <- par(ask=T)
 qqman::manhattan(gwasResults, chr = "CHR", bp = "BP", p = "P",
    col=colPal, cex=1)
 qqman::qq(gwasResults$P)
 abline(h=-log10(5e-8), col="blue", lwd=1, lty=3)
 par(opar)
# Önemli bulunan ilişkilerin listelenmesi
 idx <- which(gwasResults$P < 5e-8)
 length(idx)
 gwasResults[idx,]

# Örnek 9.55: PLINK2 ile GWAS
 setwd("D:/gwasbook/data/sativa")
 system("plink2 --bfile sativaprotein --recode vcf --out sativaprotein")
 plinkCmd <- "plink2 --bfile sativaprotein --chr-set 12 --autosome "
 plinkCmd <- paste(plinkCmd, "--allow-no-sex")
 plinkCmd <- paste(plinkCmd, "--pheno sativaprotein.phe ")
 plinkCmd <- paste(plinkCmd, "--pheno-name protein ")
 plinkCmd <- paste(plinkCmd, "--covar sativa.mds --covar-name C1 C2")
 plinkCmd <- paste(plinkCmd," --glm hide-covar")
 plinkCmd <- paste(plinkCmd,"--out sativaproteingwas")
 system(plinkCmd)

 gwasResults <- read.table("sativaproteingwas.protein.glm.linear",
   head=TRUE, comment.char = "", check.names = FALSE)
 head(gwasResults)

# Yerleştirilmeyen SNP'leri ayıkla
 gwasResults <- gwasResults[!is.na(gwasResults$P),]
 colnames(gwasResults) <- c("CHR","POS", "SNP",	"REF", "ALT",
  "A1"	,"TEST",	 "OBS_CT	", "BETA", "SE",	"T_STAT", "P", "ERRCODE")

# QQ ve Manhattan grafiklerini çiz
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }
 colPal <- palette(c("dodgerblue", "orange"))
 opar <- par(mfrow=c(1,2))
 qqman::manhattan(gwasResults, chr = "CHR", bp = "POS", p = "P",
    col=colPal, cex=1, main="Manhattan grafiği")
 qqman::qq(gwasResults$P, main="QQ grafiği")
 abline(h=-log10(5e-8), col="blue", lwd=1, lty=3)
 par(opar)

# Genom-boyu önemli bulunan ilişkilerin listelenmesi
 idx <- which(gwasResults$P < 5e-8)
 length(idx)

 gwasResults[idx, c("CHR","SNP", "POS", "P")]


# Örnek 9.56: KING ile GWAS analizi
 setwd("D:/gwasbook/data/stmgp")
 kingCmd <- "king -b simbin.bed --lmm "
 kingCmd <- paste(kingCmd, "--phefile sim.phe --trait qphen ")
 kingCmd <- paste(kingCmd, "--covfile sim.cov --covariate COV1,COV2 ")
 kingCmd <- paste(kingCmd, "--invnorm --maxP 5e-8")
 system(kingCmd)

 gwasResults <- read.table("king_lmm_qphen.txt", header=TRUE)
 head(gwasResults)

# Genomik h2
 h2 <- mean(gwasResults$H2)
 h2 

# Görselleştirme için veri çerçevesi oluştur
 gwasResults2 <- gwasResults[, c(2,1,3,12)]
 colnames(gwasResults2) <- c("CHR", "SNP", "BP", "P")
 opar <- par(mfrow=c(1,2))
 # qqman paketi sistemde kurulu olmalıdır
 qqman::manhattan(gwasResults2)
 qqman::qq(gwasResults2$P)
 par(opar)


# Örnek 9.57: KING ile GWAS analizinde önemli bulunan ilişkiler
# Bağımlılık – Örnek 9.55
# 
# Genom-boyu önemlilik eşiğine göre önemli ilişkilendirmeler
 gwasResultsGW <- subset(gwasResults, Pvalue < 5e-8)
 gwasResultsGW <- gwasResultsFdr[with(gwasResultsGW, order(Chr, Pos)),]
 gwasResultsGW[, c(2,1,3,12)]

# FDR düzeltmesine göre önemli ilişkilendirmeler
 gwasResults$Fdr <- p.adjust(gwasResults$Pvalue)
 gwasResultsFdr <- subset(gwasResults, Fdr < 0.05)
 gwasResultsFdr <- gwasResultsFdr[with(gwasResultsFdr, order(Chr, Pos)),]
 gwasResultsFdr[, c(2,1,3,12:13)]


# Örnek 9.58: rTASSEL paketinin kurulması/yüklenmesi
 options(java.parameters = c("-Xmx12g", "-Xms12g"))
 suppressPackageStartupMessages(installed <- require(rTASSEL))
 if(!installed) {
   if(!requireNamespace("devtools", quietly=TRUE))
     install.packages("devtools", repos="https://cloud.r-project.org")
   devtools::install_bitbucket("bucklerlab/rTASSEL", ref="master",
     build_vignettes=FALSE)
   suppressPackageStartupMessages(library(rTASSEL))  
 }


# Örnek 9.59: Veri hazırlama ve dönüştürme
# 
 setwd("D:/gwasbook/data/rtassel")
# Orijinal Fenotip dosyasını oku
 phenoDf <- read.table("sativa.phe", check.names=F, sep="\t", header=TRUE)
# Bazı fenotipleri seçerek yeni bir veri seti oluştur
 phenoSubDf <- phenoDf[,c("HybID", "Plant height", "Seed volume", 
    "Protein content", "Awn presence", "Blast resistance")]
 colnames(phenoSubDf) <- c("<Trait", "plheight", "seedvol", 
   "protein", "awn", "blastr")
# Fenotipi eksik olanları temize
 phenoSubDf <- na.omit(phenoSubDf)
# FAM dosyasını oku ve fenotipi olanları seç
 fam <- read.table("sativaqcld.fam")
 head(fam)

 idx <- which(phenoSubDf[,1] %in% fam[,1])
 keepSamples <- fam[idx, c(1,2)]
 taxonIds <- paste0(fam[,1],"_",fam[,2])[idx]
 phenoSubDf <- phenoSubDf[idx,]
 phenoSubDf[,1] <- taxonIds
# Yeni Fenotip veri setini göster
 dim(phenoSubDf)
 head(phenoSubDf)
# Yeni veri setini sativapheno.dat dosyasına kaydet
 write.table(phenoSubDf, file="sativapheno.dat", sep="\t",
   col.names=TRUE, row.names=FALSE, quote=FALSE)

# Eksik fenotiplere sahip olanların ID'lerini bir dosyaya kaydet
 write.table(keepSamples, file="keepsamples.txt",
   col.names=FALSE, row.names=FALSE, quote=FALSE)
# Eksik fenotipli olanları PLINK dosyasından sil
 plinkCmd <- "plink --bfile sativaqcld --keep keepsamples.txt"
 plinkCmd <- paste(plinkCmd, "--make-bed --out sativa")
 system(plinkCmd)
# PLINK BED formatındaki dosyadan VCF formatında dosya oluştur
 system("plink --bfile sativa --recode vcf --out sativa")


# Örnek 9.60: Veri okuma ve hazırlama
# Bağımlılık – Örnek 9.58, 9.59
#
 setwd("D:/gwasbook/data/rtassel")
 #fileGeno <- file.path(getwd(),"sativa.hmp.txt")
 fileGeno <- file.path(getwd(),"sativa.vcf")
 filePheno <- file.path(getwd(),"sativapheno.dat")

# Genotip dosyasını oku
 riceGeno <- rTASSEL::readGenotypeTableFromPath(path = fileGeno)
# Fenotip dosyasını oku
 ricePheno <- rTASSEL::readPhenotypeFromPath(path=filePheno)

# riceGeno nesnesinin incelenmesi
 riceGeno

 slotNames(riceGeno)
# ricePheno nesnesinin incelenmesi
 ricePheno

 slotNames(ricePheno)

# TasselGenotypePhenotype sınıfından nesnede birleştirme
 riceGenoPheno <- riceGeno
 riceGenoPheno@jPhenotypeTable <- ricePheno@jPhenotypeTable
 riceGenoPheno

# Alternatif yol (# karakterlerini silerek uygulanır)
# riceGenoPheno <- rTASSEL::readGenotypePhenotype(
#   genoPathOrObj    = riceGeno,
#  phenoPathDFOrObj = ricePheno
# )


# Örnek 9.61: Veri okuma ve hazırlama
# Bağımlılık – Örnek 9.60
#
 tasReport <- rTASSEL::getSumExpFromGenotypeTable(
    tasObj = riceGenoPheno
 )
 tasReport
 SummarizedExperiment::colData(tasReport)
 SummarizedExperiment::rowData(tasReport)
 SummarizedExperiment::rowRanges(tasReport)
 ricePhenoDF <- rTASSEL::getPhenotypeDF(tasObj = riceGenoPheno)
 head(ricePhenoDF)


# Örnek 9.62: Veri okuma ve hazırlama
# Bağımlılık – Örnek 9.60
#
 ricePheno2 <- read.table(filePheno, header=TRUE)
 colnames(ricePheno2)[1] <- "Taxon"

# TasselGenotypePhenotype nesnesine dönüştürme
 ricePheno2 <- rTASSEL::readPhenotypeFromDataFrame(
   phenotypeDF = ricePheno2,
   taxaID = "Taxon",
   attributeTypes = NULL
 )

 riceGenoPheno2 <- rTASSEL::readGenotypePhenotype(
    genoPathOrObj = riceGeno,
    phenoPathDFOrObj = ricePheno2,
    taxaID = "Taxon",
    attributeTypes = NULL
 )

 riceGenoPheno2


# Örnek 9.63: GRM matrisinin oluşturulması
# Bağımlılık – Örnek 9.60
#
 riceKin <- rTASSEL::kinshipMatrix(
   tasObj = riceGenoPheno,
   method = "Centered_IBS",
   maxAlleles = 6,
   algorithmVariation = "Observed_Allele_Freq"
 )
 riceKin
# Uzaklıklar matrisi
 riceDM <- rTASSEL::distanceMatrix(riceGenoPheno)
 riceDM


# Örnek 9.64: PCA analizi
# Bağımlılık – Örnek 9.60
#
 ricePCA <- rTASSEL::pca(
  riceGenoPheno,
  useCovariance = TRUE,
  limitBy = "number_of_components",
  nComponents = 3,
  minEigenval = 0,
  totalVar = 0.5
 )

 names(ricePCA)
 ricePC <- ricePCA$PC_Datum
 ricePC

# Çok boyutlu ölçeklendirme 
 riceMDS <- rTASSEL::mds(
   riceDM, 
   nAxes = 4, 
   removeNaN = TRUE)
 riceMDS


# Örnek 9.65: Fenotip ve kovaryetler dosyasının okunması
# Bağımlılık – Örnek 9.60, 9.64
#
 setwd("D:/gwasbook/data/rtassel")
# Daha önce oluşturulmuşsa bu bloku atla
 covFile <- cbind(ricePhenoDF, ricePC[,2:4])
 write.table(covFile, file="sativacovars.dat", sep="\t",
   row.names = F, col.names = T, quote = F)

# Fenotipkovaryet dosyasını oku
 fileCovars <- file.path(getwd(),"sativacovars.dat")
 riceCovars <- rTASSEL::readPhenotypeFromPath(fileCovars)
 riceCovars
# TASSEL nesnesi oluştur
 riceGenoPheno <- rTASSEL::readGenotypePhenotype(
    genoPathOrObj = riceGeno,
    phenoPathDFOrObj = riceCovars,
    taxaID = "taxa",
    attributeTypes = NULL
 )


# Örnek 9.66: BLUE analizi
# Bağımlılık – Örnek 9.65
#	
 riceBLUE <- rTASSEL::assocModelFitter(
    tasObj = riceCovars,
    formula = seedvol ~ PC1  PC2  PC3,   
    fitMarkers = FALSE,
    kinship = NULL,
    fastAssociation = FALSE
 )

 riceBLUE


# Örnek 9.67: GLM ile GWAS analizi
# Bağımlılık – Örnek 9.60, 9.65
#
 riceGLM1 <- rTASSEL::assocModelFitter(
     tasObj = riceGenoPheno, 
     formula = protein ~ 1,
     fitMarkers = TRUE,  
     kinship = NULL,
     fastAssociation = FALSE
 )


 riceGLM2 <- rTASSEL::assocModelFitter(
     tasObj = riceGenoPheno, 
     formula = protein ~ .,  
     fitMarkers = TRUE,
     kinship = NULL,
     fastAssociation = FALSE
 )


 riceGLM3 <- rTASSEL::assocModelFitter(
     tasObj = riceGenoPheno, 
     formula = list(protein, seedvol, plheight) ~ ., 
     fitMarkers = TRUE,
     kinship = NULL,
     fastAssociation = FALSE
 )


 riceGLM4 <- rTASSEL::assocModelFitter(
     tasObj = riceGenoPheno, 
     formula = protein ~ PC1  PC2  PC3,
     fitMarkers = TRUE,
     kinship = NULL,
     fastAssociation = FALSE
 )


# Örnek 9.68: Analiz sonuçlarını inceleme ve kullanma
# Bağımlılık – Örnek 9.67
# 
 names(riceGLM4)
 gwasResults <- riceGLM4$GLM_Stats
 head(gwasResults,3)
 gwasGenotypes <- riceGLM4$GLM_Genotypes
 head(gwasGenotypes,3)


# Örnek 9.69: MLM ile GWAS analizi
# Bağımlılık – Örnek 9.60, 9.65
#
 riceKin <- rTASSEL::kinshipMatrix(tasObj = riceGenoPheno)
 riceMLM1 <- rTASSEL::assocModelFitter(
     tasObj = riceGenoPheno, 
     formula = protein ~ .,  
     fitMarkers = TRUE, 
     kinship = riceKin,  
     fastAssociation = FALSE
 )
Running all non <data traits and/or <taxa...
Association Analysis : MLM


# Örnek 9.70: Manhattan grafiği
# Bağımlılık – Örnek 9.69
#
 riceManhattan <- rTASSEL::manhattanPlot(
    assocStats = riceMLM1$MLM_Stats,
    trait = "protein",
    threshold = 5
 )

 riceManhattan


# Örnek 9.71. LD grafiği
# Bağımlılık – Örnek 9.69
#
# Genotipleri position için filtrele
 riceGenoPhenoFilter <- rTASSEL::filterGenotypeTableSites(
   riceGenoPheno,
   siteMinCount = 0,
   siteMinAlleleFreq = 0,
   siteMaxAlleleFreq = 1,
   minHeterozygous = 0,
   maxHeterozygous = 1,
   removeMinorSNPStates = FALSE,
   removeSitesWithIndels = FALSE,
   siteRangeFilterType = "position",
   startSite = NULL,
   endSite = NULL,
   startChr = 1,
   endChr =1,
   startPos = 50000,
   endPos = 700000,
   gRangesObj = NULL,
   chrPosFile = NULL,
   bedFile = NULL
 )
# LD grafiğini çizme 
 riceLDPlot <- rTASSEL::ldPlot(
   tasObj  = riceGenoPhenoFilter,
   ldType  = "All",
   plotVal = "r2",
   verbose = FALSE
 )

 riceLDPlot 


# Örnek 9.72. Etkileşimli LD grafiği
# Bağımlılık – Örnek 9.69
#
 rTASSEL::ldJavaApp(riceGenoPheno, windowSize = 100)


# Örnek 9.73. Archaeopteryx ağaç grafiği
# Bağımlılık – Örnek 9.69
#
 taxas <- c("081215-A05_1", "081215-A10_14", "090820-C11_630") 
 filteredTaxas <- rTASSEL::filterGenotypeTableTaxa(
   riceGenoPheno,
   minNotMissing = 0,
   minHeterozygous = 0,
   maxHeterozygous = 1,
   taxa = taxas
 )
 rTASSEL::treeJavaApp(filteredTaxas)


# Örnek 9.74: Genomik tahmin
# Bağımlılık – Örnek 9.69
#
 riceCV <- rTASSEL::genomicPrediction(
     tasPhenoObj = riceGenoPheno,
     kinship     = riceKin,
     doCV        = TRUE,
     kFolds      = 5,
     nIter       = 20
 )

 riceCV


# Örnek 9.75: rrBLUP paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(rrBLUP))
 if (!installed) {
   install.packages("rrBLUP", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rrBLUP))
 }

# Örnek 9.76: Verilerin okunması ve incelenmesi
# Veri klasörünü tanımla
 setwd("D:/gwasbook/data/maize")
# FAM dosyasını oku
 fam <- read.table("maize.fam")
 str(fam)
 head(fam)
# Harita verisini oku
 map <- read.table("maize.map")
 str(map)
 head(map)


# Örnek 9.77: PED dosyasının okunması
# Bağımlılık – Örnek 9.75, 9.76
#
# PED verisini okumak için BGLR paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(BGLR))
 if (!installed) {
   install.packages("BGLR", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(BGLR))
 }
# PED dosyasını oku
 setwd("D:/gwasbook/data/maize")
 maizePed <- BGLR::read_ped("maize.ped")
 nSnp <- maizePed$p
 nSamp <- maizePed$n
 maizeGeno <- maizePed$x
 rm(maizePed)
  maizeGeno[100:120]

# Markör verilerini yeniden kodla
# Eksik gözlem kodlarını 2'den NA'ya dönüştür
 maizeGeno[maizeGeno == 2] <- NA  
# 0'ları 0'a, 1'leri 1'e, 3'leri 2'ye dönüştür
 maizeGeno[maizeGeno == 0] <- 0  
 maizeGeno[maizeGeno == 1] <- 1 
 maizeGeno[maizeGeno == 3] <- 2

# Markör verisini matrise dönüştür
 maizeGeno <- matrix(maizeGeno, nrow=nSnp, ncol=nSamp, byrow=TRUE)
 maizeGeno <- t(maizeGeno)
 rownames(maizeGeno) <- fam$V2
 colnames(maizeGeno) <- map$V1

 dim(maizeGeno)	
 str(maizeGeno)

 maizeGeno[1:5, 1:5]
# rrBLUP A.mat fonksiyonu ile basit kalite kontrolü ve imputasyon
 impGeno <- A.mat(maizeGeno, 
   impute.method="mean", max.missing=0.15, min.MAF=0.05,
   return.imputed=T) 
 maizeGeno <- impGeno$imputed

# Alternatif olarak MAF için kalite kontrolü
# Minör allellerin filtrelenmesi
 thresholdMaf <- 0.02
 allelFreqs <- colSums(maizeGeno)/(2 * nrow(maizeGeno))
 maf <- ifelse(allelFreqs  0.5, 1 - allelFreqs, allelFreqs)
 mafIdx <- which(maf < thresholdMaf)
 maizeGeno <- maizeGeno[, -mafIdx]
 dim(maizeGeno)
 maizeGeno[1:5, 1:5]

# Kalite kontrolünden sonra MAP dosyasını güncelle
 mrkNames <- colnames(maizeGeno)
 map <- map[which(map[,1] %in% mrkNames),]
 dim(map) 

# Örnek 9.78: Fenotipik veri dosyasının okunması
#
 setwd("D:/gwasbook/data/maize")
 maizePheno <- read.table("maize_pheno.txt", header=TRUE, sep="\t",
   stringsAsFactors = FALSE) 

# Veriyi ve boyutları incele
 str(maizePheno)
 dim(maizePheno)
 maizePheno[1:5, ]


# Örnek 9.79: Fenotipik ve genotipik verilerin eşleştirilmesi 
# Bağımlılık – Örnek 9.77, 9.78
#
# Analiz edilecek özellik adı ile y vektörü oluştur
 y <- maizePheno$trait3
 midx <- which(is.na(y))
 gwasPheno <- data.frame(IID=maizePheno$IID[-midx], trait=y[-midx])
 rownames(gwasPheno) <- gwasPheno$IID
 genoIdx <- which(gwasPheno$IID %in% rownames(maizeGeno))
 gwasPheno <- gwasPheno[genoIdx,]
 gwasPheno <- gwasPheno[order(gwasPheno$IID),]
 phenoIdx <- which(rownames(maizeGeno) %in% gwasPheno$IID)
 maizeGeno <- maizeGeno[phenoIdx, ] 
 maizeGeno <- maizeGeno[order(as.factor(rownames(maizeGeno))), ]
# Eşleşmeyi kontrol et	
 intersect(maizeGeno, gwasPheno$IID)
# Kalite kontrolü ve genotip tamamlama sonrası genotip matrisi
 maizeGeno[1:5,1:5]
# Ayrıntılı genotip inceleme 
# DT::datatable(maizeGeno, rownames = FALSE, filter='top', 
#   options = list(pageLength = 10, scrollX=T)) 


# Örnek 9.80: GRM ve PCA hesaplama
# Bağımlılık – Örnek 9.75, 9.78
#
# Genomik ilişki (akrabalık) matrisi
 maizeKin <- A.mat(maizeGeno, 
   impute.method="mean", max.missing=0.15, min.MAF=0.05,
   return.imputed=F)
 maizeKin[1:5,1:5]

# PCA analizi
 maizePCA <- prcomp(maizeGeno)

# İlk 4 bileşeni çıkar ve PCA çıktı dosyasına ekle
 PC <- maizePCA$x[,1:4]
 head(PC)

 plot(PC[,1:2], col="dodgerblue", pch=19, cex=1,
  xlab = "PC1", ylab = "PC2", main="PCA grafiği")
 abline(v=0, lty=3, lwd=2, col="red")
 abline(h=0, lty=3, lwd=2, col="red")
 text(PC[,1:2], rownames(PC), cex=0.5, pos=3)

# Örnek 9.81: Genotip verisini rrBLUP paketiyle GWAS analizine hazırlama
# Bağımlılık – Örnek 9.75, 9.78
#
 maizeGeno <- maizeGeno - 1
 maizeGeno[1:5, 1:5]
 mrkIdx <- which(map[,1] %in% colnames(maizeGeno))
 map <- map[mrkIdx,]
 head(map, 3)
 maizeGeno <- data.frame(
   marker = map[, 1], chrom = map[, 2], pos = map[, 4], 
   t(maizeGeno), check.names = FALSE)  

 dim(maizeGeno)
 maizeGeno[1:5, 1:8]


# Örnek 9.82: GWAS analizi
# Bağımlılık – Örnek 9.75, 9.79, 9.81
 maizeGwas <- GWAS(
   pheno = gwasPheno, geno = maizeGeno, 
   min.MAF = 0.02, P3D = FALSE,
   fixed=NULL, 
   n.PC=3, #K=maizeKin,
   n.core=1, plot = TRUE)

 head(maizeGwas, 3)
 maizeGwas$p <- 10^(-maizeGwas$trait)
 head(maizeGwas, 3)


# Örnek 9.83: GWAS sonuçlarını inceleme
# Bağımlılık – Örnek 9.82
#
# FDR'ye göre düzeltilmiş p-değerleri ile etkisi önemli SNP'ler
 pFDR <- p.adjust(maizeGwas$p, method="fdr")
 maizeGwas[pFDR < 0.05, c(1,2,3,5)]


# Örnek 9.84: Manhattan grafiği
# Bağımlılık – Örnek 9.82
#
 suppressPackageStartupMessages(installed <- require(qqman))
 if (!installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman))
 }
 p_threshold <- 1e-05
 manhattan(x = maizeGwas, 
   chr = "chrom", bp = "pos", p = "p", snp = "marker",
   col = c("dodgerblue", "orange"), 
   suggestiveline = -log10(p_threshold), logp=TRUE)

# Örnek 9.85: mrMLM paketini kurma ve yükleme
 suppressPackageStartupMessages(is_installed <- require(mrMLM))
 if (!is_installed) {
   install.packages("mrMLM", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(mrMLM))
 }


# Örnek 9.86: mrMLM ile GWAS analizi 
# Bağımlılık – Örnek 9.85
#
 setwd("D:/gwasbook/data/mrmlm")
 mrMLM(
   fileGen="maizenumeric.csv", 
   filePhe="maizephenotype.csv", 
   fileKin="maizekinship.csv", 
   filePS="maizepopstructure.csv", 
   fileCov=NULL, 
   Genformat="Num", 
   PopStrType ="Q", 
   method="mrMLM",
   Likelihood= "REML",
   trait=1,
   SearchRadius=20, 
   CriLOD=3,
   SelectVariable=50,
   Bootstrap=FALSE, 
   DrawPlot=TRUE, 
   Plotformat="jpeg",
   dir=getwd(),
   PC=FALSE,
   RAM=16
 )


# Örnek 9.87: MultiManhattan ile görselleştirme 1
# Bağımlılık – Örnek 9.86
#
 MultiManhattan(ResultIntermediate="1_intermediate result.csv", 
   ResultFinal="1_Final result.csv", 
   mar = c(2.9, 2.8, 0.7, 2.8), LabDistance = 1.5, ScaleDistance = 0.4,
   LabelSize = 0.8, ScaleSize = 0.7, AxisLwd = 5, TckLength = -0.03, 
   LogTimes = 2, LODTimes = 1.2, lodline = 3, 
   MarkGene = FALSE, Pos_x = NULL, Pos_y = NULL, 
   GeneName = TRUE, GeneNameColour = NULL,
   PlotFormat="tiff", width=28000, height=7000, pointsize=60, res=600, 
   dirplot=getwd()) 


# Örnek 9.88: qqman ile görselleştirme
# Bağımlılık – Örnek 9.86
#
 mrmlmResults <- read.csv("1_intermediate result.csv")
 str(mrmlmResults)

 suppressPackageStartupMessages(is_installed <- require(qqman))
 if (!is_installed) {
   install.packages("qqman", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(qqman)) }
 manhattan(mrmlmResults, chr="Chromosome", 
   bp="Marker.position..bp.", snp="RS.", p="X..log10.P...mrMLM..",
   annotatePval = 1e-04, suggestiveline = -log10(1e-04),
   ylim = c(0, 10), main = paste("Manhattan plot - ", "mrMLM GWAS"),
   col = c("dodgerblue", "orange3"))


# Örnek 9.89: Birden fazla fenotipik özellik için GWAS analizi
# Bağımlılık – Örnek 9.85
#
 setwd("D:/gwasbook/data/mrmlm")
 mrMLM(
   fileGen="maizenumeric.csv", 
   filePhe="maizephenotype.csv", 
   fileKin="maizekinship.csv", 
   filePS="maizepopstructure.csv", 
   Genformat="Num", 
   PopStrType ="Q", 
   method="mrMLM",
   trait=1:3,
   DrawPlot=TRUE, 
   Plotformat="jpeg",
   dir=getwd(),
 )


# Örnek 9.90: mrMLM.GUI paketini kurma ve yükleme
 suppressPackageStartupMessages(installed <- require(mrMLM.GUI))
 if (!installed) {
   install.packages("mrMLM.GUI", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(mrMLM.GUI))
 }

 mrMLM.GUI()


# Örnek 9.91: rMVP paketinin kurulması / yüklenmesi
 suppressPackageStartupMessages(installed <- require(rMVP))
 if (!installed) {
   install.packages("rMVP", repos="https://cloud.r-project.org", dep=T)  
   suppressPackageStartupMessages(require(rMVP))
 }
 rm(installed)



# Örnek 9.92: rMVP ile GWAS analizi için veri hazırlama
# Bağımlılık - Örnek 9.91
# 
 setwd("D:/gwasbook/data/rmvp")
# VCF ve fenotip dosyalarını oku ve MVP'ye dönüştür
 MVP.Data(
   fileVCF="sativa.vcf",
   filePhe="sativapheno.dat",
   sep.phe="\t",
   filePC=TRUE,
   fileKin=TRUE,
   priority="memory", maxLine=10000,
   SNP.impute = "Major",
   out="sativa_mvp"
 )



# Örnek 9.93: MVP formatındaki dosyaları okuma ve inceleme
# Bağımlılık: Örnek 9.92
# 
# MVP veri dosyalarını R çalışma alanına okuma
 setwd("D:/gwasbook/data/rmvp")
 sativaGenotype <- attach.big.matrix("sativa_mvp.geno.desc")
 sativaPhenotype <- read.table("sativa_mvp.phe", head=TRUE)
 sativaMap <- read.table("sativa_mvp.geno.map" , head = TRUE)

 sativaGenotype[1:3, 1:10]
 sativaPhenotype[1:3,]
 sativaMap[1:3,]


# Örnek 9.94: Tek fenotip için GWAS analizi 
# Bağımlılık - Örnek 9.93 
# 
 setwd("D:/gwasbook/data/rmvp")
 sativaGwas <- MVP(
    method=c("GLM", "MLM", "FarmCPU"),
    geno = sativaGenotype,
    map = sativaMap,
    phe = sativaPhenotype,
# Varsa akrabalık matrisini ekle
    #K=sativaKin,
# Varsa kovaryetleri ekle
    #CV.GLM=sativaCovars,  
    #CV.MLM= sativaCovars,
    #CV.FarmCPU= sativaCovars,
    nPC.GLM=5,  # PC'ler kovaryetlere ekenmiş ise tanımlanmaz
    nPC.MLM=3,  # PC'ler kovaryetlere ekenmiş ise tanımlanmaz
    nPC.FarmCPU=3, # PC'ler kovaryetlere ekenmiş ise tanımlanmaz
    priority="speed",   # Kinship hesaplamada hız önceliği
    ncpus=6,  # İşlemci sayısı
    vc.method="BRENT",  # Sadece MLM ile kullanılan varyans bileşen yönt.
    maxLoop=10,
    method.bin="static",   # "FaST-LMM" veya "static" Sadece FarmCPU ile
    #permutation.threshold=TRUE,
    #permutation.rep=100,
    threshold=0.05,
    file.output=TRUE,
    outpath = getwd()
 )

  
# Örnek 9.95: GWAS sonuçlarının incelenmesi
# Bağımlılık - Örnek 9.94 
# 
 str(sativaGwas)
 gwasGLM <- sativaGwas$glm.results
 head(gwasGLM, 3)
 gwasMLM <- sativaGwas$mlm.results
 head(gwasMLM, 3)
 gwasFCPU <- sativaGwas$farmcpu.results
 head(gwasFCPU, 3)


# Örnek 9.96: GWAS sonuçlarının görselleştirilmesi
# Bağımlılık - Örnek 9.94
# 
 gwasResult <- cbind(sativaGwas$map[,1:3],
    plheight=sativaGwas$farmcpu.results[,3])
 gwasResult <- gwasResult [!is.na(gwasResult$plheight),]

 bonfThreshold <- 0.05/nrow(gwasResult)
 sigSnp <- gwasResult[gwasResult[,4] < bonfThreshold, 1]

 source("https://raw.githubusercontent.com/YinLiLin/CMplot/master/R/CMplot.r")

 CMplot(gwasResult, plot.type="m", 
   col=c("orange", "dodgerblue"),
   threshold=bonfThreshold, threshold.lty=1, 
   threshold.lwd=2, threshold.col="gray",
   amplify=TRUE, bin.size=1e3, 
   chr.den.col=c("blue", "white", "red"),
   signal.col="red", signal.cex=1.2,
   highlight=sigSnp, highlight.text=sigSnp,
   width=14, height=7, dpi=300,
   file.output=FALSE, verbose=FALSE)

 CMplot(gwasResult, plot.type="q", 
   col="dodgerblue", 
   conf.int=TRUE, conf.int.col="green",
   threshold=bonfThreshold, threshold.lty=1, 
   threshold.lwd=2, threshold.col="blue",
   amplify=TRUE, signal.col="red", signal.cex=1.2,
   width=14, height=7, dpi=300,
   main="Pirinç GWAS – Bitki boyu", 
   file.output=FALSE, verbose=FALSE)


# Örnek 9.97: Tüm fenotipler için GWAS analizi
# Bağımlılık - Örnek 9.93
# 
 for(i in c(2,4,5)){
  sativaGwas2 <- MVP(
    phe=sativaPhenotype[, c(1, i)],
    geno=sativaGenotype,
    map=sativaMap,
    nPC.GLM=3,
    nPC.MLM=3,
    nPC.FarmCPU=3,
    priority="speed",
    vc.method="BRENT",
    maxLoop=10,
    method.bin="static",
    threshold=0.05,
    method=c("GLM", "MLM", "FarmCPU")
  )
  gc()
 }



# Örnek 9.98: GAPIT3 paketinin kurulması/yüklenmesi
 suppressPackageStartupMessages(installed <- require(GAPIT))
 if (!installed) {
   if (!requireNamespace("devtools", quietly=TRUE))
     install.packages("devtools", repos="https://cloud.r-project.org")
   devtools::install_github("jiabowang/GAPIT", force=TRUE)
   suppressPackageStartupMessages(require(GAPIT))  
 }



# Örnek 9.99: GAPIT'i çevrimiçi yükleme ve kullanma
 source("http://zzlab.net/GAPIT/GAPIT.library.R")
 source("http://zzlab.net/GAPIT/gapit_functions.txt")


# Örnek 9.100: GAPIT'i çevrimdışı yükleme ve kullanma
# Çalışma klasörü
 setwd("D:/gwasbook/data/gapit")
 source("GAPIT_library.R")
 source("gapit_functions.R")


# Örnek 9.101: GAPIT paket bağımlılıkları (GAPIT_library.R içeriği)
# CRAN paketleri
 suppressPackageStartupMessages(installed <- require(gplots))
 if (!installed) {
   install.packages("gplots", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(gplots))
 }
 suppressPackageStartupMessages(installed <- require(LDheatmap))
 if (!installed) {
   install.packages("LDheatmap", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(LDheatmap))
 }
 suppressPackageStartupMessages(installed <- require(genetics))
 if (!installed) {
   install.packages("genetics", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(genetics))
 }
 suppressPackageStartupMessages(installed <- require(ape))
 if (!installed) {
   install.packages("ape", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ape))
 }
 suppressPackageStartupMessages(installed <- require(compiler))
 if (!installed) {
   install.packages("compiler", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(compiler))
 }
 suppressPackageStartupMessages(installed <- require(EMMREML))
 if (!installed) {
   install.packages("EMMREML", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(EMMREML))
 }
 suppressPackageStartupMessages(installed <- require(scatterplot3d))
 if (!installed) {
   install.packages("scatterplot3d", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(scatterplot3d))
 }
 suppressPackageStartupMessages(installed <- require(rgl))
 if (!installed) {
   install.packages("rgl", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rgl))
 }
 suppressPackageStartupMessages(installed <- require(rglwidget))
 if (!installed) {
   install.packages("rglwidget", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rglwidget))
 }

# BioConductor paketleri
 suppressPackageStartupMessages(installed <- require(multtest))
 if (!installed) {
    if (!requireNamespace("BiocManager", quietly = TRUE))
        install.packages("BiocManager")
    BiocManager::install("multtest")
    suppressPackageStartupMessages(require(multtest))
 }
 suppressPackageStartupMessages(installed <- require(snpStats))
 if (!installed) {
    if (!requireNamespace("BiocManager", quietly = TRUE))
        install.packages("BiocManager")
    BiocManager::install("snpStats")
    suppressPackageStartupMessages(require(snpStats))
 }


# Örnek 9.102: GAPIT ile GWAS analizi için veri okuma ve hazırlama
 setwd("D:/gwasbook/data/gapit")
 mdp_pheno <- read.table(file="mdp_traits.txt", head = TRUE)
 mdp_geno <- read.table(file="mdp_genotype_test.hmp.txt", head = FALSE)
 mdp_geno_num <- read.table(file="mdp_numeric.txt", head = TRUE)
 mdp_map <- read.table(file="mdp_SNP_information.txt", head = TRUE)


# Örnek 9.103: GAPIT fonksiyonu argümanları
 args(GAPIT)

# Örnek 9.104: GAPIT kullanılarak FarmCPU modeliyle GWAS analizi
# Bağımlılık – Örnek 9.102
#
 setwd("D:/gwasbook/GAPIT/results")
 modelFarmCPU <- GAPIT(
   Y = mdp_pheno, 
   GD = mdp_geno_num,
   #G = mdp_geno, 
   GM = mdp_map,
   model="FarmCPU",
   PCA.total=3, 
   PCA.3d=TRUE,   
   NJtree.group=4, 
   Inter.Plot=TRUE, 
   #Multiple_analysis=TRUE, 
   file.output=TRUE)



# Örnek 9.105: Sonuçların incelenmesi
# Bağımlılık – Örnek 9.104
#
 head (modelFarmCPU$PCA,3)
 head (modelFarmCPU$GWAS,3)


# Örnek 9.106: GAPIT ile çok modelli GWAS analizi
# Bağımlılık – Örnek 9.102
#
 modelMultiple <- GAPIT(
   Y = mdp_pheno, 
   GD = mdp_geno_num, 
   GM = mdp_map,
   model=c("GLM", "MLM", "SUPER", "FarmCPU", "Blink"), 
   Model.selection = TRUE, 
   PCA.total=3, 
   PCA.3d=TRUE,             
   file.output=TRUE)


# Örnek 9.107: sommer paketinin kurulumu
 suppressPackageStartupMessages(installed <- require(sommer))
 if (!installed) {
   install.packages("sommer", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(sommer))
 }


# Örnek 9.108: sommer paketi ile GWAS örneği
# Bağımlılık – Örnek 9.107
#
 setwd("D:/gwasbook/data/sommer")
# Fenotip verisinin okunması ve hazırlanması
 phenoDf <- read.table("phenotype.dat", sep="\t", header=TRUE)
 phenoDf$id <- as.factor(phenoDf$id)
 rownames(phenoDf) <- phenoDf$id
 head(phenoDf, 3)

# Genotip verisinin okunması ve hazırlanması
 genoDf <- read.table("genotype.dat", sep="\t", header=TRUE)
 rownames(genoDf) <- rownames(phenoDf)
 genoMat <- as.matrix(genoDf)
 genoMat[1:3, 1:3]

# Map verisinin okunması
 mapDf <- read.table("map.dat", sep="\t", header=TRUE)
 head(mapDf, 3)
                Locus Position Chrom
1  scaffold_77830_839        0     1
2  scaffold_39187_895        0     1
3 scaffold_50439_2379        0     1

# Varyans-kovaryans matrisinin üretilmesi 
 A <- A.mat(genoMat) # Eklemeli ilişki matrisi

# GWAS sonuçlarını görselleştirme

 gwasResults <- GWAS(color~1, random=~vs(id, Gu=A)  Rowf  Colf, 
   rcov=~units, data=phenoDf, M=genoMat, gTerm = "u:id", 
   nIters=3, verbose = FALSE)
 scores <- as.data.frame(gwasResults$scores)
 scores$Locus <- rownames(scores)
 manhattanDf <- merge(mapDf, scores, by="Locus", all.x = TRUE);
 manhattan(manhattanDf, pch=20, cex=1.5, PVCN = "color")


# Örnek 9.109: bigsnpr paketinin kurulması
 suppressPackageStartupMessages(installed <- require(bigsnpr))
 if (!installed) {
   install.packages(c("bigsnpr", "bigstatsr"), 
     repos="https://cloud.r-project.org", dep=T) 
   suppressPackageStartupMessages(require(bigsnpr))
 }


# Örnek 9.110: bigsnpr paketi için veri hazırlama
# Bağımlılık – Örnek 9.109
#
 setwd("D:/gwasbook/data/bigsnpr/")
 zipFile <- runonce::download_file(
   "https://figshare.com/ndownloader/files/38019072",
   dir = "D:/gwasbook/data/bigsnpr", fname = "GWAS_data.zip")

 unzip(zipFile, exdir = "D:/gwasbook/data/bigsnpr", overwrite = FALSE)

# PLINK Bed dosyasını sıralı hale getir ve clinic_data olarak kaydet
 system("plink --bfile GWAS_data --make-bed --out clinic_data")

# Kalite kontrolü yap
 qcFile <- snp_plinkQC("plink", "clinic_data",
    file.type = "--bfile", prefix.out = "clinic_data_QC", 
    maf = 0.01, geno = 0.1, mind = 0.1, hwe = 1e-50, 
    autosome.only = FALSE, extra.options = "", verbose = TRUE)

 rdsData <- snp_readBed2(qcFile, ncores = nb_cores())
 objBigsnp <- snp_attach(rdsData)
 str(objBigsnp, max.level = 2)


# Örnek 9.111: bigsnpr paketi için hazırlanan verileri inceleme
# Bağımlılık – Örnek 9.110
#
 clinicalData <- bigreadr::fread2("GWAS_clinical.csv")
 # Genotiplerle aynı sıraya getirme
 sIdx <- match(objBigsnp$fam$family.ID, clinicalData$FamID)
 clinicalData <- clinicalData[sIdx, ]
 # Hızlı sıralama kontrolü
 stopifnot(all.equal(objBigsnp$fam$sex, clinicalData$sex))

 # Fenotipleri fam veri çerçevesine ekle 
 objBigsnp$fam <- cbind(objBigsnp$fam, clinicalData[-c(1, 3)])

# Eksik genotiplerin inceleme
 geno <- objBigsnp$genotypes
 counts <- big_counts(geno)
 counts[, 1:5]
 (nNAs <- counts[4, ])
 #hist(nNAs) 

# Eksik genotiplerin tamamlanması
 genoImputed <- snp_fastImputeSimple(
   geno, method = "mode", ncores = nb_cores())

 big_counts(genoImputed, ind.col = 1:5)
# Büyük SNP nesnesinde genotypes verisini tamamlanmış ile güncelle ve kaydet
 objBigsnp$genotypes <- genoImputed
 snp_save(objBigsnp)


# Örnek 9.112: bigsnpr paketi ile GWAS analizi
# Bağımlılık – Örnek 9.111
#
 setwd("D:/gwasbook/data/bigsnpr")
 bedFile <- "clinic_data_QC.bed"
# BED dosyasının okunması (Alternatif yol)
 objBed <- bed(bedFile)
 str(objBed, max.level = 2)

# Temel bileşenler analizi
 objSvd <- runonce::save_run(
  bed_autoSVD(objBed, k = 10, ncores = nb_cores()),
  file = "clinic_data_PCA.rds")
# Temel bileşenler kayşat grafiği (scree plot)
 #plot(objSvd)
# Temel bileşenlerin elde edilmesi
 PC <- predict(objSvd)
# RDS dosyasının okunması ve se ve age değişkenkerini
# PC ile birleştirerek kovaryet verisi oluşturma
 objBigsnp <- snp_attach("clinic_data_QC.rds")
 covars <- cbind(as.matrix(objBigsnp$fam[c("sex", "age")]), PC[, 1:6])
# Genotip verisinin çekilmesi
 geno <- objBigsnp$genotypes

# İkili  fenotip için GWAS
 phenoCad <- objBigsnp$fam$CAD
 indCad <- which(!is.na(phenoCad) & complete.cases(covars))

# GWAS analizi
 gwasCad <- runonce::save_run(
   big_univLogReg(X=geno, y01.train=phenoCad[indCad], ind.train = indCad,
   covar.train = covars[indCad, ], tol = 1e-08, maxiter = 20, 
   ncores = nb_cores()), file = "Gwas_Results_Cad.rds")

# GWAS p-değerleri histogramı
 #plot(gwasCad)

# Manhattan ve QQ grafikleri
 CHR <- objBigsnp$map$chromosome
 POS <- objBigsnp$map$physical.pos
 snp_manhattan (gwasCad, infos.chr=CHR, infos.pos=POS, 
   colors = c("orange", "dodgerblue"), 
   dist.sep.chrs = 1e07, ind.highlight = integer(0),
   col.highlight = "red", labels = NULL, npoints = 50e3, coeff = 1) 
  ggplot2::geom_hline(yintercept = -log10(5e-8), 
   linetype = 2, color = "red")
# QQ grafiği
 snp_qq(gwasCad, lambdaGC=TRUE, coeff=1)

# Sürekli fenotip için GWAS
 phenoHdl <- objBigsnp$fam$hdl
 indHdl <- which(!is.na(phenoHdl) & complete.cases(covars))
# GWAS analizi
 gwasHdl <- runonce::save_run(
   big_univLinReg(X=geno, y=phenoHdl[indHdl], ind.train = indHdl,
   covar.train = covars[indHdl, ], ncores = nb_cores()),
   file = "Gwas_Results_Hdl.rds")

# Manhattan grafiği
 snp_manhattan(gwasHdl, CHR, POS, npoints = 50e3) 
  ggplot2::geom_hline(yintercept = -log10(5e-8), 
  linetype = 2, color = "red")

# QQ grafiği
 snp_qq(gwasHdl, lambdaGC = TRUE, coeff = 1)


# Örnek 10.1: NAM paketini kurma ve yükleme
 suppressPackageStartupMessages(installed <- require(NAM))
 if (!installed) {
   install.packages("NAM", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(NAM))
 }
 rm(installed)


# Örnek 10.2: Pirinç verisi için GWAS analizi
# Bağımlılık – Örnek 10.1
#
 setwd("D:/gwasbook/data/nam")
 library(genio)
# Genotip, snp ve birey açıklama dosyalarını oku
 plinkData <- genio::read_plink("sativa")
 geno <- t(plinkData$X)   # Genotip matrisi markörler sütunlarda olmalı
 bim <- plinkData$bim  # SNP verisi
 fam <- plinkData$fam  # Fam verisi
 phenotypes <- read.table("sativapheno.txt", sep="\t", header=TRUE)
# Veri temizliği
 #cleanData <- cleanREP( y = pheno, fam = families, gen = geno)
 #phenotypes <- cleanData$y
 #fam <- cleanData$fam
 #geno cleanData$gen
 idx <- which(!is.na(phenotypes$seedlength))
 pheno <- phenotypes$seedlength[idx]
 fam <- fam[idx,]
 geno <- geno[idx,]
 imputeGeno <- function(x) {
   replace(x, is.na(x), which.max(table(unique(x)))-1)}
 geno <- apply(geno, 2, imputeGeno)


# Çalışılacak fenotipi seç ve diğer verileri hazırla
# Fenotipleri oku
 pheno <- phenotypes$seedlength
 families <- as.integer(as.factor(fam$fam))
 chroms <- as.integer(table(as.integer(bim$chr)))

# GWAS analizi
 gwasResults <- gwas2(
    y=pheno, gen=geno, fam=families, chr=chroms, fixed=FALSE)

 pVals <- gwasResults$PolyTest$pval
 bonfThreshold <- 0.05/ncol(geno)
# Bonferroni eşiğine göre önemli SNP'ler
 sigSnps <- which(pVals  bonfThreshold)
 head(sigSnps)
# SNP'ler tarafından açıklanan varyans oranları
 Genetic_Var_each_SNP <- gwasResults$PolyTest$var.snp
 (Var_Explained_by_SNP <- Genetic_Var_each_SNP / var(pheno, na.rm=T) )
# LRT ölçeği ile Bonferroni eşiği
 optim(1, fn=function(x)abs(-log(pchisq(lrt,0.5, lower.tail=FALSE),
  base = 10)  log(bonfThreshold)),method="CG")$par

# Görselleştirme
 plot(gwasResults, FDR=0, find=10, alpha=bonfThreshold,
   pch=19, lwd=2, colA="orange", colB="blue") 

 opar <- par(mfrow=c(1,2))
# Manhattan grafiği 1
 sig <- 1(2* gwasResults$PolyTest$lrt  4.9)
 plot(x=gwasResults, alpha=1e-05,
   pch=sig3, lwd=sig, 
   main="Manhattan grafiği 1")

# Manhattan grefiği 2
 plot(x=gwasResults, pch=20, lwd=2, 
   colA="orange", colB="blue", main=" Manhattan grafiği 2")
 kern <- ksmooth(1:300, gwasResults$PolyTest$lrt, bandwidth=1)
 lines(kern, type="l", lwd=2)
 par(opar)


#EB-GWAS yöntemi
 system(paste('open',system.file("doc","gwa_description.pdf",
  package="NAM")))
#GxE GWAS: 
 system(paste('open',system.file("doc","gwa_ge_interactions.pdf",
  package="NAM")))
#GWP/GWAS yöntemleri
 system(paste('open',system.file("doc","background_stat_gen.pdf",
  package="NAM")))


# Örnek 10.3: GWAS.BAYES paketi ile Bayesçi GWAS analizi
# Sürekli normal dağılışlı fenotipler için analiz
 suppressPackageStartupMessages(installed <- require(GWAS.BAYES))
 if (!installed) {
   if (!require("BiocManager", quietly = TRUE))
      install.packages("BiocManager")
   BiocManager::install("GWAS.BAYES")
   suppressPackageStartupMessages(require(GWAS.BAYES))}
 rm(installed)

 setwd("D:/gwasbook/data/nam")
 library(genio)
# Genotip, snp ve birey açıklama dosyalarını oku
 plinkData <- genio::read_plink("sativa")
 geno <- t(plinkData$X)   # Genotip matrisi markörler sütunlarda olmalı
 bim <- plinkData$bim  # SNP verisi
 fam <- plinkData$fam  # Fam verisi
# Fenotipleri oku
 phenotypes <- read.table("sativapheno.txt", sep="\t", header=TRUE)

# Çalışılacak fenotipi seç ve akrabalık matrisi hesapla
 idx <- which(!is.na(phenotypes$seedlength))
 pheno <- phenotypes$seedlength[idx]
 geno <- geno[idx,]
 imputeGeno <- function(x) {
   replace(x, is.na(x), which.max(table(unique(x)))-1)}
 geno <- apply(geno, 2, imputeGeno)
 K <- AGHmatrix::Gmatrix(SNPmatrix=geno, method="VanRaden")

# BICOSS P3D ile GWAS analizi
 gwasResults1 <- BICOSS(Y = pheno, SNPs = geno, 
   kinship = K, FDR_Nominal = 0.05, P3D = TRUE,
   maxiterations = 400, runs_til_stop = 40)

 gwasResults1$best_model
 [1] 12207 12288

# BICOSS Exact test ile GWAS analizi
 gwasResults2 <- BICOSS(Y = pheno, SNPs = geno, 
   kinship = K, FDR_Nominal = 0.05, P3D = FALSE,
   maxiterations = 400, runs_til_stop = 40)
 gwasResults2$best_model

## Simüle edilen nedensel SNP'ler
 sigSnps <- gwasResults2$best_model 
 simCausalSnps <- c(11312, 12207, 12288, 29981)

## Doğru bulguların (TP'lerin) sayısı
 TP <- sum(sigSnps %in% simCausalSnps)
 TP
## Yanlış bulguların (FP'lerin) sayısı
 FP <- sum(!(sigSnps %in% simCausalSnps))
 FP
# SNP'lerin listelenmesi
 sigSnpNames <- colnames(geno[,sigSnps])
 bim[which(bim$id == sigSnpNames),]


# Örnek 10.4: BG2 paketi ile ikili fenotipler için GWAS analizi
# Normal olmayan dağılışlar (Poisson, bernouilli vb) için Bayesçi analiz
 suppressPackageStartupMessages(installed <- require(BG2))
 if (!installed) {
   if (!require("BiocManager", quietly = TRUE))
      install.packages("BiocManager")
   BiocManager::install("BG2")
   suppressPackageStartupMessages(require(BG2))}
 rm(installed)

 setwd("D:/gwasbook/data/nam")
 library(genio)
# Genotip, snp ve birey açıklama dosyalarını oku
 plinkData <- genio::read_plink("sativa")
 geno <- t(plinkData$X)   # Genotip matrisi markörler sütunlarda olmalı
 bim <- plinkData$bim  # SNP verisi
 fam <- plinkData$fam  # Fam verisi
# Fenotipleri oku
 phenotypes <- read.table("sativapheno.txt", sep="\t", header=TRUE)

# Çalışılacak fenotipi seç ve akrabalık matrisi hesapla
 idx <- which(!is.na(phenotypes$awnpresence))
 pheno <- phenotypes$awnpresence[idx]
 geno <- geno[idx,]
 imputeGeno <- function(x) {
   replace(x, is.na(x), which.max(table(unique(x)))-1)}
 geno <- apply(geno, 2, imputeGeno)

 K <- AGHmatrix::Gmatrix(SNPmatrix=geno, method="VanRaden")

 covariances <- list()
 covariances[[1]] <- K
 set.seed(11)
 gwasResults3 <- BG2(Y=pheno, SNPs=geno, Fixed = NULL, 
  Covariance=covariances, Z=NULL, family="bernoulli", 
   replicates=NULL, Tau="IG", FDR_Nominal = 0.05, 
   maxiterations = 400, runs_til_stop = 40)

 gwasResults3


